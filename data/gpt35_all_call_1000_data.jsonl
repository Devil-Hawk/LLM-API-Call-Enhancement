{"mask": "last", "input": "stsci.tools.fileutil.buildFITS<mask>(", "reference": "Name", "full_reference": "stsci.tools.fileutil.buildFITSName", "raw_gpt3.5": "1. Header\n2. HDU\n3. Table\n4. Image\n5. Name\n6. Data\n7. Primary\n8. Extension\n9. HDUList\n10. HDUHeader\n11. HDUData\n12. HDUName\n13. HDUExtension\n14. FITSHeader\n15. FITSData\n16. FITSName\n17. FITSExtension\n18. FITSTable\n19. FITSImage\n20. FITSPrimary"}
{"mask": "last", "input": "win32<mask>.QueryServiceStatusEx(", "reference": "service", "full_reference": "win32service.QueryServiceStatusEx", "raw_gpt3.5": "1. win32api.QueryServiceStatusEx()\n2. win32net.QueryServiceStatusEx()\n3. win32security.QueryServiceStatusEx()\n4. win32ts.QueryServiceStatusEx()\n5. win32evtlog.QueryServiceStatusEx()\n6. win32print.QueryServiceStatusEx()\n7. win32com.QueryServiceStatusEx()\n8. win32gui.QueryServiceStatusEx()\n9. win32service.QueryServiceStatusEx()\n10. win32timezone.QueryServiceStatusEx()\n11. win32clipboard.QueryServiceStatusEx()\n12. win32console.QueryServiceStatusEx()\n13. win32cred.QueryServiceStatusEx()\n14. win32crypt.QueryServiceStatusEx()\n15. win32event.QueryServiceStatusEx()\n16. win32file.QueryServiceStatusEx()\n17. win32job.QueryServiceStatusEx()\n18. win32pipe.QueryServiceStatusEx()\n19. win32process.QueryServiceStatusEx()\n20. win32profile.QueryServiceStatusEx()"}
{"mask": "last", "input": "demand<mask>.bdew.ElecSlp(", "reference": "lib", "full_reference": "demandlib.bdew.ElecSlp", "raw_gpt3.5": "1. _ : 0.9999\n2. s : 0.0001\n3. e : 0.0000\n4. t : 0.0000\n5. u : 0.0000\n6. r : 0.0000\n7. i : 0.0000\n8. o : 0.0000\n9. n : 0.0000\n10. a : 0.0000\n11. l : 0.0000\n12. f : 0.0000\n13. g : 0.0000\n14. h : 0.0000\n15. m : 0.0000\n16. p : 0.0000\n17. c : 0.0000\n18. b : 0.0000\n19. d : 0.0000\n20. x : 0.0000"}
{"mask": "last", "input": "cltk.prosody.latin.string_<mask>.move_consonant_right(", "reference": "utils", "full_reference": "cltk.prosody.latin.string_utils.move_consonant_right", "raw_gpt3.5": "1. length\n2. index\n3. position\n4. slice\n5. buffer\n6. buffer_size\n7. buffer_index\n8. buffer_position\n9. buffer_slice\n10. buffer_length\n11. buffer_start\n12. buffer_end\n13. buffer_offset\n14. buffer_shift\n15. buffer_adjust\n16. buffer_move\n17. buffer_copy\n18. buffer_insert\n19. buffer_delete\n20. buffer_replace"}
{"mask": "first", "input": "<mask>fuzz.rand.randint(", "reference": "gram", "full_reference": "gramfuzz.rand.randint", "raw_gpt3.5": "1. numpy\n2. scipy\n3. random\n4. pandas\n5. tensorflow\n6. torch\n7. sklearn\n8. math\n9. statistics\n10. matplotlib\n11. seaborn\n12. sympy\n13. cv2\n14. PIL\n15. skimage\n16. keras\n17. mxnet\n18. gensim\n19. nltk\n20. spacy"}
{"mask": "all", "input": "cleverhans.<mask>.pyplot_image.pair_visual(", "reference": "plot", "full_reference": "cleverhans.plot.pyplot_image.pair_visual", "raw_gpt3.5": "1. adversarial\n2. attacks\n3. utils\n4. model\n5. loss\n6. gradients\n7. optimizers\n8. metrics\n9. evaluation\n10. attacks_tf\n11. attacks_torch\n12. attacks_keras\n13. attacks_mxnet\n14. attacks_pt\n15. attacks_jax\n16. attacks_tf1\n17. attacks_tf2\n18. attacks_torchvision\n19. attacks_tensorflow\n20. attacks_pytorch"}
{"mask": "first", "input": "tincan.conversions.<mask>8601.jsonify_timedelta(", "reference": "iso", "full_reference": "tincan.conversions.iso8601.jsonify_timedelta", "raw_gpt3.5": "1. iso\n2. duration\n3. format\n4. to\n5. parse\n6. timedelta\n7. serialize\n8. strf\n9. from\n10. duration_to\n11. duration_from\n12. duration_parse\n13. duration_serialize\n14. duration_strf\n15. iso_to\n16. iso_from\n17. iso_parse\n18. iso_serialize\n19. iso_strf\n20. iso_duration"}
{"mask": "first", "input": "openquake.hmtk.sources.<mask>_source.mtkAreaSource(", "reference": "area", "full_reference": "openquake.hmtk.sources.area_source.mtkAreaSource", "raw_gpt3.5": "1. point\n2. polygon\n3. grid\n4. line\n5. circle\n6. rectangle\n7. ellipse\n8. sector\n9. hexagon\n10. triangle\n11. ring\n12. square\n13. annulus\n14. sectorized\n15. buffered\n16. irregular\n17. complex\n18. multi\n19. weighted\n20. fractal"}
{"mask": "first", "input": "zipline.pipeline.filters.<mask>ileFilter(", "reference": "Percent", "full_reference": "zipline.pipeline.filters.PercentileFilter", "raw_gpt3.5": "1. Null\n2. NotN\n3. NotNan\n4. NotNanF\n5. NotNanFi\n6. NotNanFil\n7. NotNanFilt\n8. NotNanFilte\n9. NotNanFilter\n10. NotNanFilterM\n11. NotNanFilterMa\n12. NotNanFilterMan\n13. NotNanFilterMani\n14. NotNanFilterManif\n15. NotNanFilterManife\n16. NotNanFilterManifel\n17. NotNanFilterManifelt\n18. NotNanFilterManifelte\n19. NotNanFilterManifelter\n20. NotNanFilterManifilter"}
{"mask": "first", "input": "hpOneView.resources.networking.switch_types.<mask>Types(", "reference": "Switch", "full_reference": "hpOneView.resources.networking.switch_types.SwitchTypes", "raw_gpt3.5": "1. Ethernet\n2. FibreChannel\n3. InfiniBand\n4. Virtual\n5. Port\n6. Fabric\n7. Logical\n8. Physical\n9. SAN\n10. Network\n11. Trunk\n12. VLAN\n13. Link\n14. SpanningTree\n15. Broadcast\n16. Multicast\n17. Unicast\n18. QualityOfService\n19. Routing\n20. Security"}
{"mask": "first", "input": "<mask>ythran.passmanager.PassManager(", "reference": "p", "full_reference": "pythran.passmanager.PassManager", "raw_gpt3.5": "1. o: Python\n2. p: Cython\n3. a: Numba\n4. i: PyPy\n5. u: numba\n6. e: PyPyJIT\n7. y: PyPyJIT\n8. t: Pythran\n9. h: Pythran\n10. r: Pythran\n11. n: Pythran\n12. .: Pythran\n13. s: Pythran\n14. m: Pythran\n15. a: Pythran\n16. n: Pythran\n17. a: Pythran\n18. g: Pythran\n19. e: Pythran\n20. r: Pythran"}
{"mask": "last", "input": "qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAnc<mask>(", "reference": "illa", "full_reference": "qiskit.transpiler.passes.mapping.enlarge_with_ancilla.EnlargeWithAncilla", "raw_gpt3.5": "1. i\n2. a\n3. e\n4. i\n5. l\n6. e\n7. r\n8. s\n9. t\n10. r\n11. a\n12. t\n13. i\n14. o\n15. n\n16. s\n17. . \n18. P\n19. a\n20. s"}
{"mask": "last", "input": "ut<mask>.util_str.difftext(", "reference": "ool", "full_reference": "utool.util_str.difftext", "raw_gpt3.5": "1. s\n2. i\n3. l\n4. e\n5. f\n6. o\n7. r\n8. m\n9. a\n10. n\n11. c\n12. t\n13. e\n14. x\n15. p\n16. a\n17. t\n18. h\n19. b\n20. u"}
{"mask": "first", "input": "<mask>herder.utils.queryset.chunked_qs_reverse(", "reference": "tree", "full_reference": "treeherder.utils.queryset.chunked_qs_reverse", "raw_gpt3.5": "1. django\n2. haystack\n3. elasticsearch\n4. wagtail\n5. haystack.backends\n6. haystack.query\n7. haystack.inputs\n8. haystack.utils\n9. haystack.backends.elasticsearch_backend\n10. haystack.backends.whoosh_backend\n11. haystack.backends.solr_backend\n12. haystack.backends.simple_backend\n13. haystack.backends.xapian_backend\n14. haystack.backends.whoosh_cn_backend\n15. haystack.backends.solr_cn_backend\n16. haystack.backends.elasticsearch_cn_backend\n17. haystack.backends.simple_cn_backend\n18. haystack.backends.xapian_cn_backend\n19. haystack.backends.solrcloud_backend\n20. haystack.backends.solrcloud_cn_backend"}
{"mask": "all", "input": "<mask>.readers.mzidplus.get_mzid_peptidedata(", "reference": "app", "full_reference": "app.readers.mzidplus.get_mzid_peptidedata", "raw_gpt3.5": "1. pyteomics\n2. ms\n3. mzml\n4. mzid\n5. mzidentml\n6. mztab\n7. mzquantml\n8. mzxml\n9. mzml2isa\n10. mzmine\n11. mzml2isaconverter\n12. mzml2isaconvertercli\n13. mzml2isaconvertergui\n14. mzml2isaconverterutils\n15. mzml2pepxml\n16. mzml2pepxmlconverter\n17. mzml2pepxmlconvertercli\n18. mzml2pepxmlconvertergui\n19. mzml2pepxmlconverterutils\n20. mzml2psm"}
{"mask": "last", "input": "invenio_files_rest.models.Object<mask>.get(", "reference": "Version", "full_reference": "invenio_files_rest.models.ObjectVersion.get", "raw_gpt3.5": "1. Version\n2. Size\n3. URI\n4. ID\n5. Hash\n6. Content\n7. Access\n8. Location\n9. Metadata\n10. Permissions\n11. Type\n12. Data\n13. Parent\n14. Children\n15. Owner\n16. Created\n17. Modified\n18. Deleted\n19. Exists\n20. Path"}
{"mask": "last", "input": "opinel.utils.aws.handle_truncated_<mask>(", "reference": "response", "full_reference": "opinel.utils.aws.handle_truncated_response", "raw_gpt3.5": "1. response\n2. data\n3. result\n4. output\n5. message\n6. payload\n7. content\n8. body\n9. response_data\n10. response_body\n11. truncated_data\n12. truncated_response\n13. truncated_result\n14. truncated_output\n15. truncated_message\n16. truncated_payload\n17. truncated_content\n18. truncated_response_data\n19. truncated_response_body\n20. truncated_message_data"}
{"mask": "first", "input": "pyclustering.core.legion_wrapper.<mask>ion_simulate(", "reference": "leg", "full_reference": "pyclustering.core.legion_wrapper.legion_simulate", "raw_gpt3.5": "1. popul\n2. iterat\n3. mutat\n4. select\n5. cross\n6. evaluat\n7. generat\n8. chromos\n9. parent\n10. reproduct\n11. selecti\n12. crossov\n13. fitness\n14. selectiv\n15. elit\n16. tournament\n17. rank\n18. roulette\n19. uniform\n20. steady"}
{"mask": "all", "input": "boiler.user.services.oauth.<mask>.get(", "reference": "facebook", "full_reference": "boiler.user.services.oauth.facebook.get", "raw_gpt3.5": "1. access_token\n2. refresh_token\n3. authorization\n4. token\n5. credentials\n6. auth\n7. client\n8. session\n9. provider\n10. token_info\n11. token_data\n12. token_exchange\n13. token_manager\n14. token_handler\n15. token_service\n16. token_provider\n17. token_generator\n18. token_validator\n19. token_authorizer\n20. token_retriever"}
{"mask": "first", "input": "pug.nlp.util.<mask>_valid_american_date_string(", "reference": "is", "full_reference": "pug.nlp.util.is_valid_american_date_string", "raw_gpt3.5": "1. is\n2. get\n3. parse\n4. find\n5. check\n6. validate\n7. format\n8. create\n9. extract\n10. generate\n11. convert\n12. ensure\n13. make\n14. match\n15. replace\n16. set\n17. strip\n18. transform\n19. update\n20. verify"}
{"mask": "last", "input": "smtLayer.vmUtils.disableEnable<mask>(", "reference": "Disk", "full_reference": "smtLayer.vmUtils.disableEnableDisk", "raw_gpt3.5": "1. Logging\n2. Debugging\n3. Tracing\n4. Profiling\n5. Metrics\n6. Monitoring\n7. Caching\n8. Threading\n9. Scheduling\n10. Interrupts\n11. Exceptions\n12. Security\n13. Authorization\n14. Authentication\n15. Validation\n16. Serialization\n17. Deserialization\n18. Compression\n19. Decompression\n20. Encryption"}
{"mask": "last", "input": "sena<mask>.jsonapi.underscore.is_dict(", "reference": "ite", "full_reference": "senaite.jsonapi.underscore.is_dict", "raw_gpt3.5": "1. te<mask>\n2. se<mask>\n3. le<mask>\n4. me<mask>\n5. be<mask>\n6. de<mask>\n7. ne<mask>\n8. ve<mask>\n9. pe<mask>\n10. re<mask>\n11. fe<mask>\n12. xe<mask>\n13. ce<mask>\n14. ze<mask>\n15. ge<mask>\n16. he<mask>\n17. je<mask>\n18. ke<mask>\n19. ye<mask>\n20. we<mask>"}
{"mask": "first", "input": "hotdoc.utils.<mask>gable.info(", "reference": "log", "full_reference": "hotdoc.utils.loggable.info", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. delete\n5. create\n6. fetch\n7. modify\n8. parse\n9. serialize\n10. validate\n11. extract\n12. generate\n13. render\n14. format\n15. encode\n16. decode\n17. normalize\n18. sanitize\n19. transform\n20. traverse"}
{"mask": "first", "input": "docker_cache.<mask>_docker_cache(", "reference": "load", "full_reference": "docker_cache.load_docker_cache", "raw_gpt3.5": "1. get\n2. set\n3. delete\n4. clear\n5. update\n6. create\n7. add\n8. remove\n9. list\n10. check\n11. refresh\n12. invalidate\n13. load\n14. save\n15. query\n16. initialize\n17. connect\n18. disconnect\n19. retrieve\n20. backup"}
{"mask": "all", "input": "cauldron.environ.modes.<mask>(", "reference": "has", "full_reference": "cauldron.environ.modes.has", "raw_gpt3.5": "1. debug\n2. production\n3. test\n4. development\n5. staging\n6. release\n7. integration\n8. performance\n9. profiling\n10. benchmark\n11. coverage\n12. analysis\n13. optimization\n14. validation\n15. simulation\n16. experimentation\n17. deployment\n18. monitoring\n19. logging\n20. security"}
{"mask": "first", "input": "couchbase._libcouchbase.Bucket.<mask>ure_multi(", "reference": "end", "full_reference": "couchbase._libcouchbase.Bucket.endure_multi", "raw_gpt3.5": "1. config\n2. append\n3. prep\n4. increm\n5. decrem\n6. touch\n7. get\n8. repl\n9. upsert\n10. rem\n11. count\n12. lock\n13. unlo\n14. query\n15. ping\n16. stats\n17. incr\n18. decr\n19. retrie\n20. insert"}
{"mask": "all", "input": "eventlet.green.<mask>.getaddrinfo(", "reference": "socket", "full_reference": "eventlet.green.socket.getaddrinfo", "raw_gpt3.5": "1. socket\n2. dns\n3. urllib\n4. httplib\n5. requests\n6. http\n7. ssl\n8. select\n9. asyncore\n10. twisted\n11. gevent\n12. net\n13. os\n14. subprocess\n15. multiprocessing\n16. threading\n17. queue\n18. time\n19. datetime\n20. logging"}
{"mask": "first", "input": "<mask>man.queryparams.fields.init(", "reference": "gold", "full_reference": "goldman.queryparams.fields.init", "raw_gpt3.5": "1. django\n2. rest_framework\n3. tastypie\n4. flask\n5. requests\n6. urllib\n7. urllib3\n8. aiohttp\n9. http.client\n10. httplib2\n11. google.auth\n12. google.oauth2\n13. googleapiclient\n14. google.cloud\n15. google.cloud.storage\n16. google.cloud.bigquery\n17. google.cloud.pubsub\n18. google.cloud.logging\n19. google.cloud.vision\n20. google.cloud.translate"}
{"mask": "first", "input": "eth.db.schema.SchemaV1.<mask>_canonical_head_hash_lookup_key(", "reference": "make", "full_reference": "eth.db.schema.SchemaV1.make_canonical_head_hash_lookup_key", "raw_gpt3.5": "1. state\n2. block\n3. transaction\n4. header\n5. chain\n6. node\n7. account\n8. event\n9. receipt\n10. log\n11. code\n12. storage\n13. trie\n14. hash\n15. merkle\n16. bloom\n17. bloom_filter\n18. bloom_lookup\n19. bloom_head\n20. bloom_head_hash"}
{"mask": "first", "input": "zipline.errors.<mask>InInitialize(", "reference": "History", "full_reference": "zipline.errors.HistoryInInitialize", "raw_gpt3.5": "1. Bundle\n2. Calendar\n3. TradingAlgorithm\n4. Algorithm\n5. DataPortal\n6. AssetDBWriter\n7. AssetDBReader\n8. AssetFinder\n9. Asset\n10. AssetDB\n11. AssetDBSession\n12. AssetType\n13. AssetExists\n14. AssetNotFound\n15. AssetDBVersionError\n16. AssetDBInvalidUpdate\n17. AssetDBKeyError\n18. AssetDBValueError\n19. AssetDBIntegrityError\n20. AssetDBDuplicateKeyError"}
{"mask": "last", "input": "grr_response_<mask>.rdfvalues.flow_objects.FlowIterator.FromSerializedString(", "reference": "server", "full_reference": "grr_response_server.rdfvalues.flow_objects.FlowIterator.FromSerializedString", "raw_gpt3.5": "1. _state\n2. _data\n3. _result\n4. _flow\n5. _queue\n6. _index\n7. _context\n8. _exception\n9. _metadata\n10. _task\n11. _history\n12. _input\n13. _output\n14. _callback\n15. _serializer\n16. _deserializer\n17. _source\n18. _destination\n19. _message\n20. _event"}
{"mask": "last", "input": "bolt.local.array.BoltArray<mask>(", "reference": "Local", "full_reference": "bolt.local.array.BoltArrayLocal", "raw_gpt3.5": "1. shape\n2. dtype\n3. size\n4. ndim\n5. strides\n6. itemsize\n7. nbytes\n8. base\n9. data\n10. flags\n11. T\n12. real\n13. imag\n14. flat\n15. ctypes\n16. astype\n17. copy\n18. reshape\n19. transpose\n20. squeeze"}
{"mask": "all", "input": "modeltranslation.<mask>.auto_populate(", "reference": "utils", "full_reference": "modeltranslation.utils.auto_populate", "raw_gpt3.5": "1. default\n2. registry\n3. settings\n4. utils\n5. admin\n6. fields\n7. forms\n8. models\n9. settings\n10. signals\n11. tests\n12. translation\n13. views\n14. base\n15. compat\n16. exceptions\n17. gettext\n18. languages\n19. middleware\n20. templatetags"}
{"mask": "last", "input": "turbol<mask>.authentication.utils.OSAuthentication(", "reference": "ift", "full_reference": "turbolift.authentication.utils.OSAuthentication", "raw_gpt3.5": "1. ogin\n2. ogout\n3. icense\n4. ocal\n5. oad\n6. ock\n7. oop\n8. ocalhost\n9. ocalize\n10. ocaltime\n11. ocalize_datetime\n12. ocalize_date\n13. ocalize_time\n14. ocalize_timedelta\n15. ocalize_timezone\n16. ocalize_duration\n17. ocalize_period\n18. ocalize_interval\n19. ocalize_range\n20. ocalize_frequency"}
{"mask": "first", "input": "<mask>athon_acme.clients._tx_util.ClientPolicyForHTTPS.from_pem_files(", "reference": "mar", "full_reference": "marathon_acme.clients._tx_util.ClientPolicyForHTTPS.from_pem_files", "raw_gpt3.5": "1. OpenSSL\n2. cryptography\n3. Twisted\n4. pyOpenSSL\n5. ssl\n6. pem\n7. pemfile\n8. pem_files\n9. pem_file\n10. pemutil\n11. pem_utils\n12. pem_reader\n13. pem_read\n14. pem_write\n15. pem_writer\n16. pem_encoding\n17. pem_decoder\n18. pem_parser\n19. pem_handler\n20. pem_manager"}
{"mask": "last", "input": "twisted.internet.ssl.platform<mask>(", "reference": "Trust", "full_reference": "twisted.internet.ssl.platformTrust", "raw_gpt3.5": "1. TrustRoot\n2. TrustStore\n3. TrustAnchors\n4. TrustManager\n5. TrustVerifier\n6. TrustStoreContext\n7. TrustStoreFactory\n8. TrustStoreParameters\n9. TrustStoreProvider\n10. TrustStoreSpi\n11. TrustStoreType\n12. TrustStoreAlias\n13. TrustStorePassword\n14. TrustStorePath\n15. TrustStoreProtocol\n16. TrustStoreAlgorithm\n17. TrustStoreKeyManager\n18. TrustStoreKeyStore\n19. TrustStoreSSLContext\n20. TrustStoreX509Certificate"}
{"mask": "first", "input": "cellpy.parameters.<mask>ms.Instruments.to_dict(", "reference": "pr", "full_reference": "cellpy.parameters.prms.Instruments.to_dict", "raw_gpt3.5": "1. available\n2. connected\n3. disconnected\n4. get\n5. list\n6. load\n7. remove\n8. save\n9. select\n10. set\n11. show\n12. update\n13. add\n14. clear\n15. configure\n16. create\n17. delete\n18. detect\n19. disconnect\n20. find"}
{"mask": "first", "input": "iotile.sg.exceptions.<mask>FullError(", "reference": "Storage", "full_reference": "iotile.sg.exceptions.StorageFullError", "raw_gpt3.5": "1. Device\n2. Project\n3. Connection\n4. Certificate\n5. Authentication\n6. Authorization\n7. Configuration\n8. Resource\n9. Subscription\n10. Permission\n11. Access\n12. Key\n13. Token\n14. Signature\n15. Policy\n16. Identity\n17. Trust\n18. Validation\n19. Registration\n20. Enrollment"}
{"mask": "first", "input": "django.contrib.contenttypes.models.ContentType.objects.<mask>_for_id(", "reference": "get", "full_reference": "django.contrib.contenttypes.models.ContentType.objects.get_for_id", "raw_gpt3.5": "1. get\n2. get_object\n3. get_object_or\n4. get_object_or_404\n5. get_for_model\n6. get_by_natural_key\n7. get_or_create\n8. filter\n9. select_related\n10. prefetch_related\n11. values\n12. values_list\n13. annotate\n14. aggregate\n15. count\n16. exists\n17. update\n18. delete\n19. create\n20. bulk_create"}
{"mask": "all", "input": "spyder.<mask>.updates.WorkerUpdates(", "reference": "workers", "full_reference": "spyder.workers.updates.WorkerUpdates", "raw_gpt3.5": "1. _get\n2. _set\n3. _delete\n4. _add\n5. _update\n6. _clear\n7. _fetch\n8. _process\n9. _execute\n10. _load\n11. _save\n12. _run\n13. _initialize\n14. _handle\n15. _parse\n16. _validate\n17. _merge\n18. _refresh\n19. _notify\n20. _cancel"}
{"mask": "last", "input": "google.datal<mask>.bigquery.Table(", "reference": "ab", "full_reference": "google.datalab.bigquery.Table", "raw_gpt3.5": "1. Dataset\n2. DatasetReference\n3. DatasetList\n4. DatasetListItem\n5. DatasetMetadata\n6. DatasetReferenceList\n7. DatasetReferenceListItem\n8. DatasetReferenceMetadata\n9. DatasetReferenceTable\n10. DatasetReferenceTableList\n11. DatasetReferenceTableListItem\n12. DatasetReferenceTableMetadata\n13. DatasetTable\n14. DatasetTableList\n15. DatasetTableListItem\n16. DatasetTableMetadata\n17. DatasetTableReference\n18. DatasetTableReferenceList\n19. DatasetTableReferenceListItem\n20. DatasetTableReferenceMetadata"}
{"mask": "first", "input": "<mask>ilio.rest.preview.acc_security.service.verification.VerificationList(", "reference": "tw", "full_reference": "twilio.rest.preview.acc_security.service.verification.VerificationList", "raw_gpt3.5": "1. Acc\n2. Preview\n3. Rest\n4. Ilio\n5. Security\n6. Service\n7. Verification\n8. List\n9. acc\n10. preview\n11. rest\n12. ilio\n13. security\n14. service\n15. verification\n16. list\n17. .(\n18. (\n19. ,\n20. )"}
{"mask": "first", "input": "<mask>astool.classes2.Curve.merge(", "reference": "s", "full_reference": "sastool.classes2.Curve.merge", "raw_gpt3.5": "1. _m: 0.9999999999999999\n2. _merge: None\n3. _merge_: None\n4. _merge_curves: None\n5. _merge_data: None\n6. _merge_dicts: None\n7. _merge_edges: None\n8. _merge_items: None\n9. _merge_lines: None\n10. _merge_lists: None\n11. _merge_nodes: None\n12. _merge_points: None\n13. _merge_polygons: None\n14. _merge_segments: None\n15. _merge_sets: None\n16. _merge_shapes: None\n17. _merge_strings: None\n18. _merge_surfaces: None\n19. _merge_trees: None\n20. _merge_vertices: None"}
{"mask": "last", "input": "sherpa.ast<mask>.ui.get_model(", "reference": "ro", "full_reference": "sherpa.astro.ui.get_model", "raw_gpt3.5": "1. _id\n2. _name\n3. _type\n4. _version\n5. _class\n6. _module\n7. _file\n8. _path\n9. _dir\n10. _config\n11. _data\n12. _schema\n13. _options\n14. _params\n15. _results\n16. _metrics\n17. _plots\n18. _log\n19. _info\n20. _warnings"}
{"mask": "last", "input": "bcb<mask>.variation.germline.extract(", "reference": "io", "full_reference": "bcbio.variation.germline.extract", "raw_gpt3.5": "1. _hmm\n2. _gene\n3. _region\n4. _allele\n5. _seq\n6. _chrom\n7. _pos\n8. _ref\n9. _alt\n10. _score\n11. _type\n12. _id\n13. _name\n14. _data\n15. _info\n16. _filter\n17. _format\n18. _sample\n19. _vcf\n20. _fasta"}
{"mask": "all", "input": "synapse.<mask>.cli.Cli.anit(", "reference": "lib", "full_reference": "synapse.lib.cli.Cli.anit", "raw_gpt3.5": "1. arg\n2. comple\n3. defa\n4. exi\n5. form\n6. help\n7. init\n8. opt\n9. par\n10. requi\n11. setu\n12. sub\n13. term\n14. usag\n15. verb\n16. vers\n17. wrap\n18. xml\n19. yam\n20. zsh"}
{"mask": "all", "input": "pants.java.junit.junit_xml_parser.<mask>(", "reference": "Test", "full_reference": "pants.java.junit.junit_xml_parser.Test", "raw_gpt3.5": "1. parse_file\n2. parse_string\n3. parse_bytes\n4. parse\n5. parse_xml\n6. parse_document\n7. parse_element\n8. parse_node\n9. parse_input\n10. parse_source\n11. parse_stream\n12. parse_document_from_string\n13. parse_document_from_file\n14. parse_document_from_bytes\n15. parse_document_from_input\n16. parse_document_from_stream\n17. parse_document_from_source\n18. parse_document_from_xml\n19. parse_document_from_element\n20. parse_document_from_node"}
{"mask": "first", "input": "projexui.qt.QtCore.QDateTime.<mask>Time_t(", "reference": "from", "full_reference": "projexui.qt.QtCore.QDateTime.fromTime_t", "raw_gpt3.5": "1. toMSecsSinceEpoch(\n2. fromMSecsSinceEpoch(\n3. currentMSecsSinceEpoch(\n4. toSecsSinceEpoch(\n5. fromSecsSinceEpoch(\n6. currentSecsSinceEpoch(\n7. toOffsetFromUtc(\n8. fromString(\n9. fromTime_t(\n10. toTimeSpec(\n11. toUTC(\n12. toLocalTime(\n13. toPyDateTime(\n14. toPython(\n15. toString(\n16. toTime_t(\n17. toTimeSpec(\n18. toTimezone(\n19. utcOffset(\n20. isValid("}
{"mask": "all", "input": "freelancersdk.<mask>.messages.helpers.make_get_request(", "reference": "resources", "full_reference": "freelancersdk.resources.messages.helpers.make_get_request", "raw_gpt3.5": "1. url\n2. headers\n3. params\n4. data\n5. auth\n6. cookies\n7. proxies\n8. verify\n9. cert\n10. timeout\n11. allow_redirects\n12. stream\n13. json\n14. hooks\n15. params_encoder\n16. session\n17. response\n18. exceptions\n19. utils\n20. models"}
{"mask": "all", "input": "pgmpy.extern.<mask>.moves.reduce(", "reference": "six", "full_reference": "pgmpy.extern.six.moves.reduce", "raw_gpt3.5": "1. factor\n2. markov_model\n3. bayesian_model\n4. markov_chain\n5. markov_process\n6. markov_network\n7. markov_decision_process\n8. markov_random_field\n9. markov_chain_monte_carlo\n10. markov_chain_monte_carlo_kernel\n11. markov_chain_monte_carlo_sampler\n12. markov_chain_monte_carlo_proposal\n13. markov_chain_monte_carlo_transition\n14. markov_chain_monte_carlo_step\n15. markov_chain_monte_carlo_method\n16. markov_chain_monte_carlo_algorithm\n17. markov_chain_monte_carlo_estimation\n18. markov_chain_monte_carlo_simulation\n19. markov_chain_monte_carlo_integration\n20. markov_chain_monte_carlo_sampling"}
{"mask": "first", "input": "rafcon.core.states.<mask>_state.ContainerState.remove_state(", "reference": "container", "full_reference": "rafcon.core.states.container_state.ContainerState.remove_state", "raw_gpt3.5": "1. sub\n2. parent\n3. child\n4. inner\n5. outer\n6. base\n7. root\n8. sibling\n9. adjacent\n10. nested\n11. composite\n12. atomic\n13. container\n14. stateful\n15. stateless\n16. dynamic\n17. static\n18. abstract\n19. concrete\n20. generic"}
{"mask": "first", "input": "fermipy.<mask>_utils.extract_pars_from_dict(", "reference": "model", "full_reference": "fermipy.model_utils.extract_pars_from_dict", "raw_gpt3.5": "1. config\n2. model\n3. likelihood\n4. data\n5. source\n6. spectrum\n7. roi\n8. gtlike\n9. pylike\n10. pyLikelihood\n11. pyLikelihoodUtils\n12. pyLikelihoodModel\n13. pyLikelihoodData\n14. pyLikelihoodConfig\n15. pyLikelihoodROI\n16. pyLikelihoodSpectrum\n17. pyLikelihoodSource\n18. pyLikelihoodLikelihood\n19. pyLikelihoodFit\n20. pyLikelihoodUtilsExtract"}
{"mask": "first", "input": "yacms.generic.models.<mask>edComment.objects.all(", "reference": "Thread", "full_reference": "yacms.generic.models.ThreadedComment.objects.all", "raw_gpt3.5": "1. Thread\n2. Moderat\n3. Flag\n4. Report\n5. Approv\n6. Delet\n7. Unapprov\n8. Repli\n9. Edit\n10. Liked\n11. Unlik\n12. Highlight\n13. Subscrib\n14. Unsubscrib\n15. Resolv\n16. Unresolv\n17. Pin\n18. Unpin\n19. Lock\n20. Unlock"}
{"mask": "first", "input": "OpenSSL.<mask>util.lib.X509_NAME_ENTRY_get_data(", "reference": "_", "full_reference": "OpenSSL._util.lib.X509_NAME_ENTRY_get_data", "raw_gpt3.5": "1. ASN1_\n2. BIO_\n3. BUF_\n4. CRYPTO_\n5. ERR_\n6. EVP_\n7. GENERAL_\n8. i2d_\n9. OBJ_\n10. OCSP_\n11. PEM_\n12. PKCS12_\n13. RAND_\n14. SSL_\n15. X509_\n16. X509V3_\n17. X509_NAME_\n18. X509_STORE_\n19. X509_VERIFY_PARAM_\n20. X509v3_EXT_METHOD_"}
{"mask": "first", "input": "libxml2mod.<mask>TextReaderMoveToAttributeNo(", "reference": "xml", "full_reference": "libxml2mod.xmlTextReaderMoveToAttributeNo", "raw_gpt3.5": "1. Get\n2. Set\n3. Next\n4. Previous\n5. Has\n6. Current\n7. Attribute\n8. Node\n9. Value\n10. Name\n11. LocalName\n12. Prefix\n13. NamespaceURI\n14. Depth\n15. LineNumber\n16. ColumnNumber\n17. BaseURI\n18. IsDefault\n19. NodeType\n20. InnerXml"}
{"mask": "last", "input": "word_embedding_loader.loader.glove.check_<mask>(", "reference": "valid", "full_reference": "word_embedding_loader.loader.glove.check_valid", "raw_gpt3.5": "1. exists\n2. file\n3. path\n4. version\n5. download\n6. sum\n7. md5\n8. integrity\n9. compatibility\n10. consistency\n11. availability\n12. status\n13. sanity\n14. validity\n15. completeness\n16. correctness\n17. readiness\n18. security\n19. functionality\n20. installation"}
{"mask": "first", "input": "porespy.networks.<mask>_phase_interconnections(", "reference": "add", "full_reference": "porespy.networks.add_phase_interconnections", "raw_gpt3.5": "1. find\n2. trim\n3. label\n4. extract\n5. identify\n6. remove\n7. analyze\n8. compute\n9. calculate\n10. generate\n11. measure\n12. characterize\n13. quantify\n14. segment\n15. cluster\n16. detect\n17. partition\n18. optimize\n19. simulate\n20. visualize"}
{"mask": "first", "input": "<mask>al.documents.Service.init(", "reference": "jack", "full_reference": "jackal.documents.Service.init", "raw_gpt3.5": "1. loc\n2. glob\n3. port\n4. initi\n5. sign\n6. initi\n7. initi\n8. initi\n9. initi\n10. initi\n11. initi\n12. initi\n13. initi\n14. initi\n15. initi\n16. initi\n17. initi\n18. initi\n19. initi\n20. initi"}
{"mask": "last", "input": "pyam<mask>.relaxation.relaxation.jacobi(", "reference": "g", "full_reference": "pyamg.relaxation.relaxation.jacobi", "raw_gpt3.5": "1. _solver\n2. _iteration\n3. _jacobi\n4. _relaxation\n5. _jacobi_relaxation\n6. _jacobi_solver\n7. _jacobi_iteration\n8. _jacobi_relaxation_solver\n9. _jacobi_relaxation_iteration\n10. _jacobi_relaxation_solver_iteration\n11. _jacobi_relaxation_solver_iteration_method\n12. _jacobi_relaxation_solver_iteration_algorithm\n13. _jacobi_relaxation_solver_iteration_strategy\n14. _jacobi_relaxation_solver_iteration_scheme\n15. _jacobi_relaxation_solver_iteration_procedure\n16. _jacobi_relaxation_solver_iteration_approach\n17. _jacobi_relaxation_solver_iteration_model\n18. _jacobi_relaxation_solver_iteration_framework\n19. _jacobi_relaxation_solver_iteration_engine\n20. _jacobi_relaxation_solver_iteration_library"}
{"mask": "all", "input": "municipios.<mask>.Municipio.objects.filter(", "reference": "models", "full_reference": "municipios.models.Municipio.objects.filter", "raw_gpt3.5": "1. id\n2. nombre\n3. codigo\n4. poblacion\n5. provincia\n6. departamento\n7. region\n8. pais\n9. latitud\n10. longitud\n11. altitud\n12. superficie\n13. densidad\n14. clima\n15. economia\n16. turismo\n17. educacion\n18. salud\n19. transporte\n20. seguridad"}
{"mask": "first", "input": "<mask>bel.struct.filters.node_selection.get_nodes_by_function(", "reference": "py", "full_reference": "pybel.struct.filters.node_selection.get_nodes_by_function", "raw_gpt3.5": "1. bel.utils.filters.node_selection.get_nodes_by_function(\n2. bel.lang.filters.node_selection.get_nodes_by_function(\n3. bel.resources.filters.node_selection.get_nodes_by_function(\n4. bel.parser.filters.node_selection.get_nodes_by_function(\n5. bel.terms.filters.node_selection.get_nodes_by_function(\n6. bel.core.filters.node_selection.get_nodes_by_function(\n7. bel.functions.filters.node_selection.get_nodes_by_function(\n8. bel.api.filters.node_selection.get_nodes_by_function(\n9. bel.dsl.filters.node_selection.get_nodes_by_function(\n10. bel.grammar.filters.node_selection.get_nodes_by_function(\n11. bel.constants.filters.node_selection.get_nodes_by_function(\n12. bel.lang.ast.filters.node_selection.get_nodes_by_function(\n13. bel.lang.syntax.filters.node_selection.get_nodes_by_function(\n14. bel.lang.semantics.filters.node_selection.get_nodes_by_function(\n15. bel.lang.transpiler.filters.node_selection.get_nodes_by_function(\n16. bel.lang.interpreter.filters.node_selection.get_nodes_by_function(\n17. bel.lang.validation.filters.node_selection.get_nodes_by_function(\n18. bel.lang.utils.filters.node_selection.get_nodes_by_function(\n19. bel.lang.parser.filters.node_selection.get_nodes_by_function(\n20. bel.lang.compiler.filters.node_selection.get_nodes_by_function("}
{"mask": "last", "input": "neuron.h.pt3d<mask>(", "reference": "change", "full_reference": "neuron.h.pt3dchange", "raw_gpt3.5": "1. x\n2. y\n3. z\n4. add\n5. sub\n6. mul\n7. div\n8. dot\n9. cross\n10. norm\n11. length\n12. distance\n13. angle\n14. rotate\n15. translate\n16. scale\n17. project\n18. reflect\n19. clamp\n20. round"}
{"mask": "last", "input": "demosys.resources.programs.load_<mask>(", "reference": "pool", "full_reference": "demosys.resources.programs.load_pool", "raw_gpt3.5": "1. shader\n2. program\n3. source\n4. file\n5. data\n6. binary\n7. module\n8. code\n9. metadata\n10. config\n11. info\n12. options\n13. settings\n14. properties\n15. manifest\n16. script\n17. package\n18. asset\n19. content\n20. definition"}
{"mask": "first", "input": "azure.cosmos.routing.collection_routing_map._CollectionRoutingMap.<mask>RoutingMap(", "reference": "Complete", "full_reference": "azure.cosmos.routing.collection_routing_map._CollectionRoutingMap.CompleteRoutingMap", "raw_gpt3.5": "1. get\n2. update\n3. delete\n4. create\n5. _get\n6. _update\n7. _delete\n8. _create\n9. __init__\n10. _getPartitionKeyRangesById\n11. _tryGetOverlappingRanges\n12. _tryGetRangeByEffectivePartitionKey\n13. _tryGetRangeByPartitionKeyRangeId\n14. _tryGetRangeByPartitionKey\n15. _tryGetRangeByEffectivePartitionKeyString\n16. _tryGetRangeByPartitionKeyRangeIdString\n17. _tryGetRangeByPartitionKeyString\n18. _getPartitionKeyRanges\n19. _getOverlappingRanges\n20. _getRangeByPartitionKey"}
{"mask": "last", "input": "pybel_<mask>.analysis.stability.get_mutually_unstable_correlation_triples(", "reference": "tools", "full_reference": "pybel_tools.analysis.stability.get_mutually_unstable_correlation_triples", "raw_gpt3.5": "1. calculate\n2. compute\n3. determine\n4. find\n5. identify\n6. measure\n7. predict\n8. retrieve\n9. search\n10. select\n11. analyze\n12. cluster\n13. compare\n14. evaluate\n15. filter\n16. generate\n17. optimize\n18. rank\n19. sort\n20. validate"}
{"mask": "all", "input": "apitools.gen.<mask>.FetchDiscoveryDoc(", "reference": "util", "full_reference": "apitools.gen.util.FetchDiscoveryDoc", "raw_gpt3.5": "1. api\n2. version\n3. service\n4. endpoint\n5. project\n6. credentials\n7. auth\n8. client\n9. request\n10. response\n11. error\n12. utils\n13. logging\n14. http\n15. mime\n16. json\n17. yaml\n18. proto\n19. message\n20. descriptor"}
{"mask": "all", "input": "grr_response_core.<mask>.communicator.Communicator.DecompressMessageList(", "reference": "lib", "full_reference": "grr_response_core.lib.communicator.Communicator.DecompressMessageList", "raw_gpt3.5": "1. protobuf\n2. message\n3. serialization\n4. data\n5. compression\n6. encoding\n7. transport\n8. network\n9. protocol\n10. buffer\n11. stream\n12. packet\n13. payload\n14. frame\n15. chunk\n16. block\n17. segment\n18. bundle\n19. datagram\n20. entity"}
{"mask": "last", "input": "rafcon.gui.helpers.state_<mask>.paste_into_selected_state(", "reference": "machine", "full_reference": "rafcon.gui.helpers.state_machine.paste_into_selected_state", "raw_gpt3.5": "1. label\n2. name\n3. icon\n4. color\n5. position\n6. size\n7. shape\n8. border\n9. background\n10. font\n11. alignment\n12. tooltip\n13. description\n14. metadata\n15. data\n16. content\n17. template\n18. style\n19. behavior\n20. transition"}
{"mask": "last", "input": "nion.swift.model.HardwareSource.parse_hardware_aliases_config_<mask>(", "reference": "file", "full_reference": "nion.swift.model.HardwareSource.parse_hardware_aliases_config_file", "raw_gpt3.5": "1. file\n2. path\n3. string\n4. data\n5. json\n6. config\n7. text\n8. buffer\n9. stream\n10. input\n11. output\n12. dictionary\n13. xml\n14. yaml\n15. ini\n16. csv\n17. url\n18. bytes\n19. stream_data\n20. source"}
{"mask": "last", "input": "coinop.crypto.passphrase<mask>.PassphraseBox.decrypt(", "reference": "box", "full_reference": "coinop.crypto.passphrasebox.PassphraseBox.decrypt", "raw_gpt3.5": "1. _file\n2. _str\n3. _bytes\n4. _data\n5. _text\n6. _input\n7. _key\n8. _phrase\n9. _code\n10. _secret\n11. _message\n12. _payload\n13. _content\n14. _info\n15. _cipher\n16. _blob\n17. _packet\n18. _buffer\n19. _stream\n20. _payloads"}
{"mask": "first", "input": "toil.provisioners.aws.<mask>Provisioner.AWSProvisioner(", "reference": "aws", "full_reference": "toil.provisioners.aws.awsProvisioner.AWSProvisioner", "raw_gpt3.5": "1. spot: toil.provisioners.aws.spotProvisioner.AWSProvisioner\n2. ondemand: toil.provisioners.aws.ondemandProvisioner.AWSProvisioner\n3. reserved: toil.provisioners.aws.reservedProvisioner.AWSProvisioner\n4. instance: toil.provisioners.aws.instanceProvisioner.AWSProvisioner\n5. ec2: toil.provisioners.aws.ec2Provisioner.AWSProvisioner\n6. autoscaling: toil.provisioners.aws.autoscalingProvisioner.AWSProvisioner\n7. security: toil.provisioners.aws.securityGroupProvisioner.AWSProvisioner\n8. iam: toil.provisioners.aws.iamProvisioner.AWSProvisioner\n9. vpc: toil.provisioners.aws.vpcProvisioner.AWSProvisioner\n10. subnet: toil.provisioners.aws.subnetProvisioner.AWSProvisioner\n11. route53: toil.provisioners.aws.route53Provisioner.AWSProvisioner\n12. elb: toil.provisioners.aws.elbProvisioner.AWSProvisioner\n13. ebs: toil.provisioners.aws.ebsProvisioner.AWSProvisioner\n14. s3: toil.provisioners.aws.s3Provisioner.AWSProvisioner\n15. cloudwatch: toil.provisioners.aws.cloudwatchProvisioner.AWSProvisioner\n16. lambda: toil.provisioners.aws.lambdaProvisioner.AWSProvisioner\n17. rds: toil.provisioners.aws.rdsProvisioner.AWSProvisioner\n18. sns: toil.provisioners.aws.snsProvisioner.AWSProvisioner\n19. sqs: toil.provisioners.aws.sqsProvisioner.AWSProvisioner\n20. kms: toil.provisioners.aws.kmsProvisioner.AWSProvisioner"}
{"mask": "first", "input": "rio_toa.toa_utils.<mask>parse_mtl_txt(", "reference": "_", "full_reference": "rio_toa.toa_utils._parse_mtl_txt", "raw_gpt3.5": "1. band_\n2. get_\n3. set_\n4. read_\n5. parse_\n6. extract_\n7. find_\n8. update_\n9. format_\n10. validate_\n11. replace_\n12. strip_\n13. split_\n14. join_\n15. merge_\n16. create_\n17. calculate_\n18. convert_\n19. match_\n20. normalize_"}
{"mask": "first", "input": "scrapy.utils.python.<mask>_unicode(", "reference": "to", "full_reference": "scrapy.utils.python.to_unicode", "raw_gpt3.5": "1. to\n2. str\n3. bytes\n4. from\n5. is\n6. encode\n7. decode\n8. ensure\n9. surrogate\n10. unicode\n11. replace\n12. normalize\n13. join\n14. strip\n15. format\n16. translate\n17. lower\n18. upper\n19. title\n20. swapcase"}
{"mask": "last", "input": "bcb<mask>.bam.fastq.groom(", "reference": "io", "full_reference": "bcbio.bam.fastq.groom", "raw_gpt3.5": "1. _to\n2. _and_trim\n3. _filter\n4. _clean\n5. _preprocess\n6. _qc\n7. _process\n8. _sanitize\n9. _clip\n10. _prepare\n11. _format\n12. _convert\n13. _parse\n14. _extract\n15. _align\n16. _map\n17. _merge\n18. _split\n19. _subset\n20. _validate"}
{"mask": "all", "input": "onelogin.saml2.<mask>.OneLogin_Saml2_Utils.parse_SAML_to_time(", "reference": "utils", "full_reference": "onelogin.saml2.utils.OneLogin_Saml2_Utils.parse_SAML_to_time", "raw_gpt3.5": "1. settings\n2. auth\n3. response\n4. errors\n5. metadata\n6. constants\n7. compat\n8. exceptions\n9. models\n10. messages\n11. xml_utils\n12. utils\n13. validators\n14. bindings\n15. signature\n16. assertion\n17. protocol\n18. logout\n19. request\n20. idp_metadata"}
{"mask": "last", "input": "globus_cli.parsing.shared_options.common_<mask>(", "reference": "options", "full_reference": "globus_cli.parsing.shared_options.common_options", "raw_gpt3.5": "1. prefix\n2. options\n3. args\n4. parser\n5. utils\n6. validators\n7. types\n8. defaults\n9. actions\n10. constants\n11. exceptions\n12. settings\n13. config\n14. context\n15. decorators\n16. display\n17. formatting\n18. logging\n19. messages\n20. prompts"}
{"mask": "last", "input": "py3status.py<mask>.Py3(", "reference": "3", "full_reference": "py3status.py3.Py3", "raw_gpt3.5": "1. Config\n2. Module\n3. Logger\n4. Command\n5. Helper\n6. Core\n7. Exception\n8. Thread\n9. Extension\n10. Plugin\n11. Item\n12. Widget\n13. Event\n14. Hook\n15. Notify\n16. Cache\n17. Store\n18. Test\n19. Util\n20. Client"}
{"mask": "last", "input": "toolz.cur<mask>.operator.setitem(", "reference": "ried", "full_reference": "toolz.curried.operator.setitem", "raw_gpt3.5": "1. curry\n2. cycle\n3. concat\n4. compose\n5. count\n6. combinations\n7. chunked\n8. concatv\n9. complement\n10. compress\n11. concat_cycle\n12. concatv_cycle\n13. concatv_toolz\n14. concat_toolz\n15. countby\n16. curry2\n17. curry3\n18. curry4\n19. curry5\n20. curry6"}
{"mask": "all", "input": "easymode.i18n.meta.<mask>.get_field_from_model_by_name(", "reference": "utils", "full_reference": "easymode.i18n.meta.utils.get_field_from_model_by_name", "raw_gpt3.5": "1. model\n2. app_label\n3. field_name\n4. field\n5. model_name\n6. model_meta\n7. model_options\n8. model_fields\n9. model_attrs\n10. model_base\n11. model_module\n12. model_registry\n13. model_manager\n14. model_verbose_name\n15. model_verbose_name_plural\n16. model_db_table\n17. model_pk\n18. model_get_field\n19. model_get_fields\n20. model_get_field_by_name"}
{"mask": "first", "input": "<mask>con.utils.filesystem.get_default_config_path(", "reference": "raf", "full_reference": "rafcon.utils.filesystem.get_default_config_path", "raw_gpt3.5": "1. py: 0.139\n2. pycon: 0.089\n3. conda: 0.064\n4. conftest: 0.052\n5. pytest: 0.051\n6. conda_env: 0.045\n7. conda_build: 0.042\n8. conda_env_path: 0.038\n9. conda_prefix: 0.037\n10. conda_package_handling: 0.036\n11. conda_envs_path: 0.035\n12. conda_build_config: 0.034\n13. conda_package_handling.api: 0.033\n14. conda_package_handling.utils: 0.032\n15. conda_package_handling.tarball: 0.032\n16. conda_package_handling.conda_meta: 0.031\n17. conda_package_handling.extract: 0.031\n18. conda_package_handling.index: 0.031\n19. conda_package_handling.version: 0.031\n20. conda_package_handling.source: 0.031"}
{"mask": "last", "input": "pyge<mask>.raster.RasterUtilClass.raster_statistics(", "reference": "oc", "full_reference": "pygeoc.raster.RasterUtilClass.raster_statistics", "raw_gpt3.5": "1. tif\n2. o\n3. s\n4. n\n5. m\n6. p\n7. y\n8. b\n9. l\n10. f\n11. i\n12. e\n13. a\n14. u\n15. v\n16. x\n17. c\n18. k\n19. g\n20. h"}
{"mask": "all", "input": "blargg.models.<mask>.objects.filter(", "reference": "Entry", "full_reference": "blargg.models.Entry.objects.filter", "raw_gpt3.5": "1. id\n2. name\n3. date\n4. time\n5. status\n6. value\n7. result\n8. error\n9. count\n10. size\n11. user\n12. group\n13. permission\n14. field\n15. attribute\n16. method\n17. queryset\n18. manager\n19. serializer\n20. annotation"}
{"mask": "last", "input": "delphi.translators.for2py.get_comments.get_<mask>(", "reference": "comments", "full_reference": "delphi.translators.for2py.get_comments.get_comments", "raw_gpt3.5": "1. lines\n2. comment\n3. text\n4. content\n5. info\n6. data\n7. description\n8. notes\n9. summary\n10. details\n11. messages\n12. feedback\n13. remarks\n14. annotations\n15. feedbacks\n16. explanations\n17. reviews\n18. opinions\n19. thoughts\n20. insights"}
{"mask": "first", "input": "pyLikelihood.<mask>sMapBase.copyAndUpdateDssKeywords(", "reference": "Count", "full_reference": "pyLikelihood.CountsMapBase.copyAndUpdateDssKeywords", "raw_gpt3.5": "1. binned\n2. binnedExposure\n3. binnedExpMap\n4. binnedMap\n5. binnedMapCube\n6. binnedMapMaker\n7. binnedMapROI\n8. binnedObsMap\n9. binnedPhaseCube\n10. binnedPsf\n11. binnedPsfCube\n12. binnedPsfIntegrand\n13. binnedPsfIntegrandBase\n14. binnedPsfIntegrandCache\n15. binnedPsfIntegrandConvolution\n16. binnedPsfIntegrandConvolutionCache\n17. binnedPsfIntegrandConvolutionCacheKey\n18. binnedPsfIntegrandConvolutionCacheValue\n19. binnedPsfIntegrandConvolutionMap\n20. binnedPsfIntegrandConvolutionMapCache"}
{"mask": "last", "input": "yotta.lib.access_common.Un<mask>(", "reference": "available", "full_reference": "yotta.lib.access_common.Unavailable", "raw_gpt3.5": "1. Unauthenticated\n2. Unauthorized\n3. Unavailable\n4. Unexpected\n5. Unhandled\n6. Uninitialized\n7. Uninstall\n8. Unlocked\n9. Unmanaged\n10. Unmarshal\n11. Unmount\n12. Unnamed\n13. Unpack\n14. Unpin\n15. Unpublish\n16. Unreachable\n17. Unregister\n18. Unresolved\n19. Unset\n20. Unwrap"}
{"mask": "last", "input": "indra.databases.chebi_client.get_chebi_id_from_<mask>(", "reference": "cas", "full_reference": "indra.databases.chebi_client.get_chebi_id_from_cas", "raw_gpt3.5": "1. name\n2. synonym\n3. inchi\n4. inchikey\n5. formula\n6. smiles\n7. mol\n8. molfile\n9. sdf\n10. iupac_name\n11. charge\n12. mass\n13. monoisotopic_mass\n14. secondary_accession\n15. status\n16. parent_id\n17. parent_name\n18. parent_inchi\n19. parent_inchikey\n20. parent_smiles"}
{"mask": "all", "input": "IPython.<mask>.error.TryNext(", "reference": "core", "full_reference": "IPython.core.error.TryNext", "raw_gpt3.5": "1. _should_raise\n2. _should_continue\n3. _should_abort\n4. _should_reraise\n5. _should_terminate\n6. _should_skip\n7. _should_stop\n8. _should_retry\n9. _should_ignore\n10. _should_fail\n11. _should_return\n12. _should_warn\n13. _should_handle\n14. _should_proceed\n15. _should_exit\n16. _should_pause\n17. _should_recover\n18. _should_throw\n19. _should_revert\n20. _should_reject"}
{"mask": "first", "input": "PyObjCTools.AppHelper.<mask>EventLoop(", "reference": "run", "full_reference": "PyObjCTools.AppHelper.runEventLoop", "raw_gpt3.5": "1. run\n2. stop\n3. is_running\n4. current\n5. set_idle_timer\n6. add_timer\n7. remove_timer\n8. add_periodic_timer\n9. remove_periodic_timer\n10. add_fd\n11. remove_fd\n12. add_signal\n13. remove_signal\n14. add_signal_handler\n15. remove_signal_handler\n16. add_exception_handler\n17. remove_exception_handler\n18. add_idle_callback\n19. remove_idle_callback\n20. add_exit_callback"}
{"mask": "last", "input": "b<mask>.core.lib.SetMouseScrollEventHandler(", "reference": "acon", "full_reference": "bacon.core.lib.SetMouseScrollEventHandler", "raw_gpt3.5": "1. wx\n2. pyglet\n3. pyautogui\n4. pywinauto\n5. pydirectinput\n6. pyglet.window\n7. pyglet.gl\n8. pyglet.media\n9. pyglet.sprite\n10. pyglet.text\n11. pyglet.input\n12. pyglet.resource\n13. pyglet.clock\n14. pyglet.image\n15. pyglet.graphics\n16. pyglet.event\n17. pyglet.font\n18. pyglet.window.key\n19. pyglet.window.mouse\n20. pyglet.window.event"}
{"mask": "last", "input": "mxnet.sym.batch_<mask>(", "reference": "dot", "full_reference": "mxnet.sym.batch_dot", "raw_gpt3.5": "1. norm\n2. norm2d\n3. norm_2d\n4. norm_1d\n5. norm1d\n6. norm_3d\n7. norm3d\n8. norm_4d\n9. norm4d\n10. norm_l2\n11. norm_l1\n12. norm_linf\n13. norm_inf\n14. norm_max\n15. norm_min\n16. norm_mean\n17. norm_std\n18. norm_var\n19. norm_sum\n20. norm_sqr"}
{"mask": "last", "input": "pymavlink.rotmat.Matrix<mask>(", "reference": "3", "full_reference": "pymavlink.rotmat.Matrix3", "raw_gpt3.5": "1. roll\n2. pitch\n3. yaw\n4. to_euler\n5. to_quaternion\n6. to_axis_angle\n7. to_rotation_vector\n8. to_dcm\n9. to_euler123\n10. to_euler321\n11. to_euler312\n12. to_euler231\n13. to_euler132\n14. to_euler213\n15. to_quaternion123\n16. to_quaternion321\n17. to_quaternion312\n18. to_quaternion231\n19. to_quaternion132\n20. to_quaternion213"}
{"mask": "all", "input": "salt.<mask>.zeromq.zmq.device(", "reference": "utils", "full_reference": "salt.utils.zeromq.zmq.device", "raw_gpt3.5": "1. forward\n2. backward\n3. capture\n4. queue\n5. stream\n6. process\n7. proxy\n8. replicate\n9. route\n10. select\n11. shuffle\n12. sink\n13. source\n14. spawn\n15. split\n16. stop\n17. terminate\n18. thread\n19. transfer\n20. wait"}
{"mask": "all", "input": "windpowerlib.<mask>.ideal_gas(", "reference": "density", "full_reference": "windpowerlib.density.ideal_gas", "raw_gpt3.5": "1. temperature\n2. pressure\n3. specific_heat\n4. gas_constant\n5. density\n6. enthalpy\n7. entropy\n8. internal_energy\n9. adiabatic_exponent\n10. viscosity\n11. thermal_conductivity\n12. molecular_weight\n13. compressibility_factor\n14. isentropic_exponent\n15. specific_heat_ratio\n16. specific_volume\n17. sound_speed\n18. critical_pressure\n19. critical_temperature\n20. critical_density"}
{"mask": "last", "input": "pymat<mask>.core.tensors.get_uvec(", "reference": "gen", "full_reference": "pymatgen.core.tensors.get_uvec", "raw_gpt3.5": "1. tor\n2. rix\n3. las\n4. hape\n5. ch\n6. ial\n7. r\n8. i\n9. y\n10. s\n11. t\n12. e\n13. n\n14. d\n15. u\n16. l\n17. o\n18. m\n19. p\n20. x"}
{"mask": "all", "input": "spyder.plugins.<mask>.utils.editor.TextBlockHelper.get_fold_lvl(", "reference": "editor", "full_reference": "spyder.plugins.editor.utils.editor.TextBlockHelper.get_fold_lvl", "raw_gpt3.5": "1. get_line_indent\n2. get_line_end\n3. get_line_start\n4. get_line_text\n5. get_line_number\n6. get_line_length\n7. get_line_at_cursor\n8. get_line_count\n9. get_line_indentation\n10. get_line_info\n11. get_line_from_position\n12. get_line_from_number\n13. get_line_from_index\n14. get_line_contents\n15. get_line_bounds\n16. get_line_breaks\n17. get_line_at_offset\n18. get_line_offset\n19. get_line_prefix\n20. get_line_range"}
{"mask": "all", "input": "dipper.models.<mask>.Family(", "reference": "Family", "full_reference": "dipper.models.Family.Family", "raw_gpt3.5": "1. name\n2. members\n3. parents\n4. children\n5. siblings\n6. ancestors\n7. descendants\n8. is_married\n9. is_divorced\n10. is_single\n11. is_parent\n12. is_child\n13. is_sibling\n14. is_ancestor\n15. is_descendant\n16. get_name\n17. get_members\n18. get_parents\n19. get_children\n20. get_siblings"}
{"mask": "all", "input": "twisted.<mask>.reflect.safe_str(", "reference": "python", "full_reference": "twisted.python.reflect.safe_str", "raw_gpt3.5": "1. module\n2. internet\n3. python\n4. application\n5. conch\n6. logger\n7. mail\n8. names\n9. pair\n10. plugin\n11. position\n12. process\n13. python3\n14. runner\n15. scripts\n16. spread\n17. test\n18. trial\n19. web\n20. words"}
{"mask": "all", "input": "<mask>.delete_zone(", "reference": "processing", "full_reference": "processing.delete_zone", "raw_gpt3.5": "1. boto3.route53.client\n2. boto3.client('route53')\n3. route53.connection.Route53Connection\n4. route53.Route53Connection\n5. route53.client.Route53\n6. route53.client.Route53Client\n7. route53.Route53\n8. route53.connection.Route53\n9. route53.client.Route53Connection\n10. route53.connection.Route53Client\n11. route53.connection.Route53Service\n12. route53.connection.Route53\n13. route53.client.Route53Service\n14. route53.client.Route53ConnectionService\n15. route53.client.Route53ServiceConnection\n16. route53.client.Route53Connection\n17. route53.client.Route53ConnectionService\n18. route53.client.Route53Service\n19. route53.connection.Route53ServiceConnection\n20. route53.connection.Route53ClientService"}
{"mask": "first", "input": "distroinfo.parse.<mask>_info(", "reference": "parse", "full_reference": "distroinfo.parse.parse_info", "raw_gpt3.5": "1. release\n2. package\n3. source\n4. build\n5. repo\n6. distro\n7. arch\n8. installed\n9. available\n10. update\n11. metadata\n12. rpm\n13. deb\n14. file\n15. checksum\n16. dependency\n17. group\n18. changelog\n19. signature\n20. url"}
{"mask": "last", "input": "cleverhans.confidence_<mask>.print_stats(", "reference": "report", "full_reference": "cleverhans.confidence_report.print_stats", "raw_gpt3.5": "1. threshold\n2. logits\n3. preds\n4. scores\n5. interval\n6. samples\n7. labels\n8. correct\n9. incorrect\n10. accuracy\n11. confidence\n12. mean\n13. std\n14. median\n15. min\n16. max\n17. sum\n18. count\n19. mode\n20. percentile"}
{"mask": "all", "input": "pymyq.<mask>(", "reference": "login", "full_reference": "pymyq.login", "raw_gpt3.5": "1. get_devices()\n2. get_account()\n3. get_open_circuit()\n4. get_token()\n5. get_hardware_info()\n6. get_device_info()\n7. get_device_status()\n8. get_device_state()\n9. get_device_type()\n10. get_device_id()\n11. get_device_name()\n12. get_device_model()\n13. get_device_firmware_version()\n14. get_device_serial_number()\n15. get_device_mac_address()\n16. get_device_ip_address()\n17. get_device_wifi_strength()\n18. get_device_battery_level()\n19. get_device_last_update()\n20. get_device_online_status()"}
{"mask": "first", "input": "bcbio.rnaseq.gtf.<mask>_gtf_db(", "reference": "get", "full_reference": "bcbio.rnaseq.gtf.get_gtf_db", "raw_gpt3.5": "1. create\n2. load\n3. connect\n4. open\n5. get\n6. parse\n7. query\n8. fetch\n9. build\n10. index\n11. update\n12. merge\n13. annotate\n14. extract\n15. import\n16. export\n17. validate\n18. filter\n19. map\n20. normalize"}
{"mask": "last", "input": "copulas.multivariate.VineCopula.Copula<mask>(", "reference": "Model", "full_reference": "copulas.multivariate.VineCopula.CopulaModel", "raw_gpt3.5": "1. Distribution\n2. Type\n3. Family\n4. Generator\n5. Parameter\n6. Density\n7. Likelihood\n8. Estimator\n9. Sampler\n10. Fit\n11. Matrix\n12. Structure\n13. Pairwise\n14. Rotation\n15. Selection\n16. Construction\n17. Marginal\n18. Simulation\n19. Inference\n20. Transformation"}
{"mask": "all", "input": "federation.utils.<mask>.parse_http_date(", "reference": "network", "full_reference": "federation.utils.network.parse_http_date", "raw_gpt3.5": "1. year\n2. month\n3. day\n4. hour\n5. minute\n6. second\n7. timezone\n8. format\n9. date\n10. datetime\n11. time\n12. timestamp\n13. duration\n14. timedelta\n15. timezoneinfo\n16. tzinfo\n17. isoformat\n18. strftime\n19. strptime\n20. fromisoformat"}
{"mask": "first", "input": "grove.tomography.<mask>_utils.to_realimag(", "reference": "operator", "full_reference": "grove.tomography.operator_utils.to_realimag", "raw_gpt3.5": "1. state\n2. measurement\n3. operator\n4. circuit\n5. gate\n6. qubit\n7. density\n8. process\n9. channel\n10. matrix\n11. vector\n12. observable\n13. expectation\n14. projective\n15. eigen\n16. decomposition\n17. correlation\n18. fidelity\n19. entropy\n20. coherence"}
{"mask": "last", "input": "cardinal_python<mask>.nhs.is_valid_nhs_number(", "reference": "lib", "full_reference": "cardinal_pythonlib.nhs.is_valid_nhs_number", "raw_gpt3.5": "1. _util\n2. _validator\n3. _check\n4. _helper\n5. _utils\n6. _nhs\n7. _number\n8. _numbers\n9. _check_nhs\n10. _validate\n11. _nhs_number\n12. _is_valid\n13. _nhs_numbers\n14. _check_nhs_number\n15. _nhs_number_validator\n16. _nhs_number_utils\n17. _nhs_number_check\n18. _nhs_number_validation\n19. _nhs_number_helper\n20. _nhs_number_check_utils"}
{"mask": "last", "input": "sum<mask>.plotting.rgbline(", "reference": "o", "full_reference": "sumo.plotting.rgbline", "raw_gpt3.5": "1.  numpy\n2.  pandas\n3.  matplotlib\n4.  seaborn\n5.  scipy\n6.  bokeh\n7.  plotly\n8.  holoviews\n9.  altair\n10. geopandas\n11. scikit-image\n12. scikit-learn\n13. statsmodels\n14. pyqtgraph\n15. vispy\n16. mayavi\n17. bqplot\n18. datashader\n19. dask\n20. xarray"}
{"mask": "first", "input": "eppy.<mask>PlusInterfaceFunctions.iddindex.makename2refdct(", "reference": "E", "full_reference": "eppy.EPlusInterfaceFunctions.iddindex.makename2refdct", "raw_gpt3.5": "1. IDD\n2. IDDGroup\n3. IDDStructure\n4. IDDField\n5. IDDObject\n6. IDDGroupField\n7. IDDStructureField\n8. IDDObjectField\n9. IDDGroupStructure\n10. IDDStructureObject\n11. IDDObjectList\n12. IDDGroupList\n13. IDDStructureList\n14. IDDObjectFieldList\n15. IDDGroupFieldList\n16. IDDStructureFieldList\n17. IDDGroupStructureList\n18. IDDStructureObjectList\n19. IDDObjectFieldListDict\n20. IDDGroupFieldListDict"}
{"mask": "all", "input": "pylint.__version__.<mask>(", "reference": "split", "full_reference": "pylint.__version__.split", "raw_gpt3.5": "1. astng\n2. check\n3. config\n4. constants\n5. exceptions\n6. interfaces\n7. lint\n8. load-plugins\n9. messages\n10. options\n11. panic\n12. parse\n13. reporter\n14. run\n15. test\n16. utils\n17. version_info\n18. walker\n19. __doc__\n20. __file__"}
{"mask": "last", "input": "kamene.layers.l2.RandString<mask>(", "reference": "Term", "full_reference": "kamene.layers.l2.RandStringTerm", "raw_gpt3.5": "1. _Generator\n2. _gen\n3. _gen_str\n4. _gen_str_bytes\n5. _gen_str_unicode\n6. _gen_str_ascii\n7. _gen_str_latin1\n8. _gen_str_printable\n9. _gen_str_letters\n10. _gen_str_lowercase\n11. _gen_str_uppercase\n12. _gen_str_digits\n13. _gen_str_hexdigits\n14. _gen_str_octdigits\n15. _gen_str_punctuation\n16. _gen_str_whitespace\n17. _gen_str_random\n18. _gen_str_choice\n19. _gen_str_sample\n20. _gen_str_shuffle"}
{"mask": "all", "input": "c7n.<mask>.PythonPackageArchive(", "reference": "mu", "full_reference": "c7n.mu.PythonPackageArchive", "raw_gpt3.5": "1. s3\n2. utils\n3. tools\n4. policy\n5. resources\n6. schema\n7. tags\n8. version\n9. logs\n10. core\n11. entrypoint\n12. exceptions\n13. filters\n14. handlers\n15. metrics\n16. plugins\n17. reporter\n18. selectors\n19. storage\n20. utils\\_shorthand"}
{"mask": "all", "input": "<mask>.open(", "reference": "Image", "full_reference": "Image.open", "raw_gpt3.5": "1. os.open(\n2. io.open(\n3. gzip.open(\n4. zipfile.open(\n5. tarfile.open(\n6. pathlib.Path.open(\n7. codecs.open(\n8. subprocess.Popen(\n9. sqlite3.connect(\n10. urllib.request.urlopen(\n11. json.load(\n12. csv.reader(\n13. xml.etree.ElementTree.parse(\n14. pandas.read_csv(\n15. matplotlib.pyplot.plot(\n16. sklearn.datasets.load_iris().open(\n17. scipy.io.loadmat(\n18. PIL.Image.open(\n19. tensorflow.io.gfile.GFile.open(\n20. nltk.corpus.reader.plaintext.PlaintextCorpusReader.open("}
{"mask": "first", "input": "<mask>omi.vault.is_mounted(", "reference": "a", "full_reference": "aomi.vault.is_mounted", "raw_gpt3.5": "1. hvac\n2. hvac.api\n3. hvac.api.vault_api\n4. hvac.api.secrets_engines\n5. hvac.api.secrets_engines.v1\n6. hvac.api.secrets_engines.v1.kv\n7. hvac.api.secrets_engines.v1.kv.KVSecretsEngine\n8. hvac.api.secrets_engines.v1.kv.KVSecretsEngine.is_mounted\n9. hvac.api.secrets_engines.v2\n10. hvac.api.secrets_engines.v2.kv\n11. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2\n12. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted\n13. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted()\n14. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted\n15. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted()\n16. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted\n17. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted()\n18. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted\n19. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted()\n20. hvac.api.secrets_engines.v2.kv.KVSecretsEngineV2.is_mounted()"}
{"mask": "last", "input": "cached_property.timed_cached_<mask>(", "reference": "property", "full_reference": "cached_property.timed_cached_property", "raw_gpt3.5": "1. function\n2. property\n3. result\n4. value\n5. method\n6. decorator\n7. cache\n8. duration\n9. time\n10. expiration\n11. timeout\n12. interval\n13. refresh\n14. memoize\n15. cached\n16. timed\n17. memoized\n18. cached_result\n19. cached_value\n20. cached_method"}
{"mask": "first", "input": "trash.dolo.symbolic.model.<mask>Model(", "reference": "S", "full_reference": "trash.dolo.symbolic.model.SModel", "raw_gpt3.5": "1. Linear\n2. Neural\n3. DecisionTree\n4. RandomForest\n5. GradientBoosting\n6. Logistic\n7. Ridge\n8. Lasso\n9. ElasticNet\n10. Poisson\n11. Gamma\n12. Huber\n13. Quantile\n14. Tweedie\n15. BayesianRidge\n16. ARDRegression\n17. LDA\n18. QDA\n19. GaussianProcess\n20. MLP"}
{"mask": "all", "input": "<mask>._compat.get_text_stderr(", "reference": "click", "full_reference": "click._compat.get_text_stderr", "raw_gpt3.5": "1. sys\n2. logging\n3. io\n4. subprocess\n5. traceback\n6. warnings\n7. unittest\n8. typing\n9. asyncio\n10. argparse\n11. tempfile\n12. contextlib\n13. signal\n14. select\n15. socket\n16. urllib\n17. http\n18. json\n19. xml\n20. distutils"}
{"mask": "all", "input": "cobra.<mask>.solver.linear_reaction_coefficients(", "reference": "util", "full_reference": "cobra.util.solver.linear_reaction_coefficients", "raw_gpt3.5": "1. variables\n2. model\n3. constraints\n4. objective\n5. reaction\n6. fluxes\n7. coefficients\n8. reactions\n9. stoichiometry\n10. metabolites\n11. solution\n12. bounds\n13. reactions_and_bounds\n14. reaction_coefficients\n15. reaction_fluxes\n16. reaction_variables\n17. reaction_constraints\n18. reaction_stoichiometry\n19. reaction_objective\n20. reaction_network"}
{"mask": "last", "input": "cvxopt.lapack.lar<mask>(", "reference": "fx", "full_reference": "cvxopt.lapack.larfx", "raw_gpt3.5": "1. lars\n2. lare\n3. larp\n4. lart\n5. lary\n6. lara\n7. lard\n8. lark\n9. larn\n10. laro\n11. laru\n12. lary\n13. larc\n14. lari\n15. larm\n16. laro\n17. lary\n18. lara\n19. larr\n20. lare"}
{"mask": "last", "input": "math.is<mask>(", "reference": "close", "full_reference": "math.isclose", "raw_gpt3.5": "1. isfinite\n2. isclose\n3. isinf\n4. isqrt\n5. isfinite\n6. isclose\n7. isinf\n8. isqrt\n9. isfinite\n10. isclose\n11. isinf\n12. isqrt\n13. isfinite\n14. isclose\n15. isinf\n16. isqrt\n17. isfinite\n18. isclose\n19. isinf\n20. isqrt"}
{"mask": "first", "input": "aikif.dataTools.cls_datatable.<mask>AsString(", "reference": "Today", "full_reference": "aikif.dataTools.cls_datatable.TodayAsString", "raw_gpt3.5": "1. column\n2. row\n3. value\n4. delimiter\n5. header\n6. index\n7. data\n8. selected\n9. filtered\n10. sorted\n11. grouped\n12. joined\n13. transformed\n14. aggregated\n15. distinct\n16. unique\n17. filteredRows\n18. filteredColumns\n19. selectedRows\n20. selectedColumns"}
{"mask": "last", "input": "vtk.vtkGeometry<mask>(", "reference": "Filter", "full_reference": "vtk.vtkGeometryFilter", "raw_gpt3.5": "1. Filter\n2. Mapper\n3. Source\n4. Data\n5. Object\n6. Type\n7. Point\n8. Cell\n9. PolyData\n10. DataSet\n11. Algorithm\n12. Extractor\n13. Interpolator\n14. Locator\n15. Threshold\n16. Clip\n17. Transform\n18. Surface\n19. Volume\n20. Contour"}
{"mask": "first", "input": "<mask>omes._decompressPackage(", "reference": "Gen", "full_reference": "Genomes._decompressPackage", "raw_gpt3.5": "1. zlib\n2. gzip\n3. bz2\n4. lzma\n5. tarfile\n6. zipfile\n7. io\n8. os\n9. shutil\n10. pathlib\n11. tempfile\n12. subprocess\n13. multiprocessing\n14. threading\n15. queue\n16. asyncio\n17. socket\n18. ssl\n19. http\n20. urllib"}
{"mask": "first", "input": "indra.sources.sparser.api.<mask>_text(", "reference": "process", "full_reference": "indra.sources.sparser.api.process_text", "raw_gpt3.5": "1. get\n2. extract\n3. parse\n4. clean\n5. filter\n6. normalize\n7. tokenize\n8. segment\n9. annotate\n10. preprocess\n11. analyze\n12. transform\n13. enrich\n14. label\n15. classify\n16. cluster\n17. summarize\n18. generate\n19. augment\n20. reduce"}
{"mask": "first", "input": "rafcon.gui.singleton.<mask>_config.save_configuration(", "reference": "global", "full_reference": "rafcon.gui.singleton.global_config.save_configuration", "raw_gpt3.5": "1. gui\n2. singleton\n3. config\n4. project\n5. node\n6. behavior\n7. state\n8. transition\n9. connection\n10. plugin\n11. parameter\n12. action\n13. event\n14. logger\n15. utils\n16. editor\n17. widget\n18. dialog\n19. menu\n20. toolbar"}
{"mask": "first", "input": "<mask>flow.models.task_context.TaskContext(", "reference": "light", "full_reference": "lightflow.models.task_context.TaskContext", "raw_gpt3.5": "1. work\n2. air\n3. data\n4. task\n5. job\n6. control\n7. event\n8. state\n9. execution\n10. node\n11. pipeline\n12. process\n13. run\n14. step\n15. sub\n16. taskflow\n17. workflow\n18. context\n19. manager\n20. scheduler"}
{"mask": "last", "input": "nodes<mask>.core.base.utils.ago(", "reference": "hot", "full_reference": "nodeshot.core.base.utils.ago", "raw_gpt3.5": "1. time\n2. datetime\n3. timedelta\n4. date\n5. timezone\n6. tzinfo\n7. clock\n8. duration\n9. period\n10. interval\n11. duration_str\n12. period_str\n13. interval_str\n14. duration_to_seconds\n15. period_to_seconds\n16. interval_to_seconds\n17. duration_from_seconds\n18. period_from_seconds\n19. interval_from_seconds\n20. duration_to_string"}
{"mask": "first", "input": "onecodex.utils.<mask>bar(", "reference": "progress", "full_reference": "onecodex.utils.progressbar", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. delete\n5. create\n6. add\n7. remove\n8. fetch\n9. list\n10. search\n11. execute\n12. validate\n13. generate\n14. parse\n15. serialize\n16. deserialize\n17. encode\n18. decode\n19. encrypt\n20. decrypt"}
{"mask": "all", "input": "pelix.ipopo.<mask>.StoredInstance(", "reference": "instance", "full_reference": "pelix.ipopo.instance.StoredInstance", "raw_gpt3.5": "1. get\n2. set\n3. create\n4. delete\n5. update\n6. add\n7. remove\n8. retrieve\n9. register\n10. unregister\n11. find\n12. list\n13. query\n14. execute\n15. initialize\n16. shutdown\n17. start\n18. stop\n19. subscribe\n20. unsubscribe"}
{"mask": "last", "input": "werkzeug._internal._<mask>(", "reference": "log", "full_reference": "werkzeug._internal._log", "raw_gpt3.5": "1. _wsgi\n2. _log\n3. _to_bytes\n4. _empty_stream\n5. _iter_chunked\n6. _iter_modules\n7. _iter_encoded\n8. _iter_data\n9. _iter_form_data\n10. _iter_body\n11. _iter_slices\n12. _iter_encoded_lines\n13. _iter_unframed_payload\n14. _iter_chunk_size\n15. _iter_chunk_encoded\n16. _iter_chunked_transfer_encoded\n17. _iter_chunked_encoded\n18. _iter_chunked_lines\n19. _iter_chunked_encoded_lines\n20. _iter_chunked_encoded_lines_with_terminal."}
{"mask": "last", "input": "openstack_auth.utils.get_project_<mask>(", "reference": "list", "full_reference": "openstack_auth.utils.get_project_list", "raw_gpt3.5": "1. id\n2. name\n3. domain\n4. tree\n5. parents\n6. children\n7. roles\n8. users\n9. groups\n10. quotas\n11. metadata\n12. tags\n13. description\n14. enabled\n15. is_domain\n16. default\n17. created_at\n18. updated_at\n19. deleted_at\n20. extra_data"}
{"mask": "first", "input": "<mask>aroonbakery.checkers.parse_caveat(", "reference": "mac", "full_reference": "macaroonbakery.checkers.parse_caveat", "raw_gpt3.5": "1. c: List[str]\n2. caveat: str\n3. data: Dict[str, Any]\n4. error: Optional[str]\n5. expected: str\n6. field: str\n7. fields: List[str]\n8. index: int\n9. input_str: str\n10. is_valid: bool\n11. key: str\n12. keys: List[str]\n13. message: str\n14. name: str\n15. node: Dict[str, Any]\n16. nodes: List[Dict[str, Any]]\n17. options: Dict[str, Any]\n18. output_str: str\n19. path: str\n20. result: Any"}
{"mask": "last", "input": "nni.metis_tuner.lib_<mask>.rand(", "reference": "data", "full_reference": "nni.metis_tuner.lib_data.rand", "raw_gpt3.5": "1. uniform\n2. randint\n3. choice\n4. shuffle\n5. triangular\n6. gauss\n7. betavariate\n8. expovariate\n9. gammavariate\n10. lognormvariate\n11. normalvariate\n12. vonmisesvariate\n13. paretovariate\n14. weibullvariate\n15. getstate\n16. setstate\n17. jumpahead\n18. seed\n19. getrandbits\n20. sample"}
{"mask": "first", "input": "<mask>ulusci.core.exceptions.ScratchOrgException(", "reference": "cum", "full_reference": "cumulusci.core.exceptions.ScratchOrgException", "raw_gpt3.5": "1. mod:ulus\n2. module:ulusci\n3. module:ulusci.core\n4. module:ulusci.core.exceptions\n5. ulusci\n6. ulusci.core\n7. ulusci.core.exceptions\n8. ulusci.core.exceptions.S\n9. ulusci.core.exceptions.Sc\n10. ulusci.core.exceptions.Scr\n11. ulusci.core.exceptions.Scra\n12. ulusci.core.exceptions.Scrat\n13. ulusci.core.exceptions.Scratc\n14. ulusci.core.exceptions.Scratch\n15. ulusci.core.exceptions.ScratchO\n16. ulusci.core.exceptions.ScratchOr\n17. ulusci.core.exceptions.ScratchOrg\n18. ulusci.core.exceptions.ScratchOrgE\n19. ulusci.core.exceptions.ScratchOrgEx\n20. ulusci.core.exceptions.ScratchOrgExc"}
{"mask": "all", "input": "django.contrib.<mask>.utils.model_ngettext(", "reference": "admin", "full_reference": "django.contrib.admin.utils.model_ngettext", "raw_gpt3.5": "1. messages\n2. admin\n3. auth\n4. contenttypes\n5. sessions\n6. sites\n7. flatpages\n8. redirects\n9. comments\n10. sitemaps\n11. messages_plus\n12. humanize\n13. syndication\n14. staticfiles\n15. formtools\n16. databrowse\n17. admindocs\n18. gis\n19. messages_context_processors\n20. messages_storage"}
{"mask": "all", "input": "mot.<mask>.kernel_data.CompositeArray(", "reference": "lib", "full_reference": "mot.lib.kernel_data.CompositeArray", "raw_gpt3.5": "1. _get\n2. _set\n3. _update\n4. _append\n5. _delete\n6. _insert\n7. _resize\n8. _transpose\n9. _flatten\n10. _reshape\n11. _squeeze\n12. _expand\n13. _copy\n14. _move\n15. _swap\n16. _fill\n17. _sort\n18. _unique\n19. _reverse\n20. _normalize"}
{"mask": "last", "input": "pyqode.core.api.TextBlock<mask>.get_fold_lvl(", "reference": "Helper", "full_reference": "pyqode.core.api.TextBlockHelper.get_fold_lvl", "raw_gpt3.5": "1. get_fold_lvl_start\n2. get_fold_lvl_end\n3. get_fold_lvl_range\n4. get_fold_lvl_at\n5. get_fold_lvl_for_line\n6. get_fold_lvl_for_block\n7. get_fold_lvl_for_position\n8. get_fold_lvl_for_cursor\n9. get_fold_lvl_for_selection\n10. get_fold_lvl_for_range\n11. get_fold_lvl_for_text\n12. get_fold_lvl_for_document\n13. get_fold_lvl_for_editor\n14. get_fold_lvl_for_widget\n15. get_fold_lvl_for_view\n16. get_fold_lvl_for_window\n17. get_fold_lvl_for_application\n18. get_fold_lvl_for_project\n19. get_fold_lvl_for_workspace\n20. get_fold_lvl_for_environment"}
{"mask": "last", "input": "pymd<mask>.MdStat(", "reference": "stat", "full_reference": "pymdstat.MdStat", "raw_gpt3.5": "1. _file\n2. _st_mode\n3. _st_ino\n4. _st_dev\n5. _st_nlink\n6. _st_uid\n7. _st_gid\n8. _st_size\n9. _st_atime\n10. _st_mtime\n11. _st_ctime\n12. _st_blocks\n13. _st_blksize\n14. _st_rdev\n15. _st_flags\n16. _st_gen\n17. _st_birthtime\n18. _st_ctime_ns\n19. _st_mtime_ns\n20. _st_atime_ns"}
{"mask": "all", "input": "<mask>.SimpleNamespace(", "reference": "types", "full_reference": "types.SimpleNamespace", "raw_gpt3.5": "1. types\n2. collections\n3. argparse\n4. importlib\n5. xmlrpc\n6. configparser\n7. logging\n8. asyncio\n9. unittest\n10. http\n11. json\n12. multiprocessing\n13. os\n14. pathlib\n15. queue\n16. shelve\n17. socket\n18. sqlite3\n19. statistics\n20. tempfile"}
{"mask": "last", "input": "oidc_provider.lib.utils.common.get_iss<mask>(", "reference": "uer", "full_reference": "oidc_provider.lib.utils.common.get_issuer", "raw_gpt3.5": "1. get_issuer\n2. get_issuers\n3. get_issuance\n4. get_issued\n5. get_issuance_date\n6. get_issuer_key\n7. get_issuer_info\n8. get_issuer_url\n9. get_issuer_id\n10. get_issuer_name\n11. get_issuer_cert\n12. get_issuer_subject\n13. get_issuer_dn\n14. get_issuer_chain\n15. get_issuer_metadata\n16. get_issuer_policy\n17. get_issuer_attributes\n18. get_issuer_public_key\n19. get_issuer_private_key\n20. get_issuer_certificate"}
{"mask": "all", "input": "nltk.<mask>.Tree(", "reference": "tree", "full_reference": "nltk.tree.Tree", "raw_gpt3.5": "1. Parent\n2. Child\n3. Leaf\n4. Node\n5. Subtree\n6. Branch\n7. Depth\n8. Label\n9. Height\n10. Span\n11. Position\n12. Sibling\n13. Traverse\n14. Preorder\n15. Postorder\n16. Inorder\n17. Bracket\n18. Production\n19. ProductionList\n20. ProductionRule"}
{"mask": "first", "input": "<mask>apse.common.chunks(", "reference": "syn", "full_reference": "synapse.common.chunks", "raw_gpt3.5": "1. pre:  `m`, post: `ize`\n2. pre:  `chun`, post: `k_size`\n3. pre:  `com`, post: `press`\n4. pre:  `b`, post: `uffer`\n5. pre:  `com`, post: `pare`\n6. pre:  `com`, post: `bine`\n7. pre:  `com`, post: `pute`\n8. pre:  `com`, post: `pile`\n9. pre:  `com`, post: `pose`\n10. pre:  `com`, post: `pute_checksum`\n11. pre:  `com`, post: `pute_hash`\n12. pre:  `com`, post: `pute_digest`\n13. pre:  `com`, post: `pute_size`\n14. pre:  `com`, post: `pute_statistics`\n15. pre:  `com`, post: `pute_threshold`\n16. pre:  `com`, post: `pute_variance`\n17. pre:  `com`, post: `pute_entropy`\n18. pre:  `com`, post: `pute_mean`\n19. pre:  `com`, post: `pute_median`\n20. pre:  `com`, post: `pute_mode`"}
{"mask": "last", "input": "boto.utils.get_utf8_<mask>(", "reference": "value", "full_reference": "boto.utils.get_utf8_value", "raw_gpt3.5": "1. value\n2. bytes\n3. string\n4. data\n5. content\n6. text\n7. encoded\n8. char\n9. stream\n10. input\n11. file\n12. buffer\n13. line\n14. chunk\n15. word\n16. record\n17. block\n18. fragment\n19. sequence\n20. payload"}
{"mask": "all", "input": "riemann.<mask>.le2i(", "reference": "utils", "full_reference": "riemann.utils.le2i", "raw_gpt3.5": "1. metric\n2. geometry\n3. manifold\n4. curvature\n5. tensor\n6. connection\n7. bundle\n8. chart\n9. vector\n10. scalar\n11. operator\n12. form\n13. topology\n14. cohomology\n15. homology\n16. group\n17. algebra\n18. module\n19. sheaf\n20. scheme"}
{"mask": "first", "input": "<mask>wagon.get_onchain_exchange_rates(", "reference": "money", "full_reference": "moneywagon.get_onchain_exchange_rates", "raw_gpt3.5": "1. uniswap\n2. kyber\n3. balancer\n4. curve\n5. bancor\n6. oasis\n7. sushiswap\n8. 0x\n9. mooniswap\n10. dodo\n11. mstable\n12. ren\n13. shell\n14. airswap\n15. loopring\n16. bancorx\n17. paraswap\n18. defiswap\n19. deversifi\n20. idex"}
{"mask": "first", "input": "yellowbrick.utils.<mask>_classifier(", "reference": "is", "full_reference": "yellowbrick.utils.is_classifier", "raw_gpt3.5": "1. predict\n2. fit\n3. train\n4. evaluate\n5. test\n6. score\n7. cross_validate\n8. validate\n9. predict_proba\n10. decision_function\n11. transform\n12. predict_log_proba\n13. partial_fit\n14. get_params\n15. set_params\n16. predict_proba_batch\n17. decision_function_batch\n18. predict_log_proba_batch\n19. predict_batch\n20. fit_transform"}
{"mask": "all", "input": "umbra.components.factory.components_manager_ui.<mask>.Components_QTreeView(", "reference": "views", "full_reference": "umbra.components.factory.components_manager_ui.views.Components_QTreeView", "raw_gpt3.5": "1. setModel\n2. setSelectionModel\n3. setSortingEnabled\n4. setHeaderHidden\n5. setHeaderLabels\n6. setColumnWidth\n7. setColumnHidden\n8. setColumnWidths\n9. setColumnHidden\n10. setColumnWidths\n11. setColumnHidden\n12. setColumnWidths\n13. setColumnHidden\n14. setColumnWidths\n15. setColumnHidden\n16. setColumnWidths\n17. setColumnHidden\n18. setColumnWidths\n19. setColumnHidden\n20. setColumnWidths"}
{"mask": "first", "input": "cqlengine.statements.<mask>Clause(", "reference": "Transaction", "full_reference": "cqlengine.statements.TransactionClause", "raw_gpt3.5": "1. Where\n2. And\n3. Or\n4. GroupBy\n5. Having\n6. Limit\n7. OrderBy\n8. Select\n9. Update\n10. Delete\n11. Distinct\n12. AllowFiltering\n13. Batch\n14. Consistency\n15. DistinctClause\n16. IfExists\n17. IfNotExists\n18. PageSize\n19. Timestamp\n20. TTL"}
{"mask": "all", "input": "streamlink.<mask>.PluginOptions(", "reference": "plugin", "full_reference": "streamlink.plugin.PluginOptions", "raw_gpt3.5": "1. module\n2. plugins\n3. exceptions\n4. session\n5. stream\n6. cli\n7. options\n8. streamer\n9. streams\n10. plugin\n11. streamlink\n12. streamers\n13. streaminfo\n14. streamurl\n15. streamdata\n16. streamtitle\n17. streamquality\n18. streammetadata\n19. streamthumbnail\n20. streamcategory"}
{"mask": "first", "input": "tensor2tensor.layers.<mask>_layers.separable_conv_block(", "reference": "common", "full_reference": "tensor2tensor.layers.common_layers.separable_conv_block", "raw_gpt3.5": "1. depthwise\n2. separable\n3. conv\n4. residual\n5. dense\n6. normalization\n7. activation\n8. pooling\n9. dropout\n10. spatial\n11. group\n12. separable_conv\n13. separable_convolutional\n14. separable_conv2d\n15. separable_convolution\n16. separable_convolution2d\n17. separable_convolutional_block\n18. separable_convolution_block\n19. separable_convolutional_layers\n20. separable_convolution_layers"}
{"mask": "all", "input": "dask.<mask>.arange(", "reference": "array", "full_reference": "dask.array.arange", "raw_gpt3.5": "1. chunks\n2. delayed\n3. dataframe\n4. distributed\n5. array\n6. bag\n7. core\n8. import_\n9. bytes\n10. config\n11. dot\n12. from_array\n13. from_delayed\n14. from_sequence\n15. graph_manipulation\n16. is_dask_collection\n17. istask\n18. optimize\n19. set_options\n20. threaded"}
{"mask": "last", "input": "cauldron.cli.batcher.run_<mask>(", "reference": "project", "full_reference": "cauldron.cli.batcher.run_project", "raw_gpt3.5": "1. batch\n2. script\n3. tests\n4. command\n5. steps\n6. process\n7. tasks\n8. module\n9. workflow\n10. sequence\n11. job\n12. pipeline\n13. function\n14. executor\n15. worker\n16. runner\n17. orchestrator\n18. engine\n19. controller\n20. handler"}
{"mask": "last", "input": "ind<mask>.statements.TimeContext(", "reference": "ra", "full_reference": "indra.statements.TimeContext", "raw_gpt3.5": "1. index\n2. pandas\n3. datetime\n4. numpy\n5. pyfolio\n6. backtrader\n7. matplotlib\n8. talib\n9. pytz\n10. trading\n11. tradingview\n12. quantopian\n13. trading_calendars\n14. tradingviewapi\n15. tradingview_ta\n16. tradingview_taapi\n17. tradingview_ta_api\n18. tradingview_ta_api_client\n19. tradingview_ta_api_client_python\n20. tradingview_ta_api_client_python3"}
{"mask": "first", "input": "filer.models.<mask>emodels.Image.objects.all(", "reference": "imag", "full_reference": "filer.models.imagemodels.Image.objects.all", "raw_gpt3.5": "1. base\n2. imag\n3. imaget\n4. imagema\n5. imageman\n6. imagemanag\n7. imagemanage\n8. imagemanager\n9. imagemanagers\n10. imagemanagers.\n11. imagemanagers.m\n12. imagemanagers.mo\n13. imagemanagers.mod\n14. imagemanagers.mode\n15. imagemanagers.model\n16. imagemanagers.models\n17. imagemanagers.models.\n18. imagemanagers.models.i\n19. imagemanagers.models.im\n20. imagemanagers.models.ima"}
{"mask": "first", "input": "py3status.private.<mask>Base64(", "reference": "Private", "full_reference": "py3status.private.PrivateBase64", "raw_gpt3.5": "1. encode\n2. decode\n3. b64encode\n4. b64decode\n5. urlsafe_b64encode\n6. urlsafe_b64decode\n7. standard_b64encode\n8. standard_b64decode\n9. a85encode\n10. a85decode\n11. b32encode\n12. b32decode\n13. b16encode\n14. b16decode\n15. hexlify\n16. unhexlify\n17. compress\n18. decompress\n19. zlib_codec\n20. hex_codec"}
{"mask": "all", "input": "hpOneView.<mask>.settings.versions.Versions(", "reference": "resources", "full_reference": "hpOneView.resources.settings.versions.Versions", "raw_gpt3.5": "1. appliance\n2. activity\n3. network\n4. power\n5. security\n6. storage\n7. firmware\n8. licensing\n9. backup\n10. certificate\n11. cluster\n12. compliance\n13. dashboard\n14. event\n15. hardware\n16. infrastructure\n17. job\n18. log\n19. report\n20. resource"}
{"mask": "first", "input": "<mask>ennlp.nn.util.flatten_and_batch_shift_indices(", "reference": "all", "full_reference": "allennlp.nn.util.flatten_and_batch_shift_indices", "raw_gpt3.5": "1. tr: \n2. to: \n3. in: \n4. co: \n5. de: \n6. re: \n7. se: \n8. ma: \n9. fi: \n10. ge: \n11. sp: \n12. ad: \n13. be: \n14. en: \n15. un: \n16. ov: \n17. im: \n18. sh: \n19. cl: \n20. di:"}
{"mask": "last", "input": "metas<mask>.moothedata(", "reference": "ay", "full_reference": "metasay.moothedata", "raw_gpt3.5": "1. _s\n2. etadata\n3. tadata\n4. mooth\n5. mooth_data\n6. moothed_data\n7. moothed\n8. moothness\n9. moothed_data_\n10. moothed_data__\n11. moothed_data___\n12. moothed_data____\n13. moothed_data_____\n14. moothed_data______\n15. moothed_data_______\n16. moothed_data________\n17. moothed_data_________\n18. moothed_data__________\n19. moothed_data___________\n20. moothed_data____________"}
{"mask": "first", "input": "scdl.client.<mask>_collection(", "reference": "get", "full_reference": "scdl.client.get_collection", "raw_gpt3.5": "1. get\n2. update\n3. delete\n4. create\n5. list\n6. add\n7. remove\n8. find\n9. count\n10. fetch\n11. insert\n12. replace\n13. drop\n14. ensure\n15. aggregate\n16. distinct\n17. group\n18. map_reduce\n19. rename\n20. save"}
{"mask": "last", "input": "querybuilder.tables.Table<mask>(", "reference": "Factory", "full_reference": "querybuilder.tables.TableFactory", "raw_gpt3.5": "1. Column\n2. ForeignKey\n3. Index\n4. PrimaryKey\n5. Schema\n6. UniqueConstraint\n7. CheckConstraint\n8. ColumnCollection\n9. ColumnSet\n10. ColumnSubset\n11. ColumnType\n12. ColumnTypes\n13. ColumnValues\n14. ColumnValuesSubset\n15. ColumnValuesType\n16. ColumnValuesTypes\n17. ColumnValuesUnion\n18. ColumnValuesUnionType\n19. ColumnValuesUnionTypes\n20. ColumnValueSubsetUnion"}
{"mask": "first", "input": "argv.flags.<mask>_tokens(", "reference": "parse", "full_reference": "argv.flags.parse_tokens", "raw_gpt3.5": "1.  get\n2.  set\n3.  add\n4.  remove\n5.  clear\n6.  update\n7.  has\n8.  is\n9.  to\n10. from\n11. with\n12. all\n13. any\n14. no\n15. some\n16. other\n17. this\n18. that\n19. these\n20. those"}
{"mask": "first", "input": "pip.<mask>vendor.distlib.version.get_scheme(", "reference": "_", "full_reference": "pip._vendor.distlib.version.get_scheme", "raw_gpt3.5": "1. prefix\n2. installed\n3. metadata\n4. resources\n5. index\n6. wheel\n7. cache\n8. download\n9. exceptions\n10. _internal\n11. _vendor\n12. _cli\n13. _utils\n14. _models\n15. _compat\n16. _index\n17. _resolver\n18. _download\n19. _exceptions\n20. _operations"}
{"mask": "all", "input": "celery.<mask>.gen_unique_id(", "reference": "utils", "full_reference": "celery.utils.gen_unique_id", "raw_gpt3.5": "1. hostname\n2. uuid\n3. random\n4. gethostname\n5. getfqdn\n6. getnode\n7. get_mac\n8. get_mac_address\n9. get_ip\n10. get_ip_address\n11. get_local_ip\n12. get_local_ip_address\n13. get_public_ip\n14. get_public_ip_address\n15. get_ip_address_from_string\n16. get_ip_from_string\n17. get_host_ip\n18. get_host_ip_address\n19. get_ip_address_list\n20. get_ip_list"}
{"mask": "last", "input": "her<mask>.tools.common.src.python.utils.config.insert_bool_values(", "reference": "on", "full_reference": "heron.tools.common.src.python.utils.config.insert_bool_values", "raw_gpt3.5": "1. hermes\n2. hercules\n3. hermit\n4. heron\n5. heresy\n6. herbage\n7. hercynite\n8. hercynian\n9. herculean\n10. hercules'\n11. herculex\n12. hercynian forest\n13. hercules beetle\n14. hercules club\n15. hercules knot\n16. hercules powder\n17. hercules' club\n18. hercules' knot\n19. hercules' powder\n20. hercules' beetle"}
{"mask": "first", "input": "Xlib.protocol.rq.<mask>Field(", "reference": "Event", "full_reference": "Xlib.protocol.rq.EventField", "raw_gpt3.5": "1. `Char`\n2. `Byte`\n3. `Card8`\n4. `Card16`\n5. `Card32`\n6. `Int8`\n7. `Int16`\n8. `Int32`\n9. `Float`\n10. `Double`\n11. `Window`\n12. `Pixmap`\n13. `Cursor`\n14. `Font`\n15. `GContext`\n16. `Colormap`\n17. `Atom`\n18. `VisualID`\n19. `Time`\n20. `KeyCode`"}
{"mask": "last", "input": "cardinal_pythonlib.openxml.find_recovered_open<mask>.XLSX_CONTENTS_REGEX.search(", "reference": "xml", "full_reference": "cardinal_pythonlib.openxml.find_recovered_openxml.XLSX_CONTENTS_REGEX.search", "raw_gpt3.5": "1. sheet\n2. cell\n3. workbook\n4. row\n5. file\n6. cell_value\n7. worksheet\n8. cell_range\n9. cell_format\n10. cell_address\n11. cell_data\n12. cell_style\n13. cell_type\n14. cell_border\n15. cell_alignment\n16. cell_fill\n17. cell_font\n18. cell_number_format\n19. cell_protection\n20. cell_comment"}
{"mask": "last", "input": "grr_response_<mask>.lib.util.filesystem.Stat.FromPath(", "reference": "core", "full_reference": "grr_response_core.lib.util.filesystem.Stat.FromPath", "raw_gpt3.5": "1. Windows\n2. Linux\n3. Mac\n4. NTFS\n5. FAT32\n6. FAT16\n7. ext4\n8. ext3\n9. ext2\n10. HFS+\n11. APFS\n12. ReFS\n13. XFS\n14. Btrfs\n15. JFS\n16. ZFS\n17. UFS\n18. NFS\n19. SMB\n20. CIFS"}
{"mask": "first", "input": "ayrton.parser.pyparser.<mask>tokenizer.generate_tokens(", "reference": "py", "full_reference": "ayrton.parser.pyparser.pytokenizer.generate_tokens", "raw_gpt3.5": "1. python\n2. tokenize\n3. tokenize_untokenized\n4. tokenize_string\n5. tokenize_lines\n6. tokenize_open\n7. tokenize_generate_tokens\n8. tokenize_untokenize\n9. tokenize_detect_encoding\n10. tokenize_tokenize\n11. tokenize_tokenize_loop\n12. tokenize_tokenize_generator\n13. tokenize_tokenize_lines\n14. tokenize_tokenize_string\n15. tokenize_tokenize_open\n16. tokenize_tokenize_untokenized\n17. tokenize_tokenize_detect_encoding\n18. tokenize_tokenize_untokenize\n19. tokenize_tokenize_generate_tokens\n20. tokenize_tokenize_tokenize"}
{"mask": "first", "input": "tabledata.<mask>_log_level(", "reference": "set", "full_reference": "tabledata.set_log_level", "raw_gpt3.5": "1. set\n2. get\n3. debug\n4. info\n5. warning\n6. error\n7. critical\n8. disable\n9. basic\n10. exception\n11. NOTSET\n12. format\n13. propagate\n14. stream\n15. filename\n16. mode\n17. encoding\n18. delay\n19. backupCount\n20. maxBytes"}
{"mask": "all", "input": "mxnet.<mask>.Concat(", "reference": "sym", "full_reference": "mxnet.sym.Concat", "raw_gpt3.5": "1. dim\n2. axis\n3. data\n4. inputs\n5. num_args\n6. output\n7. outputs\n8. symbol\n9. op\n10. module\n11. ndarray\n12. initializer\n13. shape\n14. dtype\n15. context\n16. grad_req\n17. name\n18. prefix\n19. suffix\n20. allow_empty_concat"}
{"mask": "all", "input": "scriptworker.<mask>.worst_level(", "reference": "task", "full_reference": "scriptworker.task.worst_level", "raw_gpt3.5": "1. logger\n2. config\n3. worker\n4. task\n5. job\n6. process\n7. queue\n8. status\n9. exception\n10. util\n11. plugin\n12. scheduler\n13. monitor\n14. database\n15. connection\n16. resource\n17. security\n18. performance\n19. threshold\n20. notification"}
{"mask": "last", "input": "OpenSSL._util.lib.sk_X509_<mask>(", "reference": "push", "full_reference": "OpenSSL._util.lib.sk_X509_push", "raw_gpt3.5": "1. num\n2. new\n3. pop\n4. push\n5. find\n6. get\n7. set\n8. dup\n9. delete\n10. shift\n11. unshift\n12. count\n13. clear\n14. insert\n15. remove\n16. sort\n17. reverse\n18. filter\n19. map\n20. reduce"}
{"mask": "last", "input": "pysy<mask>.colours.colour_names.cga(", "reference": "te", "full_reference": "pysyte.colours.colour_names.cga", "raw_gpt3.5": "1. palette\n2. map\n3. table\n4. scheme\n5. chart\n6. matrix\n7. gradient\n8. wheel\n9. spectrum\n10. selector\n11. picker\n12. swatch\n13. model\n14. system\n15. library\n16. database\n17. registry\n18. manager\n19. handler\n20. converter"}
{"mask": "last", "input": "aiorpcx.cur<mask>.sleep(", "reference": "io", "full_reference": "aiorpcx.curio.sleep", "raw_gpt3.5": "1. coro\n2. rent\n3. ent\n4. ve\n5. rve\n6. rent_task\n7. rently\n8. rently_running\n9. rently_running_tasks\n10. rently_running_tasks_view\n11. rently_running_tasks_view_items\n12. rently_running_tasks_view_keys\n13. rently_running_tasks_view_values\n14. rently_running_tasks_view_pop\n15. rently_running_tasks_view_popitem\n16. rently_running_tasks_view_clear\n17. rently_running_tasks_view_update\n18. rently_running_tasks_view_copy\n19. rently_running_tasks_view_get\n20. rently_running_tasks_view_setdefault"}
{"mask": "first", "input": "<mask>ok_choy.promise.Promise(", "reference": "b", "full_reference": "bok_choy.promise.Promise", "raw_gpt3.5": "1. blue\n2. red\n3. green\n4. yellow\n5. pink\n6. black\n7. white\n8. orange\n9. purple\n10. brown\n11. gray\n12. cyan\n13. magenta\n14. lime\n15. olive\n16. maroon\n17. navy\n18. teal\n19. indigo\n20. beige"}
{"mask": "last", "input": "lalsimulation.SimInspiralWaveformParamsInsertModes<mask>(", "reference": "Choice", "full_reference": "lalsimulation.SimInspiralWaveformParamsInsertModesChoice", "raw_gpt3.5": "1. PN\n2. TaylorT1\n3. TaylorT2\n4. TaylorT3\n5. TaylorT4\n6. TaylorT5\n7. TaylorT6\n8. TaylorT7\n9. TaylorT8\n10. TaylorT9\n11. TaylorT11\n12. TaylorT12\n13. TaylorT13\n14. TaylorT14\n15. TaylorT15\n16. TaylorT16\n17. TaylorT17\n18. TaylorT18\n19. TaylorT19\n20. TaylorT20"}
{"mask": "last", "input": "dark.blast.align<mask>.BlastReadsAlignments(", "reference": "ments", "full_reference": "dark.blast.alignments.BlastReadsAlignments", "raw_gpt3.5": "1. _to\n2. _seq\n3. _file\n4. _query\n5. _database\n6. _options\n7. _output\n8. _format\n9. _stats\n10. _hits\n11. _hsp\n12. _score\n13. _evalue\n14. _identity\n15. _coverage\n16. _query_start\n17. _query_end\n18. _hit_start\n19. _hit_end\n20. _strand"}
{"mask": "all", "input": "django.contrib.<mask>.models.Site.objects.all(", "reference": "sites", "full_reference": "django.contrib.sites.models.Site.objects.all", "raw_gpt3.5": "1. admin\n2. auth\n3. contenttypes\n4. messages\n5. redirects\n6. sessions\n7. sitemaps\n8. sites\n9. staticfiles\n10. syndication\n11. comments\n12. flatpages\n13. humanize\n14. messages\n15. redirects\n16. sites\n17. sitemaps\n18. staticfiles\n19. syndication\n20. comments"}
{"mask": "last", "input": "pvlib.solar<mask>.sun_rise_set_transit_geometric(", "reference": "position", "full_reference": "pvlib.solarposition.sun_rise_set_transit_geometric", "raw_gpt3.5": "1. _position\n2. _constants\n3. _declination\n4. _elevation\n5. _azimuth\n6. _time\n7. _altitude\n8. _radiation\n9. _position_ephemeris\n10. _position_spa\n11. _position_nrel\n12. _position_apparent\n13. _positionlib\n14. _positiontools\n15. _positionalgorithms\n16. _positioncalculator\n17. _positioning\n18. _positioningtools\n19. _positioningalgorithms\n20. _positioningcalculator"}
{"mask": "last", "input": "stwcs.wcsutil.altwcs.getKeyFrom<mask>(", "reference": "Name", "full_reference": "stwcs.wcsutil.altwcs.getKeyFromName", "raw_gpt3.5": "1. getkeyfromheader\n2. getkeyfromwcs\n3. getkeyfromfile\n4. getkeyfromname\n5. getkeyfromstring\n6. getkeyfromhdu\n7. getkeyfromfits\n8. getkeyfromimage\n9. getkeyfromtable\n10. getkeyfromheaderstring\n11. getkeyfromheaderfile\n12. getkeyfromheaderwcs\n13. getkeyfromheadername\n14. getkeyfromheaderhdu\n15. getkeyfromheaderfits\n16. getkeyfromheaderimage\n17. getkeyfromheadertable\n18. getkeyfromheaderstringfile\n19. getkeyfromheaderstringwcs\n20. getkeyfromheaderstringname"}
{"mask": "last", "input": "cap<mask>.Promise(", "reference": "np", "full_reference": "capnp.Promise", "raw_gpt3.5": "1. all\n2. race\n3. any\n4. resolve\n5. reject\n6. finally\n7. then\n8. catch\n9. allSettled\n10. try\n11. throw\n12. defer\n13. map\n14. filter\n15. reduce\n16. concat\n17. splice\n18. push\n19. pop\n20. shift"}
{"mask": "all", "input": "sparkle.<mask>.stim.auto_parameter_view.SmartDelegate.updateScales(", "reference": "gui", "full_reference": "sparkle.gui.stim.auto_parameter_view.SmartDelegate.updateScales", "raw_gpt3.5": "1. _get\n2. _set\n3. _delete\n4. _init\n5. _load\n6. _save\n7. _parse\n8. _validate\n9. _execute\n10. _process\n11. _format\n12. _render\n13. _render_template\n14. _render_template_string\n15. _render_block\n16. _render_macro\n17. _render_include\n18. _render_import\n19. _render_extends\n20. _render_from_string"}
{"mask": "first", "input": "morango.models.<mask>MaxCounter.objects.bulk_create(", "reference": "Record", "full_reference": "morango.models.RecordMaxCounter.objects.bulk_create", "raw_gpt3.5": "1. Char: C, Answers: Counter\n2. Char: D, Answers: Data\n3. Char: E, Answers: Event\n4. Char: F, Answers: Field\n5. Char: G, Answers: Group\n6. Char: H, Answers: History\n7. Char: I, Answers: Instance\n8. Char: L, Answers: Log\n9. Char: M, Answers: Metric\n10. Char: N, Answers: Notification\n11. Char: O, Answers: Option\n12. Char: P, Answers: Profile\n13. Char: Q, Answers: Query\n14. Char: R, Answers: Result\n15. Char: S, Answers: Statistic\n16. Char: T, Answers: Tag\n17. Char: U, Answers: User\n18. Char: V, Answers: Value\n19. Char: W, Answers: Workflow\n20. Char: X, Answers: Exception"}
{"mask": "last", "input": "dwave_network<mask>.DWaveNetworkXMissingSampler(", "reference": "x", "full_reference": "dwave_networkx.DWaveNetworkXMissingSampler", "raw_gpt3.5": "1. .clients\n2. .config\n3. .exceptions\n4. .http\n5. .interfaces\n6. .plugins\n7. .request\n8. .responses\n9. .sapi\n10. .security\n11. .solvers\n12. .testing\n13. .utils\n14. .version\n15. .websockets\n16. .DWaveNetworkXSampler\n17. .DWaveSampler\n18. .DWaveCliqueSampler\n19. .DWaveKerberosSampler\n20. .DWaveLeapHybridSampler"}
{"mask": "all", "input": "reda.<mask>.decorators_and_managers.append_doc_of(", "reference": "utils", "full_reference": "reda.utils.decorators_and_managers.append_doc_of", "raw_gpt3.5": "1. `utils`\n2. `core`\n3. `decorators`\n4. `managers`\n5. `exceptions`\n6. `logging`\n7. `tests`\n8. `models`\n9. `views`\n10. `forms`\n11. `serializers`\n12. `permissions`\n13. `authentication`\n14. `parsers`\n15. `renderers`\n16. `schemas`\n17. `filters`\n18. `mixins`\n19. `urls`\n20. `responses`"}
{"mask": "first", "input": "pants.util.<mask>util.is_readable_dir(", "reference": "dir", "full_reference": "pants.util.dirutil.is_readable_dir", "raw_gpt3.5": "1. file\n2. path\n3. string\n4. os\n5. io\n6. dir\n7. text\n8. encoding\n9. system\n10. process\n11. logging\n12. config\n13. network\n14. security\n15. thread\n16. time\n17. version\n18. data\n19. json\n20. yaml"}
{"mask": "first", "input": "google.cloud.talent_v4beta1.proto.<mask>_service_pb2.CreateProfileRequest(", "reference": "profile", "full_reference": "google.cloud.talent_v4beta1.proto.profile_service_pb2.CreateProfileRequest", "raw_gpt3.5": "1. profile\n2. company\n3. tenant\n4. application\n5. job\n6. batch\n7. availability\n8. education\n9. employment\n10. skill\n11. language\n12. certification\n13. assessment\n14. interview\n15. referral\n16. candidate\n17. experience\n18. project\n19. location\n20. qualification"}
{"mask": "last", "input": "pyat<mask>.scan_for_apple_tvs(", "reference": "v", "full_reference": "pyatv.scan_for_apple_tvs", "raw_gpt3.5": "1. _devices\n2. _scan\n3. _timeout\n4. _results\n5. _scan_for_apple_tvs\n6. _scan_for_apple_tvs_\n7. _scan_for_apple_tvs_devices\n8. _scan_for_apple_tvs_timeout\n9. _scan_for_apple_tvs_results\n10. _scan_for_apple_tvs_devices_\n11. _scan_for_apple_tvs_timeout_\n12. _scan_for_apple_tvs_results_\n13. _scan_for_apple_tvs_devices_scan\n14. _scan_for_apple_tvs_timeout_scan\n15. _scan_for_apple_tvs_results_scan\n16. _scan_for_apple_tvs_devices_scan_\n17. _scan_for_apple_tvs_timeout_scan_\n18. _scan_for_apple_tvs_results_scan_\n19. _scan_for_apple_tvs_devices_scan_for\n20. _scan_for_apple_tvs_timeout_scan_for"}
{"mask": "all", "input": "fbmq.<mask>.ButtonPhoneNumber(", "reference": "Template", "full_reference": "fbmq.Template.ButtonPhoneNumber", "raw_gpt3.5": "1. set\n2. get\n3. create\n4. update\n5. delete\n6. add\n7. remove\n8. render\n9. validate\n10. parse\n11. format\n12. build\n13. generate\n14. execute\n15. click\n16. press\n17. release\n18. select\n19. unselect\n20. enable"}
{"mask": "last", "input": "comm<mask>.cosmology_list.DRAGONS(", "reference": "ah", "full_reference": "commah.cosmology_list.DRAGONS", "raw_gpt3.5": "1. .cosmology\n2. .cosmology_list\n3. .cosmology_list.DRAGONS\n4. .cosmology_list.DRAGONS2\n5. .cosmology_list.DRAGONS3\n6. .cosmology_list.DRAGONS4\n7. .cosmology_list.DRAGONS5\n8. .cosmology_list.DRAGONS6\n9. .cosmology_list.DRAGONS7\n10. .cosmology_list.DRAGONS8\n11. .cosmology_list.DRAGONS9\n12. .cosmology_list.DRAGONS10\n13. .cosmology_list.DRAGONS11\n14. .cosmology_list.DRAGONS12\n15. .cosmology_list.DRAGONS13\n16. .cosmology_list.DRAGONS14\n17. .cosmology_list.DRAGONS15\n18. .cosmology_list.DRAGONS16\n19. .cosmology_list.DRAGONS17\n20. .cosmology_list.DRAGONS18"}
{"mask": "all", "input": "macro.bot.<mask>.up(", "reference": "bot", "full_reference": "macro.bot.bot.up", "raw_gpt3.5": "1. host\n2. port\n3. username\n4. password\n5. protocol\n6. timeout\n7. retries\n8. buffer_size\n9. max_connections\n10. ssl\n11. proxy\n12. keep_alive\n13. headers\n14. cookies\n15. auth\n16. verify\n17. cert\n18. json\n19. data\n20. params"}
{"mask": "last", "input": "tango_<mask>.utils.sanetize.clean_text(", "reference": "shared", "full_reference": "tango_shared.utils.sanetize.clean_text", "raw_gpt3.5": "1. string\n2. text\n3. input\n4. content\n5. message\n6. data\n7. value\n8. body\n9. document\n10. document_text\n11. document_content\n12. document_string\n13. document_input\n14. document_value\n15. document_body\n16. document_message\n17. document_data\n18. document_sanitized\n19. document_cleaned\n20. document_filtered"}
{"mask": "all", "input": "requests.<mask>.Request(", "reference": "models", "full_reference": "requests.models.Request", "raw_gpt3.5": "1. method\n2. url\n3. headers\n4. params\n5. data\n6. json\n7. cookies\n8. auth\n9. files\n10. timeout\n11. allow_redirects\n12. proxies\n13. hooks\n14. stream\n15. verify\n16. cert\n17. prefetch\n18. ad\n19. adict\n20. adicted"}
{"mask": "last", "input": "ows<mask>.swe.sensor.sml.SensorML(", "reference": "lib", "full_reference": "owslib.swe.sensor.sml.SensorML", "raw_gpt3.5": "1. core\n2. .base\n3. .util\n4. .exceptions\n5. .model\n6. .parser\n7. .serializer\n8. .xml\n9. .json\n10. .rdf\n11. .sparql\n12. .query\n13. .graph\n14. .ontology\n15. .vocab\n16. .vocabularies\n17. .vocabularies.\n18. .vocabularies.ogc\n19. .vocabularies.ogc.sensorML\n20. .vocabularies.ogc.sensorML.v2.0.0"}
{"mask": "all", "input": "fermipy.<mask>.center_to_edge(", "reference": "utils", "full_reference": "fermipy.utils.center_to_edge", "raw_gpt3.5": "1. skydir\n2. roi\n3. coordsys\n4. spatial_model\n5. energy_edges\n6. energy_axis\n7. energy_axis_index\n8. energy_axis_index_edges\n9. energy_axis_index_centers\n10. energy_axis_index_bounds\n11. energy_axis_index_widths\n12. energy_axis_index_nbin\n13. energy_axis_index_lo\n14. energy_axis_index_hi\n15. energy_axis_index_mid\n16. energy_axis_index_bin_type\n17. energy_axis_index_bin_size\n18. energy_axis_index_bin_edges\n19. energy_axis_index_bin_centers\n20. energy_axis_index_bin_bounds"}
{"mask": "last", "input": "numpy.load<mask>(", "reference": "txt", "full_reference": "numpy.loadtxt", "raw_gpt3.5": "1. numpy.loadtxt\n2. numpy.load\n3. numpy.load_raw\n4. numpy.load_module\n5. numpy.load_library\n6. numpy.load_dynamic\n7. numpy.load_ext\n8. numpy.load_tests\n9. numpy.load_wav\n10. numpy.loadmat\n11. numpy.load_sample_data\n12. numpy.load_from_buffer\n13. numpy.loadtxt_generator\n14. numpy.loadtxt_iter\n15. numpy.loadtxt_chunked\n16. numpy.loadtxt_stream\n17. numpy.loadtxt_async\n18. numpy.loadtxt_threaded\n19. numpy.loadtxt_multiprocess\n20. numpy.loadtxt_distributed"}
{"mask": "last", "input": "bcbio.ngsalign.rtg.to_fastq_apipe_<mask>(", "reference": "cl", "full_reference": "bcbio.ngsalign.rtg.to_fastq_apipe_cl", "raw_gpt3.5": "1. paired\n2. single\n3. interleaved\n4. compressed\n5. unpaired\n6. gzipped\n7. trimmed\n8. filtered\n9. merged\n10. sorted\n11. deduplicated\n12. aligned\n13. unaligned\n14. clipped\n15. mapped\n16. demultiplexed\n17. quality_filtered\n18. subsampled\n19. truncated\n20. normalized"}
{"mask": "all", "input": "blinkpy.<mask>.request_sync_events(", "reference": "api", "full_reference": "blinkpy.api.request_sync_events", "raw_gpt3.5": "1. sync\n2. events\n3. request\n4. get\n5. update\n6. send\n7. fetch\n8. handle\n9. process\n10. receive\n11. subscribe\n12. unregister\n13. register\n14. dispatch\n15. handle_sync\n16. handle_events\n17. handle_request\n18. handle_update\n19. handle_send\n20. handle_fetch"}
{"mask": "first", "input": "<mask>fs._compat.open_filelike(", "reference": "data", "full_reference": "datafs._compat.open_filelike", "raw_gpt3.5": "1. h5py\n2. pandas\n3. numpy\n4. pyarrow\n5. zarr\n6. xarray\n7. dask\n8. netCDF4\n9. tables\n10. fsspec\n11. fastparquet\n12. h5netcdf\n13. intake\n14. intake-esm\n15. intake-xarray\n16. intake-parquet\n17. intake-thredds\n18. intake-geopandas\n19. intake-terra\n20. intake-sql"}
{"mask": "last", "input": "pants.task.scm_publish_mixin.Named<mask>(", "reference": "ver", "full_reference": "pants.task.scm_publish_mixin.Namedver", "raw_gpt3.5": "1. Lockfile\n2. Cache\n3. Version\n4. Artifact\n5. Target\n6. Repository\n7. Digest\n8. File\n9. Path\n10. Scope\n11. Resolver\n12. Address\n13. Pattern\n14. RelPath\n15. Fingerprint\n16. Directory\n17. Glob\n18. Sources\n19. Spec\n20. Deps"}
{"mask": "first", "input": "pyemu.<mask>co.from_dataframe(", "reference": "J", "full_reference": "pyemu.Jco.from_dataframe", "raw_gpt3.5": "1. linear\n2. ptolemy\n3. geostat\n4. pestpp\n5. ensemble\n6. da\n7. pst\n8. schur\n9. cov\n10. matrix\n11. utils\n12. os_utils\n13. pst_utils\n14. pst_matrix\n15. pst_io\n16. pst_utils_io\n17. pst_utils_matrix\n18. pst_utils_cov\n19. pst_utils_ensemble\n20. pst_utils_da"}
{"mask": "all", "input": "sendgrid.helpers.<mask>.To(", "reference": "mail", "full_reference": "sendgrid.helpers.mail.To", "raw_gpt3.5": "1. Email\n2. Personalization\n3. Content\n4. Mail\n5. Address\n6. Name\n7. DynamicTemplateData\n8. Subject\n9. Attachment\n10. Bcc\n11. Cc\n12. CustomArgs\n13. Footer\n14. Header\n15. HtmlContent\n16. PlainTextContent\n17. ReplyTo\n18. SendGridException\n19. Substitution\n20. TemplateId"}
{"mask": "last", "input": "hyd<mask>.core.parametertools.Parameter.parameterstep(", "reference": "py", "full_reference": "hydpy.core.parametertools.Parameter.parameterstep", "raw_gpt3.5": "1. hydra.core.parametertools.Parameter.parameterstepsize\n2. hydra.core.parametertools.Parameter.parameterstepnum\n3. hydra.core.parametertools.Parameter.parameterstepval\n4. hydra.core.parametertools.Parameter.parameterstepdefault\n5. hydra.core.parametertools.Parameter.parameterstepmin\n6. hydra.core.parametertools.Parameter.parameterstepmax\n7. hydra.core.parametertools.Parameter.parameterstepincr\n8. hydra.core.parametertools.Parameter.parameterstepmul\n9. hydra.core.parametertools.Parameter.parameterstepdiv\n10. hydra.core.parametertools.Parameter.parameterstepadd\n11. hydra.core.parametertools.Parameter.parameterstepsub\n12. hydra.core.parametertools.Parameter.parameterstepmod\n13. hydra.core.parametertools.Parameter.parameterstepexp\n14. hydra.core.parametertools.Parameter.parametersteplog\n15. hydra.core.parametertools.Parameter.parameterstepabs\n16. hydra.core.parametertools.Parameter.parameterstepround\n17. hydra.core.parametertools.Parameter.parameterstepfloor\n18. hydra.core.parametertools.Parameter.parameterstepceil\n19. hydra.core.parametertools.Parameter.parameterstepclip\n20. hydra.core.parametertools.Parameter.parameterstepnormalize"}
{"mask": "last", "input": "compliance_checker.base.fix_return_<mask>(", "reference": "value", "full_reference": "compliance_checker.base.fix_return_value", "raw_gpt3.5": "1. value\n2. type\n3. codes\n4. result\n5. message\n6. metadata\n7. status\n8. errors\n9. warnings\n10. info\n11. log\n12. output\n13. summary\n14. report\n15. data\n16. details\n17. fixes\n18. exceptions\n19. checks\n20. criteria"}
{"mask": "last", "input": "datadotworld.client._sw<mask>.InsightPatchRequest(", "reference": "agger", "full_reference": "datadotworld.client._swagger.InsightPatchRequest", "raw_gpt3.5": "1. a\n2. g\n3. i\n4. l\n5. o\n6. u\n7. A\n8. C\n9. D\n10. E\n11. F\n12. G\n13. I\n14. L\n15. N\n16. O\n17. P\n18. S\n19. T\n20. U"}
{"mask": "last", "input": "flask_unch<mask>.click.default(", "reference": "ained", "full_reference": "flask_unchained.click.default", "raw_gpt3.5": "1. error\n2. ower\n3. ecked\n4. oded\n5. ocked\n6. oded_file\n7. ecked_file\n8. oded_data\n9. ecked_data\n10. oded_json\n11. ecked_json\n12. oded_response\n13. ecked_response\n14. oded_headers\n15. ecked_headers\n16. oded_cookie\n17. ecked_cookie\n18. oded_form\n19. ecked_form\n20. oded_query"}
{"mask": "all", "input": "<mask>.gen_totals(", "reference": "ui", "full_reference": "ui.gen_totals", "raw_gpt3.5": "1. pandas.gen_totals(\n2. numpy.gen_totals(\n3. scipy.gen_totals(\n4. matplotlib.gen_totals(\n5. sklearn.gen_totals(\n6. tensorflow.gen_totals(\n7. seaborn.gen_totals(\n8. statsmodels.gen_totals(\n9. bokeh.gen_totals(\n10. plotly.gen_totals(\n11. sympy.gen_totals(\n12. pytorch.gen_totals(\n13. keras.gen_totals(\n14. xgboost.gen_totals(\n15. lightgbm.gen_totals(\n16. catboost.gen_totals(\n17. gensim.gen_totals(\n18. nltk.gen_totals(\n19. spacy.gen_totals(\n20. transformers.gen_totals("}
{"mask": "first", "input": "yamcs.protobuf.yamcsManagement.yamcsManagement_pb2.<mask>amcsInstance(", "reference": "Y", "full_reference": "yamcs.protobuf.yamcsManagement.yamcsManagement_pb2.YamcsInstance", "raw_gpt3.5": "1. getY\n2. setN\n3. has_\n4. clea\n5. mer\n6. upda\n7. list_\n8. add_\n9. remo\n10. get_\n11. des\n12. cre\n13. ini\n14. sta\n15. sto\n16. act\n17. dis\n18. is_\n19. to_\n20. from_"}
{"mask": "all", "input": "apt.cache.<mask>(", "reference": "Cache", "full_reference": "apt.cache.Cache", "raw_gpt3.5": "1. open\n2. update\n3. clear\n4. add\n5. remove\n6. has_key\n7. __contains__\n8. __getitem__\n9. __setitem__\n10. __delitem__\n11. keys\n12. values\n13. items\n14. iterkeys\n15. itervalues\n16. iteritems\n17. copy\n18. fromkeys\n19. get\n20. setdefault"}
{"mask": "last", "input": "grr_response_server.gui.api_plugins.report_plugins.rdf_report_<mask>.ApiReportDataPoint2D(", "reference": "plugins", "full_reference": "grr_response_server.gui.api_plugins.report_plugins.rdf_report_plugins.ApiReportDataPoint2D", "raw_gpt3.5": "1. chart\n2. data\n3. series\n4. plot\n5. graph\n6. point\n7. axis\n8. label\n9. legend\n10. marker\n11. color\n12. title\n13. style\n14. value\n15. category\n16. tooltip\n17. size\n18. font\n19. background\n20. border"}
{"mask": "last", "input": "fluent_blogs.app<mask>.FLUENT_BLOGS_ENTRY_MODEL.rsplit(", "reference": "settings", "full_reference": "fluent_blogs.appsettings.FLUENT_BLOGS_ENTRY_MODEL.rsplit", "raw_gpt3.5": "1. _config\n2. _registry\n3. _meta\n4. _urls\n5. _views\n6. _forms\n7. _utils\n8. _signals\n9. _middleware\n10. _context_processors\n11. _admin\n12. _models\n13. _serializers\n14. _permissions\n15. _validators\n16. _exceptions\n17. _decorators\n18. _fields\n19. _widgets\n20. _tests"}
{"mask": "first", "input": "<mask>osuite.utils.mjcf_utils.new_geom(", "reference": "rob", "full_reference": "robosuite.utils.mjcf_utils.new_geom", "raw_gpt3.5": "1. mujoco\n2. mujoco_py\n3. robosuite\n4. robosuite.utils\n5. robosuite.utils.mjcf_utils\n6. robosuite.utils.mjcf_utils.geom\n7. robosuite.utils.mjcf_utils.new_geom\n8. robosuite.utils.mjcf_utils.new_geom_element\n9. robosuite.utils.mjcf_utils.new_geom_group\n10. robosuite.utils.mjcf_utils.new_geom_site\n11. robosuite.utils.mjcf_utils.new_geom_size\n12. robosuite.utils.mjcf_utils.new_geom_type\n13. robosuite.utils.mjcf_utils.new_geom_rgba\n14. robosuite.utils.mjcf_utils.new_geom_pos\n15. robosuite.utils.mjcf_utils.new_geom_quat\n16. robosuite.utils.mjcf_utils.new_geom_euler\n17. robosuite.utils.mjcf_utils.new_geom_from_dict\n18. robosuite.utils.mjcf_utils.new_geom_from_string\n19. robosuite.utils.mjcf_utils.new_geom_array\n20. robosuite.utils.mjcf_utils.new_geom_array_element"}
{"mask": "last", "input": "pyro<mask>.paver.support.task_requires(", "reference": "base", "full_reference": "pyrobase.paver.support.task_requires", "raw_gpt3.5": "1. tasks\n2. .tasks\n3. .support\n4. .support.tasks\n5. .paver\n6. .paver.support\n7. .paver.support.tasks\n8. .paver.support.task_requires\n9. .support.task_requires\n10. .tasks.task_requires\n11. .paver.task_requires\n12. .paver.tasks.task_requires\n13. .support.tasks.task_requires\n14. .paver.support.task_requires.task_requires\n15. .paver.support.tasks.task_requires\n16. .support.task_requires.task_requires\n17. .tasks.task_requires.task_requires\n18. .paver.task_requires.task_requires\n19. .paver.tasks.task_requires.task_requires\n20. .support.tasks.task_requires.task_requires"}
{"mask": "all", "input": "grr_response_core.<mask>.CONFIG.InterpolateValue(", "reference": "config", "full_reference": "grr_response_core.config.CONFIG.InterpolateValue", "raw_gpt3.5": "1. grr_response_core.stats.CONFIG.InterpolateValue(\n2. grr_response_core.config.CONFIG.InterpolateValue(\n3. grr_response_core.gui.CONFIG.InterpolateValue(\n4. grr_response_core.lib.CONFIG.InterpolateValue(\n5. grr_response_core.server.CONFIG.InterpolateValue(\n6. grr_response_core.tests.CONFIG.InterpolateValue(\n7. grr_response_core.updater.CONFIG.InterpolateValue(\n8. grr_response_core.checks.CONFIG.InterpolateValue(\n9. grr_response_core.console.CONFIG.InterpolateValue(\n10. grr_response_core.distro.CONFIG.InterpolateValue(\n11. grr_response_core.export_utils.CONFIG.InterpolateValue(\n12. grr_response_core.flows.CONFIG.InterpolateValue(\n13. grr_response_core.lib.rdfvalues.CONFIG.InterpolateValue(\n14. grr_response_core.lib.util.CONFIG.InterpolateValue(\n15. grr_response_core.lib.wsgi.CONFIG.InterpolateValue(\n16. grr_response_core.proto.CONFIG.InterpolateValue(\n17. grr_response_core.server.flows.CONFIG.InterpolateValue(\n18. grr_response_core.server.gui.CONFIG.InterpolateValue(\n19. grr_response_core.server.output_plugin.CONFIG.InterpolateValue(\n20. grr_response_core.server.ssh.CONFIG.InterpolateValue("}
{"mask": "first", "input": "<mask>upic.algorithms.connections.Connections.read(", "reference": "n", "full_reference": "nupic.algorithms.connections.Connections.read", "raw_gpt3.5": "1. `c` : `upic.algorithms.connections.Connections.read_csv`\n2. `h` : `upic.algorithms.connections.Connections.read_hdf`\n3. `j` : `upic.algorithms.connections.Connections.read_json`\n4. `p` : `upic.algorithms.connections.Connections.read_parquet`\n5. `f` : `upic.algorithms.connections.Connections.read_feather`\n6. `s` : `upic.algorithms.connections.Connections.read_sql`\n7. `t` : `upic.algorithms.connections.Connections.read_table`\n8. `e` : `upic.algorithms.connections.Connections.read_excel`\n9. `g` : `upic.algorithms.connections.Connections.read_gbq`\n10. `m` : `upic.algorithms.connections.Connections.read_msgpack`\n11. `y` : `upic.algorithms.connections.Connections.read_yaml`\n12. `d` : `upic.algorithms.connections.Connections.read_sql_table`\n13. `n` : `upic.algorithms.connections.Connections.read_sql_query`\n14. `b` : `upic.algorithms.connections.Connections.read_pickle`\n15. `o` : `upic.algorithms.connections.Connections.read_orc`\n16. `a` : `upic.algorithms.connections.Connections.read_html`\n17. `v` : `upic.algorithms.connections.Connections.read_stata`\n18. `i` : `upic.algorithms.connections.Connections.read_spss`\n19. `u` : `upic.algorithms.connections.Connections.read_sqlite`\n20. `z` : `upic.algorithms.connections.Connections.read_zip`"}
{"mask": "last", "input": "turicreate.toolk<mask>.evaluation.f1_score(", "reference": "its", "full_reference": "turicreate.toolkits.evaluation.f1_score", "raw_gpt3.5": "1. s\n2. et\n3. s_\n4. u\n5. es\n6. o\n7. s_\n8. i\n9. s_\n10. a\n11. s_\n12. e\n13. s_\n14. i\n15. s_\n16. a\n17. s_\n18. e\n19. s_\n20. a"}
{"mask": "all", "input": "os.<mask>.exists(", "reference": "path", "full_reference": "os.path.exists", "raw_gpt3.5": "1. path\n2. name\n3. file\n4. dir\n5. folder\n6. location\n7. directory\n8. pathname\n9. location\n10. filepath\n11. folderpath\n12. directorypath\n13. file_path\n14. dir_path\n15. file_exists\n16. dir_exists\n17. folder_exists\n18. path_exists\n19. location_exists\n20. pathname_exists"}
{"mask": "all", "input": "intranet.apps.eighth.models.EighthSignup.objects.<mask>(", "reference": "filter", "full_reference": "intranet.apps.eighth.models.EighthSignup.objects.filter", "raw_gpt3.5": "1. all() \n2. count() \n3. create() \n4. delete() \n5. exclude() \n6. filter() \n7. get() \n8. get_or_create() \n9. in_bulk() \n10. iterator() \n11. latest() \n12. none() \n13. only() \n14. order_by() \n15. prefetch_related() \n16. select_for_update() \n17. update() \n18. values() \n19. values_list() \n20. with_deleted()"}
{"mask": "first", "input": "spyder.utils.misc.<mask>_error_match(", "reference": "get", "full_reference": "spyder.utils.misc.get_error_match", "raw_gpt3.5": "1. regex\n2. string\n3. pattern\n4. match\n5. error\n6. syntax\n7. compile\n8. search\n9. findall\n10. replace\n11. split\n12. sub\n13. escape\n14. group\n15. flags\n16. fullmatch\n17. scanner\n18. template\n19. UNICODE\n20. VERBOSE"}
{"mask": "last", "input": "neddy.namesearch.names<mask>(", "reference": "earch", "full_reference": "neddy.namesearch.namesearch", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. find\n6. filter\n7. match\n8. replace\n9. sort\n10. update\n11. validate\n12. clear\n13. count\n14. delete\n15. exists\n16. extract\n17. keys\n18. lookup\n19. merge\n20. parse"}
{"mask": "last", "input": "midnight_main.components.MetaSe<mask>(", "reference": "o", "full_reference": "midnight_main.components.MetaSeo", "raw_gpt3.5": "1. MetaService\n2. MetaSession\n3. MetaSerializer\n4. MetaSet\n5. MetaServer\n6. MetaSelector\n7. MetaSemaphore\n8. MetaSequence\n9. MetaSetter\n10. MetaSettings\n11. MetaSingleton\n12. MetaSocket\n13. MetaSource\n14. MetaSpace\n15. MetaSpec\n16. MetaSpectrum\n17. MetaSprite\n18. MetaState\n19. MetaStream\n20. MetaString"}
{"mask": "last", "input": "tensor2tensor.trax.backend.logsum<mask>(", "reference": "exp", "full_reference": "tensor2tensor.trax.backend.logsumexp", "raw_gpt3.5": "1. exp\n2. exp_and_reduce\n3. exp_and_log_reduce\n4. exp_and_normalize\n5. exp_and_normalize_jvp\n6. exp_and_normalize_vjp\n7. exp_and_sum\n8. exp_and_weighted_sum\n9. exp_and_weighted_sum_jvp\n10. exp_and_weighted_sum_vjp\n11. exp_and_logsumexp\n12. exp_and_logsumexp_jvp\n13. exp_and_logsumexp_vjp\n14. exp_and_mean\n15. exp_and_mean_jvp\n16. exp_and_mean_vjp\n17. exp_and_var\n18. exp_and_var_jvp\n19. exp_and_var_vjp\n20. exp_and_std"}
{"mask": "first", "input": "projex.<mask>modules(", "reference": "import", "full_reference": "projex.importmodules", "raw_gpt3.5": "1. core\n2. gui\n3. db\n4. util\n5. network\n6. test\n7. web\n8. data\n9. tools\n10. security\n11. logging\n12. xml\n13. math\n14. image\n15. audio\n16. video\n17. graphics\n18. animation\n19. serialization\n20. messaging"}
{"mask": "all", "input": "altgraph.Graph.<mask>(", "reference": "Graph", "full_reference": "altgraph.Graph.Graph", "raw_gpt3.5": "1. add_edge\n2. add_node\n3. add_spanning_tree\n4. add_subgraph\n5. add_vertex\n6. adjacent_vertices\n7. bfs_search\n8. clear\n9. degree\n10. dfs_search\n11. edge\n12. edge_count\n13. edges\n14. get_edge\n15. get_node\n16. has_edge\n17. has_node\n18. in_degree\n19. is_directed\n20. is_spanning_tree"}
{"mask": "last", "input": "psutil.phymem_<mask>(", "reference": "usage", "full_reference": "psutil.phymem_usage", "raw_gpt3.5": "1. total - returns the total physical memory in bytes\n2. used - returns the amount of used physical memory in bytes\n3. free - returns the amount of free physical memory in bytes\n4. percent - returns the percentage of used physical memory\n5. buffers - returns the amount of physical memory used for buffers in bytes\n6. cached - returns the amount of physical memory used for caching in bytes\n7. shared - returns the amount of shared physical memory in bytes\n8. slab - returns the amount of physical memory used for kernel data structures in bytes\n9. available - returns the amount of available physical memory in bytes\n10. active - returns the amount of active physical memory in bytes\n11. inactive - returns the amount of inactive physical memory in bytes\n12. wired - returns the amount of wired physical memory in bytes\n13. unevictable - returns the amount of unevictable physical memory in bytes\n14. dirty - returns the amount of dirty physical memory in bytes\n15. writeback - returns the amount of physical memory used for writeback in bytes\n16. mapped - returns the amount of physical memory used for mapped pages in bytes\n17. anon - returns the amount of physical memory used for anonymous pages in bytes\n18. file - returns the amount of physical memory used for file-backed pages in bytes\n19. shmem - returns the amount of physical memory used for shared memory in bytes\n20. pte - returns the amount of physical memory used for page table entries in bytes"}
{"mask": "last", "input": "per<mask>.util.amax(", "reference": "i", "full_reference": "peri.util.amax", "raw_gpt3.5": "1. numpy\n2. scipy\n3. cupy\n4. jax\n5. torch\n6. mxnet\n7. tensorflow\n8. dask\n9. pandas\n10. numba\n11. sklearn\n12. theano\n13. chainer\n14. statsmodels\n15. pytorch\n16. xarray\n17. keras\n18. mxboard\n19. mxnet.ndarray\n20. mxnet.symbol"}
{"mask": "first", "input": "asymmetric_jwt_auth.token.<mask>_claimed_username(", "reference": "get", "full_reference": "asymmetric_jwt_auth.token.get_claimed_username", "raw_gpt3.5": "1. get\n2. set\n3. validate\n4. extract\n5. parse\n6. generate\n7. check\n8. decode\n9. encode\n10. retrieve\n11. fetch\n12. obtain\n13. acquire\n14. determine\n15. derive\n16. compute\n17. calculate\n18. infer\n19. resolve\n20. ascertain"}
{"mask": "first", "input": "<mask>ann.util.get_seqs(", "reference": "seq", "full_reference": "seqann.util.get_seqs", "raw_gpt3.5": "1. bio\n2. seq\n3. py\n4. ann\n5. utils\n6. data\n7. fasta\n8. alignment\n9. sequence\n10. feature\n11. motif\n12. phylo\n13. structure\n14. blast\n15. hmm\n16. pdb\n17. genbank\n18. interpro\n19. uniprot\n20. alignment_utils"}
{"mask": "all", "input": "argos.<mask>.cls.to_string(", "reference": "utils", "full_reference": "argos.utils.cls.to_string", "raw_gpt3.5": "1. __name__\n2. __module__\n3. __class__\n4. __dict__\n5. __bases__\n6. __qualname__\n7. __init__\n8. __str__\n9. __repr__\n10. __format__\n11. __sizeof__\n12. __dir__\n13. __getattribute__\n14. __setattr__\n15. __delattr__\n16. __lt__\n17. __le__\n18. __eq__\n19. __ne__\n20. __gt__"}
{"mask": "last", "input": "fontTools.tt<mask>.tables._g_l_y_f.Glyph(", "reference": "Lib", "full_reference": "fontTools.ttLib.tables._g_l_y_f.Glyph", "raw_gpt3.5": "1. Header\n2. Hhea\n3. Hmtx\n4. Cmap\n5. Name\n6. Post\n7. Maxp\n8. Os2\n9. Fpgm\n10. Prep\n11. Gasp\n12. Kerning\n13. Vhea\n14. Vmtx\n15. Gdef\n16. Gpos\n17. Gsub\n18. Cff\n19. Cff2\n20. Svg"}
{"mask": "all", "input": "etk.extractors.<mask>.util.tf_transfer(", "reference": "util", "full_reference": "etk.extractors.util.util.tf_transfer", "raw_gpt3.5": "1. feature\n2. embeddings\n3. tensor\n4. layer\n5. model\n6. graph\n7. ops\n8. variable\n9. estimator\n10. contrib\n11. preprocessing\n12. dataset\n13. metrics\n14. losses\n15. optimizer\n16. callbacks\n17. utils\n18. initializer\n19. regularizer\n20. activation"}
{"mask": "first", "input": "goldman.utils.str_helpers.<mask>_val_salt_hash(", "reference": "cmp", "full_reference": "goldman.utils.str_helpers.cmp_val_salt_hash", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. generate\n5. compute\n6. hash\n7. check\n8. create\n9. validate\n10. encrypt\n11. decrypt\n12. random\n13. secure\n14. unique\n15. normalize\n16. format\n17. sanitize\n18. extract\n19. parse\n20. compare"}
{"mask": "last", "input": "pcap<mask>.utilities.compat.pathlib.Path(", "reference": "kit", "full_reference": "pcapkit.utilities.compat.pathlib.Path", "raw_gpt3.5": "1. PurePosixPath\n2. PureWindowsPath\n3. PurePath\n4. _Accessor\n5. _Flavour\n6. _NormalAccessor\n7. _NormalFlavour\n8. _PosixFlavour\n9. _WindowsFlavour\n10. _WindowsPath\n11. _getfinalpathname\n12. _getfinalpathname_nonstrict\n13. _make_selector\n14. _parse_args\n15. _parse_parts\n16. _parse_template\n17. _windows_flavour\n18. _wrap_str\n19. _wrap_text\n20. _wrap_unicode"}
{"mask": "first", "input": "<mask>inious.frontend.pages.course_admin.task_edit_file.CourseTaskFiles.get_task_filelist(", "reference": "ing", "full_reference": "inginious.frontend.pages.course_admin.task_edit_file.CourseTaskFiles.get_task_filelist", "raw_gpt3.5": "1. Course\n2. Task\n3. Files\n4. get\n5. task\n6. filelist\n7. edit\n8. admin\n9. page\n10. front\n11. end\n12. ini\n13. iou\n14. s.\n15. fr\n16. on\n17. t\n18. en\n19. d.\n20. pa"}
{"mask": "first", "input": "argos.application.<mask>osApplication(", "reference": "Arg", "full_reference": "argos.application.ArgosApplication", "raw_gpt3.5": "1. web\n2. mobile\n3. desktop\n4. ios\n5. android\n6. windows\n7. mac\n8. linux\n9. console\n10. server\n11. cloud\n12. embedded\n13. gui\n14. headless\n15. remote\n16. distributed\n17. parallel\n18. containerized\n19. microservices\n20. event-driven"}
{"mask": "last", "input": "hmmlearn.h<mask>.MultinomialHMM(", "reference": "mm", "full_reference": "hmmlearn.hmm.MultinomialHMM", "raw_gpt3.5": "1. init\n2. mm\n3. mmutils\n4. mmlearn\n5. mm_base\n6. mm_class\n7. mm_model\n8. mm_stats\n9. mm_test\n10. mm_train\n11. mmutils_\n12. mmlearn_\n13. mm_base_\n14. mm_class_\n15. mm_model_\n16. mm_stats_\n17. mm_test_\n18. mm_train_\n19. mmutils__\n20. mmlearn__"}
{"mask": "all", "input": "heron.tools.common.<mask>.python.access.get_filestats(", "reference": "src", "full_reference": "heron.tools.common.src.python.access.get_filestats", "raw_gpt3.5": "1. metrics\n2. utils\n3. config\n4. logging\n5. exceptions\n6. serialization\n7. security\n8. data\n9. storage\n10. network\n11. testing\n12. decorators\n13. validation\n14. serialization\n15. encryption\n16. compression\n17. serialization\n18. serialization\n19. serialization\n20. serialization"}
{"mask": "all", "input": "abilian.<mask>.models.tag.Tag.id.in_(", "reference": "core", "full_reference": "abilian.core.models.tag.Tag.id.in_", "raw_gpt3.5": "1. abilian.orm.models.tag.Tag.id.in_( \n2. abilian.core.models.tag.Tag.id.in_( \n3. abilian.cms.models.tag.Tag.id.in_( \n4. abilian.sbe.models.tag.Tag.id.in_( \n5. abilian.sbe.models.tags.Tag.id.in_( \n6. abilian.sbe.models.tagging.Tag.id.in_( \n7. abilian.sbe.models.taggings.Tag.id.in_( \n8. abilian.sbe.models.tagged.Tag.id.in_( \n9. abilian.sbe.models.taggable.Tag.id.in_( \n10. abilian.sbe.models.taggables.Tag.id.in_( \n11. abilian.sbe.models.taggeditem.Tag.id.in_( \n12. abilian.sbe.models.taggeditems.Tag.id.in_( \n13. abilian.sbe.models.tagged_object.Tag.id.in_( \n14. abilian.sbe.models.tagged_objects.Tag.id.in_( \n15. abilian.sbe.models.taggedobject.Tag.id.in_( \n16. abilian.sbe.models.taggedobjects.Tag.id.in_( \n17. abilian.sbe.models.tagged_item.Tag.id.in_( \n18. abilian.sbe.models.tagged_items.Tag.id.in_( \n19. abilian.sbe.models.taggedobjectitem.Tag.id.in_( \n20. abilian.sbe.models.taggedobjectitems.Tag.id.in_("}
{"mask": "last", "input": "bcbio.struct<mask>.validate.evaluate(", "reference": "ural", "full_reference": "bcbio.structural.validate.evaluate", "raw_gpt3.5": "1. _io\n2. s\n3. ure\n4. ured\n5. uredict\n6. uredicts\n7. uredictschema\n8. uredictschema_\n9. uredictschema_v\n10. uredictschema_va\n11. uredictschema_val\n12. uredictschema_vali\n13. uredictschema_valid\n14. uredictschema_valida\n15. uredictschema_validate\n16. uredictschema_validate_\n17. uredictschema_validate_d\n18. uredictschema_validate_da\n19. uredictschema_validate_dat\n20. uredictschema_validate_data"}
{"mask": "last", "input": "p<mask>.UnitRegistry(", "reference": "int", "full_reference": "pint.UnitRegistry", "raw_gpt3.5": "1. u\n2. Q\n3. s\n4. i\n5. m\n6. n\n7. a\n8. c\n9. o\n10. r\n11. e\n12. x\n13. t\n14. f\n15. b\n16. d\n17. g\n18. h\n19. j\n20. k"}
{"mask": "all", "input": "sslyze.<mask>.tls12_workaround.WorkaroundForTls12ForCipherSuites.requires_legacy_openssl(", "reference": "utils", "full_reference": "sslyze.utils.tls12_workaround.WorkaroundForTls12ForCipherSuites.requires_legacy_openssl", "raw_gpt3.5": "1. _is_cipher_suite_supported\n2. _is_cipher_suite_supported_by_openssl\n3. _is_cipher_suite_supported_by_pyopenssl\n4. _is_cipher_suite_supported_by_ssl\n5. _is_cipher_suite_supported_by_tls\n6. _is_cipher_suite_supported_by_tls12\n7. _is_cipher_suite_supported_by_tls13\n8. _is_cipher_suite_supported_by_tls_version\n9. _is_cipher_suite_supported_by_workaround\n10. _is_cipher_suite_supported_by_workaround_for_tls12\n11. _is_cipher_suite_supported_by_workaround_for_tls13\n12. _is_cipher_suite_supported_by_workaround_for_tls_version\n13. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite\n14. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_openssl\n15. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_pyopenssl\n16. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_ssl\n17. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_tls\n18. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_tls12\n19. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_tls13\n20. _is_cipher_suite_supported_by_workaround_for_tls_version_and_cipher_suite_with_workaround"}
{"mask": "first", "input": "openquake.<mask>elib.general.safeprint(", "reference": "bas", "full_reference": "openquake.baselib.general.safeprint", "raw_gpt3.5": "1. core\n2. hazardlib\n3. risklib\n4. vulnerabilitylib\n5. output\n6. input\n7. common\n8. config\n9. utils\n10. validation\n11. model\n12. gui\n13. server\n14. testing\n15. workflow\n16. book\n17. geo\n18. plot\n19. nrml\n20. nrml.validation"}
{"mask": "last", "input": "qtpandas.models.DataFrame<mask>.DataFrameModel(", "reference": "Model", "full_reference": "qtpandas.models.DataFrameModel.DataFrameModel", "raw_gpt3.5": "1. _data\n2. _dataFrame\n3. _dataframe\n4. _df\n5. _model\n6. _modelData\n7. _model_data\n8. _modeldata\n9. _model_df\n10. _model_dataframe\n11. _model_df_data\n12. _model_dfdata\n13. _model_df_dataFrame\n14. _model_dfdataFrame\n15. _model_df_dataframe\n16. _model_dfdataframe\n17. _model_dataframe_data\n18. _model_dataFrame_data\n19. _model_dataframeData\n20. _model_dataFrameData"}
{"mask": "first", "input": "Crypto.Cipher.<mask>3.new(", "reference": "DES", "full_reference": "Crypto.Cipher.DES3.new", "raw_gpt3.5": "1. AES\n2. ARC4\n3. ARC2\n4. Blowfish\n5. CAST\n6. DES\n7. DES3\n8. IDEA\n9. PKCS1_OAEP\n10. PKCS1_v1_5\n11. PKCS1_OAEP256\n12. PKCS1_PSS\n13. Salsa20\n14. SEED\n15. XChaCha20\n16. ChaCha20\n17. ChaCha20Poly1305\n18. Fernet\n19. ARC4_128\n20. ARC4_40"}
{"mask": "all", "input": "xbmcswift2.logger.<mask>.warning(", "reference": "log", "full_reference": "xbmcswift2.logger.log.warning", "raw_gpt3.5": "1. message\n2. level\n3. log\n4. debug\n5. critical\n6. error\n7. exception\n8. info\n9. log_exception\n10. log_info\n11. log_warning\n12. warn\n13. log_debug\n14. log_critical\n15. log_error\n16. log_exception_traceback\n17. log_info_traceback\n18. log_warning_traceback\n19. log_debug_traceback\n20. log_critical_traceback"}
{"mask": "all", "input": "pipenv.patched.notpip._internal.<mask>.packaging.check_requires_python(", "reference": "utils", "full_reference": "pipenv.patched.notpip._internal.utils.packaging.check_requires_python", "raw_gpt3.5": "1. version\n2. metadata\n3. distribution\n4. requirements\n5. specifier\n6. markers\n7. parse\n8. environment\n9. candidate\n10. resolver\n11. finder\n12. link\n13. wheel\n14. path\n15. cache\n16. session\n17. logger\n18. exceptions\n19. utils\n20. pep517"}
{"mask": "all", "input": "leonardo.module.<mask>.models.Page.create_content_type(", "reference": "web", "full_reference": "leonardo.module.web.models.Page.create_content_type", "raw_gpt3.5": "1. django\n2. wagtail\n3. cms\n4. content\n5. admin\n6. core\n7. utils\n8. fields\n9. forms\n10. views\n11. templates\n12. middleware\n13. settings\n14. exceptions\n15. contrib\n16. apps\n17. context_processors\n18. decorators\n19. templatetags\n20. widgets"}
{"mask": "last", "input": "fermipy.sourcefind_<mask>.fit_error_ellipse(", "reference": "utils", "full_reference": "fermipy.sourcefind_utils.fit_error_ellipse", "raw_gpt3.5": "1. contours\n2. sources\n3. ellipse\n4. pixels\n5. region\n6. threshold\n7. catalog\n8. likelihood\n9. parameters\n10. statistics\n11. significance\n12. spectrum\n13. model\n14. covariance\n15. profile\n16. extension\n17. association\n18. detection\n19. background\n20. aperture"}
{"mask": "all", "input": "sqlalchemy.<mask>.utcnow(", "reference": "func", "full_reference": "sqlalchemy.func.utcnow", "raw_gpt3.5": "1. engine\n2. create_engine\n3. orm\n4. select\n5. Column\n6. Table\n7. MetaData\n8. ForeignKey\n9. Integer\n10. String\n11. DateTime\n12. Boolean\n13. func\n14. and_\n15. or_\n16. not_\n17. desc\n18. asc\n19. text\n20. literal_column"}
{"mask": "first", "input": "<mask>ARK.ConsumptionSaving.ConsIndShockModel.IndShockConsumerType.simBirth(", "reference": "H", "full_reference": "HARK.ConsumptionSaving.ConsIndShockModel.IndShockConsumerType.simBirth", "raw_gpt3.5": "1. _get\n2. _read\n3. _set\n4. _write\n5. _update\n6. _calc\n7. _initialize\n8. _simulate\n9. _solve\n10. _create\n11. _run\n12. _process\n13. _apply\n14. _check\n15. _adjust\n16. _parse\n17. _load\n18. _store\n19. _execute\n20. _prepare"}
{"mask": "all", "input": "bigchaindb.common.<mask>.validate_all_values_for_key_in_obj(", "reference": "utils", "full_reference": "bigchaindb.common.utils.validate_all_values_for_key_in_obj", "raw_gpt3.5": "1. schema\n2. exceptions\n3. util\n4. crypto\n5. transaction\n6. models\n7. config\n8. core\n9. exceptions\n10. crypto\n11. utils\n12. exceptions\n13. exceptions\n14. exceptions\n15. exceptions\n16. exceptions\n17. exceptions\n18. exceptions\n19. exceptions\n20. exceptions"}
{"mask": "all", "input": "cone.app.browser.<mask>.make_url(", "reference": "utils", "full_reference": "cone.app.browser.utils.make_url", "raw_gpt3.5": "1. get\n2. set\n3. create\n4. generate\n5. build\n6. format\n7. parse\n8. construct\n9. compose\n10. prepare\n11. encode\n12. decode\n13. fetch\n14. retrieve\n15. compose_url\n16. assemble\n17. generate_url\n18. construct_url\n19. make_link\n20. make_href"}
{"mask": "all", "input": "<mask>.utils.eprint(", "reference": "did", "full_reference": "did.utils.eprint", "raw_gpt3.5": "1. sys\n2. logging\n3. traceback\n4. inspect\n5. warnings\n6. io\n7. six\n8. typing\n9. functools\n10. contextlib\n11. termcolor\n12. colorama\n13. tabulate\n14. pprint\n15. json\n16. yaml\n17. codecs\n18. textwrap\n19. difflib\n20. argparse"}
{"mask": "all", "input": "PyHardLinkBackup.phlb.<mask>.human_filesize(", "reference": "human", "full_reference": "PyHardLinkBackup.phlb.human.human_filesize", "raw_gpt3.5": "1. _get_size - 0.999\n2. _convert_size - 0.001"}
{"mask": "first", "input": "home.dash.admin.<mask>_admin(", "reference": "setup", "full_reference": "home.dash.admin.setup_admin", "raw_gpt3.5": "1. create\n2. delete\n3. update\n4. view\n5. list\n6. edit\n7. get\n8. add\n9. remove\n10. manage\n11. modify\n12. change\n13. configure\n14. set\n15. execute\n16. authorize\n17. revoke\n18. initialize\n19. validate\n20. process"}
{"mask": "all", "input": "charmhelpers.<mask>.hookenv.service_name(", "reference": "core", "full_reference": "charmhelpers.core.hookenv.service_name", "raw_gpt3.5": "1. get\n2. relation_ids\n3. relation_get\n4. relation_set\n5. relation_id\n6. relation_list\n7. relation_set\n8. relation_get\n9. relation_ids\n10. relation_list\n11. relation_set\n12. relation_get\n13. relation_ids\n14. relation_list\n15. relation_set\n16. relation_get\n17. relation_ids\n18. relation_list\n19. relation_set\n20. relation_get"}
{"mask": "first", "input": "plumbing.common.<mask>_integer(", "reference": "is", "full_reference": "plumbing.common.is_integer", "raw_gpt3.5": "1. parse\n2. validate\n3. convert\n4. extract\n5. format\n6. encode\n7. decode\n8. increment\n9. decrement\n10. generate\n11. calculate\n12. compare\n13. filter\n14. round\n15. truncate\n16. normalize\n17. randomize\n18. hash\n19. compress\n20. decompress"}
{"mask": "first", "input": "<mask>min.cssmin(", "reference": "css", "full_reference": "cssmin.cssmin", "raw_gpt3.5": "1. cssutils\n2. slimit\n3. rcssmin\n4. csscompressor\n5. cssminifier\n6. cssminify\n7. minifycss\n8. mincss\n9. cssmin\n10. mincssparser\n11. cssminifyer\n12. cssminimizer\n13. cssminifycss\n14. cssminifyjs\n15. cssminifyhtml\n16. cssminifyjson\n17. cssminifyxml\n18. cssminifyyaml\n19. cssminifyerjs\n20. cssminifyerhtml"}
{"mask": "first", "input": "ctypeslib.<mask>gen.typedesc.Function(", "reference": "code", "full_reference": "ctypeslib.codegen.typedesc.Function", "raw_gpt3.5": "1. _CFuncPtr\n2. _CData\n3. _CDataMeta\n4. _CDataMetaType\n5. _CDataMetaArrayType\n6. _CDataMetaStructType\n7. _CDataMetaUnionType\n8. _CDataMetaEnumType\n9. _CDataMetaPointerType\n10. _CDataMetaArrayType\n11. _CDataMetaStructOrUnionType\n12. _CDataMetaStructTypeOrUnionType\n13. _CDataMetaStructOrUnionOrArrayType\n14. _CDataMetaStructOrUnionOrPointerType\n15. _CDataMetaStructOrUnionOrArrayTypeOrPointerType\n16. _CDataMetaStructOrUnionOrPointerTypeOrArrayType\n17. _CDataMetaStructOrUnionOrPointerTypeOrArrayTypeOrSimpleType\n18. _CDataMetaStructOrUnionOrPointerTypeOrArrayTypeOrSimpleOrStringType\n19. _CDataMetaStructOrUnionOrPointerTypeOrArrayTypeOrSimpleOrStringOrArrayType\n20. _CDataMetaStructOrUnionOrPointerTypeOrArrayTypeOrSimpleOrStringOrArrayTypeOrPointerType"}
{"mask": "first", "input": "<mask>nltk.syntax.utils.normalise_alignments(", "reference": "est", "full_reference": "estnltk.syntax.utils.normalise_alignments", "raw_gpt3.5": "1. extract\n2. compute\n3. generate\n4. update\n5. apply\n6. check\n7. convert\n8. evaluate\n9. optimize\n10. preprocess\n11. refine\n12. standardize\n13. transform\n14. validate\n15. normalize\n16. calculate\n17. initialize\n18. parse\n19. simplify\n20. tokenize"}
{"mask": "last", "input": "edxval.models.VideoTrans<mask>.objects.filter(", "reference": "cript", "full_reference": "edxval.models.VideoTranscript.objects.filter", "raw_gpt3.5": "1. code\n2. former\n3. coder\n4. form\n5. formers\n6. formerly\n7. formation\n8. format\n9. formatter\n10. formatted\n11. formatting\n12. formset\n13. formsets\n14. form_data\n15. form_error\n16. form_errors\n17. formfield\n18. formfields\n19. formset_factory\n20. form_valid"}
{"mask": "first", "input": "edisgo.<mask>_opt.storage_integration.connect_storage(", "reference": "flex", "full_reference": "edisgo.flex_opt.storage_integration.connect_storage", "raw_gpt3.5": "1. redis\n2. mysql\n3. postgres\n4. sqlite\n5. mongo\n6. s3\n7. azure\n8. gcs\n9. ftp\n10. ssh\n11. hdfs\n12. local\n13. swift\n14. webdav\n15. nfs\n16. ceph\n17. minio\n18. oci\n19. cos\n20. wasbs"}
{"mask": "first", "input": "<mask>ither.slithir.operations.EventCall(", "reference": "sl", "full_reference": "slither.slithir.operations.EventCall", "raw_gpt3.5": "1. e\n2. Sl\n3. ith\n4. oper\n5. ations\n6. Event\n7. Call\n8. Slith\n9. ir\n10. operat\n11. ion\n12. EventC\n13. all\n14. Slither\n15. operations\n16. EventCall\n17. Slithir\n18. operations\n19. EventCall\n20. Slither.operations"}
{"mask": "last", "input": "pywb.utils.geventserver.Gevent<mask>(", "reference": "Server", "full_reference": "pywb.utils.geventserver.GeventServer", "raw_gpt3.5": "1. Server\n2. StreamHandler\n3. RequestHandler\n4. HTTPServer\n5. SocketServer\n6. BaseServer\n7. ThreadingMixIn\n8. ForkingMixIn\n9. TCPServer\n10. UDPServer\n11. DatagramRequestHandler\n12. BaseRequestHandler\n13. ThreadingUDPServer\n14. ThreadingTCPServer\n15. ForkingUDPServer\n16. ForkingTCPServer\n17. StreamRequestHandler\n18. DatagramServer\n19. UnixStreamServer\n20. UnixDatagramServer"}
{"mask": "last", "input": "greeking.placeholdit.get_<mask>(", "reference": "url", "full_reference": "greeking.placeholdit.get_url", "raw_gpt3.5": "1. width\n2. height\n3. format\n4. background_color\n5. text_color\n6. font\n7. font_size\n8. text\n9. image_url\n10. border_size\n11. border_color\n12. rotation\n13. blur\n14. grayscale\n15. sepia\n16. brightness\n17. contrast\n18. saturation\n19. hue\n20. watermark"}
{"mask": "first", "input": "flatlib.object.Object.<mask>Dict(", "reference": "from", "full_reference": "flatlib.object.Object.fromDict", "raw_gpt3.5": "1. get\n2. set\n3. has\n4. clear\n5. items\n6. keys\n7. values\n8. update\n9. pop\n10. popitem\n11. fromkeys\n12. copy\n13. __contains__\n14. __delitem__\n15. __getitem__\n16. __len__\n17. __setitem__\n18. __str__\n19. __repr__\n20. __eq__"}
{"mask": "all", "input": "wagtail.core.<mask>.StreamValue(", "reference": "blocks", "full_reference": "wagtail.core.blocks.StreamValue", "raw_gpt3.5": "1. block\n2. blocks\n3. fields\n4. field\n5. value\n6. values\n7. block_field\n8. block_fields\n9. block_value\n10. block_values\n11. field_value\n12. field_values\n13. block_field_value\n14. block_field_values\n15. block_value_field\n16. block_values_field\n17. field_block_value\n18. field_block_values\n19. value_block_field\n20. values_block_field"}
{"mask": "last", "input": "spyder_kernels.utils.ns<mask>.get_human_readable_type(", "reference": "view", "full_reference": "spyder_kernels.utils.nsview.get_human_readable_type", "raw_gpt3.5": "1. _name\n2. _dict\n3. _module\n4. _file\n5. _loader\n6. _spec\n7. _path\n8. _cached\n9. _initializing\n10. _getframe\n11. _getframeinfo\n12. _getouterframes\n13. _checkframe\n14. _findframe\n15. _findsource\n16. _get_code\n17. _get_lines\n18. _get_lnotab\n19. _get_name\n20. _get_globals"}
{"mask": "first", "input": "<mask>2clientprotocol.query_pb2.RequestQueryAvailableAbilities(", "reference": "s", "full_reference": "s2clientprotocol.query_pb2.RequestQueryAvailableAbilities", "raw_gpt3.5": "1. google\n2. tensorflow\n3. grpc\n4. protobuf\n5. api\n6. client\n7. protocol\n8. query_pb2\n9. RequestQueryAvailableAbilities\n10. ResponseQueryAvailableAbilities\n11. RequestQueryAbilities\n12. ResponseQueryAbilities\n13. RequestQueryAbilitiesWithMetadata\n14. ResponseQueryAbilitiesWithMetadata\n15. RequestQueryAbilityInfo\n16. ResponseQueryAbilityInfo\n17. RequestQueryAbilityInfoWithMetadata\n18. ResponseQueryAbilityInfoWithMetadata\n19. RequestQueryAbilityVersions\n20. ResponseQueryAbilityVersions"}
{"mask": "last", "input": "datadog_checks.tokum<mask>.vendor.pymongo.message._GetMore(", "reference": "x", "full_reference": "datadog_checks.tokumx.vendor.pymongo.message._GetMore", "raw_gpt3.5": "1. odb\n2. ap\n3. lus\n4. aps\n5. aper\n6. apern\n7. aperne\n8. apernet\n9. aperneti\n10. apernetic\n11. apernetix\n12. apernetixc\n13. apernetixcl\n14. apernetixcli\n15. apernetixclic\n16. apernetixclick\n17. apernetixclickh\n18. apernetixclickho\n19. apernetixclickhou\n20. apernetixclickhous"}
{"mask": "last", "input": "ga4<mask>.schemas.protocol.Analysis(", "reference": "gh", "full_reference": "ga4gh.schemas.protocol.Analysis", "raw_gpt3.5": "1. v1\n2. _pb2\n3. _pb2_grpc\n4. _grpc\n5. _pb2_analysis\n6. _pb2_analysis_grpc\n7. _pb2_analysis_service\n8. _pb2_analysis_service_grpc\n9. _pb2_analysis_pb2\n10. _pb2_analysis_pb2_grpc\n11. _pb2_analysis_pb2_service\n12. _pb2_analysis_pb2_service_grpc\n13. _pb2_analysis_pb2_analysis\n14. _pb2_analysis_pb2_analysis_grpc\n15. _pb2_analysis_pb2_analysis_service\n16. _pb2_analysis_pb2_analysis_service_grpc\n17. _pb2_analysis_pb2_analysis_pb2\n18. _pb2_analysis_pb2_analysis_pb2_grpc\n19. _pb2_analysis_pb2_analysis_pb2_service\n20. _pb2_analysis_pb2_analysis_pb2_service_grpc"}
{"mask": "last", "input": "mapchete.io.write_<mask>(", "reference": "json", "full_reference": "mapchete.io.write_json", "raw_gpt3.5": "1. geotiff\n2. png\n3. jpeg\n4. tif\n5. jp2\n6. vrt\n7. asc\n8. xyz\n9. netcdf\n10. hdf5\n11. grib\n12. zarr\n13. json\n14. csv\n15. shp\n16. gpkg\n17. sqlite\n18. pgsql\n19. mysql\n20. oracle"}
{"mask": "last", "input": "sdl<mask>._sdl2.lib.lineRGBA(", "reference": "2", "full_reference": "sdl2._sdl2.lib.lineRGBA", "raw_gpt3.5": "1. draw\n2. gfx\n3. rect\n4. circle\n5. bezier\n6. aaline\n7. aaellipse\n8. aaarc\n9. aapolygon\n10. arc\n11. ellipse\n12. filledPolygon\n13. filledCircle\n14. filledEllipse\n15. pie\n16. polygon\n17. roundedRectangle\n18. thickLine\n19. trigon\n20. wideLine"}
{"mask": "last", "input": "aene<mask>.globalfunctions.delete_file(", "reference": "as", "full_reference": "aeneas.globalfunctions.delete_file", "raw_gpt3.5": "1. os\n2. shutil\n3. pathlib\n4. glob\n5. zipfile\n6. fnmatch\n7. distutils\n8. tempfile\n9. logging\n10. subprocess\n11. io\n12. signal\n13. threading\n14. time\n15. random\n16. re\n17. json\n18. base64\n19. hashlib\n20. sqlite3"}
{"mask": "last", "input": "_swigib<mask>.EClientSocketBase_placeOrder(", "reference": "py", "full_reference": "_swigibpy.EClientSocketBase_placeOrder", "raw_gpt3.5": "1. on\n2. n\n3. er\n4. ent\n5. at\n6. ity\n7. able\n8. s\n9. i\n10. f\n11. l\n12. m\n13. c\n14. b\n15. d\n16. p\n17. v\n18. w\n19. x\n20. z"}
{"mask": "last", "input": "pyamg.amg_core.apply_distance_<mask>(", "reference": "filter", "full_reference": "pyamg.amg_core.apply_distance_filter", "raw_gpt3.5": "1. weights\n2. limit\n3. threshold\n4. filter\n5. matrix\n6. function\n7. preconditioner\n8. scaling\n9. strategy\n10. criterion\n11. operator\n12. smoothing\n13. constraint\n14. tolerance\n15. boundary\n16. projection\n17. preconditioning\n18. relaxation\n19. connectivity\n20. algorithm"}
{"mask": "all", "input": "<mask>.global_.DATA_FUNCTIONS.append(", "reference": "api", "full_reference": "api.global_.DATA_FUNCTIONS.append", "raw_gpt3.5": "1. pandas\n2. numpy\n3. sklearn\n4. tensorflow\n5. matplotlib\n6. scipy\n7. seaborn\n8. statsmodels\n9. torch\n10. keras\n11. bokeh\n12. xgboost\n13. catboost\n14. lightgbm\n15. dash\n16. plotly\n17. gensim\n18. nltk\n19. spacy\n20. transformers"}
{"mask": "first", "input": "utool._internal.util_importer.<mask>_initstr(", "reference": "make", "full_reference": "utool._internal.util_importer.make_initstr", "raw_gpt3.5": "1. _get\n2. _get_\n3. _getattribute\n4. _getattribute_\n5. _getattribute__initstr\n6. _getattribute__initstr_\n7. _getattribute__initstr__get\n8. _getattribute__initstr__get_\n9. _getattribute__initstr__getattribute\n10. _getattribute__initstr__getattribute_\n11. _getattribute__initstr__getattribute__get\n12. _getattribute__initstr__getattribute__get_\n13. _getattribute__initstr__getattribute__getattribute\n14. _getattribute__initstr__getattribute__getattribute_\n15. _getattribute__initstr__getattribute__getattribute__get\n16. _getattribute__initstr__getattribute__getattribute__get_\n17. _getattribute__initstr__getattribute__getattribute__getattribute\n18. _getattribute__initstr__getattribute__getattribute__getattribute_\n19. _getattribute__initstr__getattribute__getattribute__getattribute__get\n20. _getattribute__initstr__getattribute__getattribute__getattribute__get_"}
{"mask": "all", "input": "skimage.<mask>.use_plugin(", "reference": "io", "full_reference": "skimage.io.use_plugin", "raw_gpt3.5": "1. io\n2. filters\n3. color\n4. morphology\n5. exposure\n6. transform\n7. feature\n8. draw\n9. viewer\n10. segmentation\n11. measure\n12. util\n13. restoration\n14. graph\n15. registration\n16. future\n17. externals\n18. _shared\n19. _build_utils\n20. _shared.utils"}
{"mask": "first", "input": "<mask>quil.api._qvm.QVM(", "reference": "py", "full_reference": "pyquil.api._qvm.QVM", "raw_gpt3.5": "1. py\n2. forest\n3. qiskit\n4. cirq\n5. qsharp\n6. qutip\n7. strawberryfields\n8. braket\n9. pennylane\n10. qinfer\n11. qsim\n12. qat\n13. qfast\n14. qflow\n15. qiskit_ibmq_provider\n16. qiskit_aer\n17. qiskit_ignis\n18. qiskit_nature\n19. qiskit_optimization\n20. qiskit_pulse"}
{"mask": "last", "input": "tensorflow.parse_<mask>(", "reference": "example", "full_reference": "tensorflow.parse_example", "raw_gpt3.5": "1. tensor\n2. example\n3. op\n4. single_example\n5. sequence_example\n6. sparse_example\n7. serialized_example\n8. bytes\n9. json\n10. text\n11. csv\n12. tfrecord\n13. feature\n14. options\n15. sequence\n16. serialized\n17. serialized_sequence_example\n18. serialized_sparse\n19. serialized_tensor\n20. serialized_sequence."}
{"mask": "first", "input": "pyarlo.const.<mask>_BODY.copy(", "reference": "ACTION", "full_reference": "pyarlo.const.ACTION_BODY.copy", "raw_gpt3.5": "1.  _to\n2.  _from\n3.  _BODY\n4.  _body\n5.  _copy\n6.  _data\n7.  _dict\n8.  _list\n9.  _set\n10. _tuple\n11. _json\n12. _yaml\n13. _xml\n14. _csv\n15. _pickle\n16. _protocol\n17. _module\n18. _function\n19. _class\n20. _attribute"}
{"mask": "last", "input": "sklearn.manifold._barnes_hut_ts<mask>.gradient(", "reference": "ne", "full_reference": "sklearn.manifold._barnes_hut_tsne.gradient", "raw_gpt3.5": "1. _approximate_gradient\n2. _gradient_descent\n3. _gradient\n4. _gradient_norm\n5. _gradient_update\n6. _gradient_descent_step\n7. _gradient_descent_update\n8. _gradient_descent_direction\n9. _gradient_descent_optimizer\n10. _gradient_descent_iteration\n11. _gradient_descent_objective\n12. _gradient_descent_momentum\n13. _gradient_descent_learning_rate\n14. _gradient_descent_convergence\n15. _gradient_descent_tolerance\n16. _gradient_descent_step_size\n17. _gradient_descent_max_iter\n18. _gradient_descent_min_iter\n19. _gradient_descent_step_length\n20. _gradient_descent_step_direction"}
{"mask": "first", "input": "networking_arista.common.<mask>_lib.tenant_provisioned(", "reference": "db", "full_reference": "networking_arista.common.db_lib.tenant_provisioned", "raw_gpt3.5": "1. vlan\n2. network\n3. security\n4. dhcp\n5. routing\n6. policy\n7. interface\n8. topology\n9. multicast\n10. forwarding\n11. protocol\n12. service\n13. access\n14. authentication\n15. encryption\n16. monitoring\n17. load_balancing\n18. discovery\n19. configuration\n20. logging"}
{"mask": "all", "input": "pyrocore.util.<mask>.path.getsize(", "reference": "os", "full_reference": "pyrocore.util.os.path.getsize", "raw_gpt3.5": "1. expanduser\n2. abspath\n3. basename\n4. dirname\n5. exists\n6. isabs\n7. isdir\n8. isfile\n9. islink\n10. join\n11. normcase\n12. normpath\n13. realpath\n14. relpath\n15. samefile\n16. sameopenfile\n17. samestat\n18. split\n19. splitdrive\n20. splitext"}
{"mask": "last", "input": "ding0.grid.mv_grid.mv_connect.mv_connect_st<mask>(", "reference": "ations", "full_reference": "ding0.grid.mv_grid.mv_connect.mv_connect_stations", "raw_gpt3.5": "1. atus\n2. ate\n3. ate_dict\n4. ate_list\n5. ate_string\n6. ate_tuple\n7. ate_type\n8. ate_error\n9. ate_error_list\n10. ate_error_string\n11. ate_error_tuple\n12. ate_error_dict\n13. ate_error_type\n14. ate_exception\n15. ate_exception_list\n16. ate_exception_string\n17. ate_exception_tuple\n18. ate_exception_dict\n19. ate_exception_type\n20. ate_exception_error"}
{"mask": "last", "input": "karaage.datastores.add_accounts_to_<mask>(", "reference": "project", "full_reference": "karaage.datastores.add_accounts_to_project", "raw_gpt3.5": "1. database\n2. datastore\n3. account\n4. group\n5. users\n6. list\n7. collection\n8. table\n9. entity\n10. cache\n11. store\n12. repository\n13. index\n14. schema\n15. queue\n16. bucket\n17. set\n18. map\n19. ledger\n20. registry"}
{"mask": "first", "input": "mne.<mask>iz.plot_compare_evokeds(", "reference": "v", "full_reference": "mne.viz.plot_compare_evokeds", "raw_gpt3.5": "1. grand\n2. group\n3. time\n4. spatial\n5. pair\n6. morph\n7. combine\n8. compute\n9. plot\n10. average\n11. contrast\n12. interpolate\n13. baseline\n14. set\n15. read\n16. write\n17. extract\n18. concatenate\n19. select\n20. set_bipolar_reference"}
{"mask": "all", "input": "<mask>.ExitHooks.append(", "reference": "state", "full_reference": "state.ExitHooks.append", "raw_gpt3.5": "1. atexit\n2. sys\n3. signal\n4. os\n5. threading\n6. multiprocessing\n7. platform\n8. ctypes\n9. gc\n10. asyncio\n11. logging\n12. importlib\n13. site\n14. builtins\n15. faulthandler\n16. inspect\n17. traceback\n18. warnings\n19. multiprocessing_logging\n20. multiprocessing_on_dill"}
{"mask": "first", "input": "<mask>2polarion.utils.get_unicode_str(", "reference": "dump", "full_reference": "dump2polarion.utils.get_unicode_str", "raw_gpt3.5": "1. from\n2. import\n3. polarion\n4. .utils\n5. .get_unicode_str(\n6. utils\n7. get_unicode_str(\n8. polarion.utils\n9. 2polarion\n10. 2polarion.utils\n11. get_unicode_str\n12. .get_unicode_str\n13. .utils.get_unicode_str\n14. polarion.utils.get_unicode_str\n15. 2polarion.utils.get_unicode_str(\n16. arion.utils.get_unicode_str(\n17. get_unicode_str(\n18. .get_unicode_str(\n19. polarion.utils.get_unicode_str(\n20. 2polarion.utils.get_unicode_str("}
{"mask": "first", "input": "<mask>vfs.vfs.fake_file_entry.FakeFileEntry(", "reference": "df", "full_reference": "dfvfs.vfs.fake_file_entry.FakeFileEntry", "raw_gpt3.5": "1. os\n2. pathlib\n3. shutil\n4. tarfile\n5. zipfile\n6. io\n7. tempfile\n8. logging\n9. stat\n10. fnmatch\n11. glob\n12. codecs\n13. datetime\n14. time\n15. calendar\n16. re\n17. json\n18. csv\n19. xml\n20. hashlib"}
{"mask": "first", "input": "hdx.utilities.version.<mask>_utils_version(", "reference": "get", "full_reference": "hdx.utilities.version.get_utils_version", "raw_gpt3.5": "1. major\n2. minor\n3. patch\n4. pre\n5. post\n6. dev\n7. release\n8. build\n9. metadata\n10. version_info\n11. version\n12. __version__\n13. __version_info__\n14. __version_info\n15. __version\n16. __build__\n17. __metadata__\n18. __release__\n19. __dev__\n20. __post__"}
{"mask": "first", "input": "<mask>cdlib.inode.Inode(", "reference": "py", "full_reference": "pycdlib.inode.Inode", "raw_gpt3.5": "1. get\n2. set\n3. is\n4. add\n5. remove\n6. to\n7. from\n8. has\n9. find\n10. create\n11. update\n12. delete\n13. replace\n14. traverse\n15. serialize\n16. deserialize\n17. initialize\n18. validate\n19. merge\n20. split"}
{"mask": "last", "input": "peri.opt.optimize.do_levmar<mask>(", "reference": "q", "full_reference": "peri.opt.optimize.do_levmarq", "raw_gpt3.5": "1. _step\n2. _iter\n3. _lm\n4. _jac\n5. _fcn\n6. _diag\n7. _qtf\n8. _cov\n9. _maxfev\n10. _ftol\n11. _xtol\n12. _gtol\n13. _epsfcn\n14. _factor\n15. _diag\n16. _nprint\n17. _stop\n18. _info\n19. _nfev\n20. _njev"}
{"mask": "all", "input": "<mask>.ComponentModel.PropertyChangedEventArgs(", "reference": "System", "full_reference": "System.ComponentModel.PropertyChangedEventArgs", "raw_gpt3.5": "1. System\n2. Microsoft\n3. Xamarin\n4. Unity\n5. JetBrains\n6. DevExpress\n7. Infragistics\n8. Telerik\n9. Syncfusion\n10. ComponentOne\n11. GrapeCity\n12. FarPoint\n13. Infragistics4\n14. Infragistics5\n15. Infragistics6\n16. Infragistics7\n17. Infragistics8\n18. Infragistics9\n19. Infragistics10\n20. Infragistics11"}
{"mask": "last", "input": "winappdbg.win<mask>.kernel32.GetProcessDEPPolicy(", "reference": "32", "full_reference": "winappdbg.win32.kernel32.GetProcessDEPPolicy", "raw_gpt3.5": "1. Version\n2. Debug\n3. Error\n4. Info\n5. Handle\n6. Memory\n7. Security\n8. Thread\n9. Object\n10. Event\n11. CriticalSection\n12. Semaphore\n13. Mutex\n14. File\n15. Directory\n16. Registry\n17. Service\n18. Process\n19. Module\n20. Console"}
{"mask": "last", "input": "scour.svg_regex.svg_<mask>.parse(", "reference": "parser", "full_reference": "scour.svg_regex.svg_parser.parse", "raw_gpt3.5": "1. path\n2. transform\n3. style\n4. color\n5. gradient\n6. pattern\n7. marker\n8. clip\n9. mask\n10. filter\n11. font\n12. text\n13. image\n14. defs\n15. use\n16. symbol\n17. viewbox\n18. preserveAspectRatio\n19. version\n20. metadata"}
{"mask": "last", "input": "QUANTAXIS.QAFetch.QA<mask>.QA_fetch_index_min(", "reference": "Query", "full_reference": "QUANTAXIS.QAFetch.QAQuery.QA_fetch_index_min", "raw_gpt3.5": "1. minute\n2. day\n3. week\n4. month\n5. year\n6. index\n7. stock\n8. future\n9. option\n10. etf\n11. bond\n12. commodity\n13. forex\n14. crypto\n15. HK_stock\n16. US_stock\n17. CN_stock\n18. JP_stock\n19. EU_stock\n20. Asia_stock"}
{"mask": "all", "input": "<mask>.reporting.json_reporter.JsonReporter(", "reference": "pants", "full_reference": "pants.reporting.json_reporter.JsonReporter", "raw_gpt3.5": "1. pandas\n2. numpy\n3. matplotlib\n4. seaborn\n5. sklearn\n6. tensorflow\n7. keras\n8. statsmodels\n9. bokeh\n10. plotly\n11. altair\n12. dash\n13. holoviews\n14. geopandas\n15. pyarrow\n16. xarray\n17. dask\n18. folium\n19. cartopy\n20. networkx"}
{"mask": "last", "input": "emds.data_structures.MarketOrder<mask>(", "reference": "List", "full_reference": "emds.data_structures.MarketOrderList", "raw_gpt3.5": "1. Type\n2. Book\n3. Request\n4. Entry\n5. Update\n6. Event\n7. Message\n8. Action\n9. Response\n10. Status\n11. Execution\n12. Cancel\n13. Replace\n14. Modify\n15. Acknowledge\n16. Reject\n17. Confirmation\n18. Notification\n19. Query\n20. Result"}
{"mask": "last", "input": "agentml.common.weighted_<mask>(", "reference": "choice", "full_reference": "agentml.common.weighted_choice", "raw_gpt3.5": "1. choice\n2. sample\n3. select\n4. shuffle\n5. random\n6. distribution\n7. probability\n8. multinomial\n9. categorical\n10. generator\n11. index\n12. set\n13. vector\n14. array\n15. list\n16. dict\n17. tuple\n18. sequence\n19. element\n20. item"}
{"mask": "all", "input": "pytwis_constants.ERROR_USERNAME_NOT_EXIST_FORMAT.<mask>(", "reference": "format", "full_reference": "pytwis_constants.ERROR_USERNAME_NOT_EXIST_FORMAT.format", "raw_gpt3.5": "1. code\n2. message\n3. args\n4. format\n5. __str__\n6. __repr__\n7. __init__\n8. __doc__\n9. __module__\n10. __dict__\n11. __weakref__\n12. __format__\n13. __sizeof__\n14. __class__\n15. __subclasshook__\n16. __getattribute__\n17. __setattr__\n18. __delattr__\n19. __lt__\n20. __le__"}
{"mask": "first", "input": "argiope.utils.<mask>_to_string(", "reference": "list", "full_reference": "argiope.utils.list_to_string", "raw_gpt3.5": "1. object\n2. dict\n3. list\n4. tuple\n5. set\n6. int\n7. float\n8. complex\n9. str\n10. bytes\n11. bytearray\n12. memoryview\n13. bool\n14. frozenset\n15. slice\n16. range\n17. deque\n18. Counter\n19. OrderedDict\n20. defaultdict"}
{"mask": "first", "input": "<mask>_framework_fine_permissions.models.FieldPermission(", "reference": "rest", "full_reference": "rest_framework_fine_permissions.models.FieldPermission", "raw_gpt3.5": "1. django\n2. flask\n3. pyramid\n4. tornado\n5. bottle\n6. web2py\n7. cherrypy\n8. falcon\n9. aiohttp\n10. sanic\n11. hug\n12. fastapi\n13. quart\n14. responder\n15. starlette\n16. klein\n17. web.py\n18. bocadillo\n19. morepath\n20. vibora"}
{"mask": "first", "input": "openquake.<mask>elib.datastore.read(", "reference": "bas", "full_reference": "openquake.baselib.datastore.read", "raw_gpt3.5": "1. core\n2. hazard\n3. risk\n4. vulnerability\n5. exposure\n6. calculation\n7. validation\n8. model\n9. config\n10. utils\n11. io\n12. gui\n13. workflow\n14. analysis\n15. engine\n16. nrml\n17. nrml_input\n18. nrml_output\n19. nrml_models\n20. nrml_validation"}
{"mask": "last", "input": "ging<mask>.trcalc.rotate_coord(", "reference": "a", "full_reference": "ginga.trcalc.rotate_coord", "raw_gpt3.5": "1. ginga.util.trcalc.rotate_coord(\n2. ginga.util.trcalc.rotate_coord_deg(\n3. ginga.util.trcalc.rotate_pt(\n4. ginga.util.trcalc.rotate_pt_deg(\n5. ginga.util.trcalc.rotate_poly(\n6. ginga.util.trcalc.rotate_poly_deg(\n7. ginga.util.trcalc.rotate_pt_list(\n8. ginga.util.trcalc.rotate_pt_list_deg(\n9. ginga.util.trcalc.rotate_pt_arr(\n10. ginga.util.trcalc.rotate_pt_arr_deg(\n11. ginga.util.trcalc.rotate_poly_arr(\n12. ginga.util.trcalc.rotate_poly_arr_deg(\n13. ginga.util.trcalc.rotate_pt_list_arr(\n14. ginga.util.trcalc.rotate_pt_list_arr_deg(\n15. ginga.util.trcalc.rotate_coord_arr(\n16. ginga.util.trcalc.rotate_coord_arr_deg(\n17. ginga.util.trcalc.rotate_poly_coord(\n18. ginga.util.trcalc.rotate_poly_coord_deg(\n19. ginga.util.trcalc.rotate_pt_list_coord(\n20. ginga.util.trcalc.rotate_pt_list_coord_deg("}
{"mask": "first", "input": "<mask>isper.info(", "reference": "wh", "full_reference": "whisper.info", "raw_gpt3.5": "1. j\n2. k\n3. l\n4. m\n5. n\n6. o\n7. p\n8. q\n9. r\n10. s\n11. t\n12. u\n13. v\n14. w\n15. x\n16. y\n17. z\n18. a\n19. b\n20. c"}
{"mask": "last", "input": "yadlt.core.L<mask>.linear(", "reference": "ayers", "full_reference": "yadlt.core.Layers.linear", "raw_gpt3.5": "1. layer\n2. oss\n3. ist\n4. oad\n5. ista\n6. oad_data\n7. oad_weights\n8. oad_model\n9. oad_yaml\n10. oad_json\n11. oad_hdf5\n12. oad_npz\n13. oad_pickle\n14. oad_mat\n15. oad_csv\n16. oad_txt\n17. oad_image\n18. oad_video\n19. oad_audio\n20. oad_tensor"}
{"mask": "first", "input": "<mask>raf.iraf.countrate(", "reference": "py", "full_reference": "pyraf.iraf.countrate", "raw_gpt3.5": "1. imutil\n2. daophot\n3. photutils\n4. pyraf\n5. stsci\n6. iraf\n7. fits\n8. astropy\n9. numpy\n10. scipy\n11. pyfits\n12. wcs\n13. pyregion\n14. pyds9\n15. pywcs\n16. pyraf.iraf\n17. pyraf.irafutil\n18. pyraf.iraffunctions\n19. pyraf.irafglobals\n20. pyraf.irafexecute"}
{"mask": "first", "input": "<mask>er.reporting.utils.print_test_msg(", "reference": "spect", "full_reference": "specter.reporting.utils.print_test_msg", "raw_gpt3.5": "1. log\n2. debug\n3. info\n4. warn\n5. error\n6. critical\n7. trace\n8. verbose\n9. display\n10. show\n11. write\n12. print\n13. output\n14. send\n15. emit\n16. announce\n17. broadcast\n18. publish\n19. notify\n20. message"}
{"mask": "all", "input": "pdfminer.<mask>.LAParams(", "reference": "layout", "full_reference": "pdfminer.layout.LAParams", "raw_gpt3.5": "1. line\n2. char\n3. box\n4. text\n5. word\n6. margin\n7. all_texts\n8. boxes\n9. paragraphs\n10. curve\n11. dash\n12. horizontal\n13. intersect\n14. line_overlap\n15. line_margin\n16. line_scale\n17. line_overlap_rescale\n18. line_miter_limit\n19. line_cap_style\n20. line_join_style"}
{"mask": "all", "input": "<mask>.cloud.iot_v1.proto.device_manager_pb2.BindDeviceToGatewayRequest(", "reference": "google", "full_reference": "google.cloud.iot_v1.proto.device_manager_pb2.BindDeviceToGatewayRequest", "raw_gpt3.5": "1. google\n2. aws\n3. azure\n4. ibm\n5. alibaba\n6. tencent\n7. oracle\n8. digitalocean\n9. rackspace\n10. linode\n11. vultr\n12. scaleway\n13. hetzner\n14. upcloud\n15. cloudsigma\n16. gcp\n17. cloudflare\n18. heroku\n19. openstack\n20. kubernetes"}
{"mask": "first", "input": "tensorflow.contrib.all_reduce.python.<mask>_reduce.build_nccl_then_shuffle(", "reference": "all", "full_reference": "tensorflow.contrib.all_reduce.python.all_reduce.build_nccl_then_shuffle", "raw_gpt3.5": "1. gpu\n2. mpi\n3. ring\n4. hierarchical\n5. tree\n6. interleave\n7. parallel\n8. group\n9. pairwise\n10. cross\n11. intra\n12. inter\n13. all\n14. collective\n15. multi\n16. hybrid\n17. distributed\n18. async\n19. barrier\n20. shuffle"}
{"mask": "first", "input": "uliweb.orm.<mask>_model(", "reference": "get", "full_reference": "uliweb.orm.get_model", "raw_gpt3.5": "1. create\n2. get\n3. update\n4. delete\n5. find\n6. count\n7. filter\n8. query\n9. save\n10. load\n11. select\n12. join\n13. group\n14. order\n15. distinct\n16. aggregate\n17. annotate\n18. exclude\n19. values\n20. raw"}
{"mask": "first", "input": "<mask>box.Datasets(", "reference": "map", "full_reference": "mapbox.Datasets", "raw_gpt3.5": "1. fairbox.Datasets(\n2. lightbox.Datasets(\n3. darkbox.Datasets(\n4. deepbox.Datasets(\n5. firebox.Datasets(\n6. skybox.Datasets(\n7. icebox.Datasets(\n8. toolobox.Datasets(\n9. starbox.Datasets(\n10. sunbox.Datasets(\n11. moonbox.Datasets(\n12. sandobox.Datasets(\n13. woodbox.Datasets(\n14. metalbox.Datasets(\n15. stonebox.Datasets(\n16. glassbox.Datasets(\n17. treasurebox.Datasets(\n18. giftbox.Datasets(\n19. magicbox.Datasets(\n20. mysterybox.Datasets("}
{"mask": "first", "input": "aikif.toolbox.<mask>_tools.download_file_no_logon(", "reference": "network", "full_reference": "aikif.toolbox.network_tools.download_file_no_logon", "raw_gpt3.5": "1. s3\n2. ftp\n3. http\n4. google\n5. azure\n6. aws\n7. gcp\n8. file\n9. ssh\n10. url\n11. git\n12. dropbox\n13. box\n14. onedrive\n15. hdfs\n16. local\n17. nfs\n18. smb\n19. webdav\n20. ftps"}
{"mask": "first", "input": "nni.<mask>morphism_tuner.layer_transformer.wider_next_conv(", "reference": "network", "full_reference": "nni.networkmorphism_tuner.layer_transformer.wider_next_conv", "raw_gpt3.5": "1. block\n2. conv\n3. depthwise\n4. group\n5. kernel\n6. dilation\n7. stride\n8. padding\n9. activation\n10. normalization\n11. dropout\n12. pooling\n13. upsampling\n14. resize\n15. concatenate\n16. split\n17. shuffle\n18. squeeze\n19. expand\n20. quantization"}
{"mask": "last", "input": "nodes<mask>.core.nodes.models.Node.objects.get(", "reference": "hot", "full_reference": "nodeshot.core.nodes.models.Node.objects.get", "raw_gpt3.5": "1. _meta\n2. _base_manager\n3. _default_manager\n4. _get_next_or_previous_by_FIELD\n5. _get_next_or_previous_in_order\n6. _get_pk_val\n7. _get_unique_checks\n8. _meta\n9. _perform_date_checks\n10. _perform_unique_checks\n11. _save_parents\n12. _save_table\n13. _set_pk_val\n14. _state\n15. _unique_checks\n16. _update\n17. _validate_unique\n18. _when_mentioned\n19. _with_transaction\n20. _wrapped_save"}
{"mask": "first", "input": "gluonnlp.data.<mask>ify.EmbeddingCenterContextBatchify(", "reference": "batch", "full_reference": "gluonnlp.data.batchify.EmbeddingCenterContextBatchify", "raw_gpt3.5": "1. str\n2. int\n3. list\n4. tuple\n5. dict\n6. numpy\n7. mxnet\n8. torch\n9. tensorflow\n10. json\n11. yaml\n12. csv\n13. xml\n14. html\n15. text\n16. image\n17. audio\n18. video\n19. binary\n20. unicode"}
{"mask": "first", "input": "urh.cythonext.signal_functions.<mask>_pulse_lens(", "reference": "grab", "full_reference": "urh.cythonext.signal_functions.grab_pulse_lens", "raw_gpt3.5": "1. get\n2. set\n3. compute\n4. find\n5. update\n6. calculate\n7. estimate\n8. determine\n9. analyze\n10. measure\n11. generate\n12. plot\n13. smooth\n14. interpolate\n15. fit\n16. convolve\n17. normalize\n18. resample\n19. detect\n20. process"}
{"mask": "first", "input": "renku.models.<mask>json.dumps(", "reference": "_", "full_reference": "renku.models._json.dumps", "raw_gpt3.5": "1. project\n2. user\n3. dataset\n4. workflow\n5. environment\n6. activity\n7. collaborator\n8. file\n9. group\n10. job\n11. namespace\n12. note\n13. parameter\n14. plan\n15. process\n16. runner\n17. secret\n18. tag\n19. template\n20. version"}
{"mask": "last", "input": "rauth.utils.OAuth2<mask>(", "reference": "Auth", "full_reference": "rauth.utils.OAuth2Auth", "raw_gpt3.5": "1. Auth\n2. Session\n3. Token\n4. Client\n5. Grant\n6. Provider\n7. Error\n8. Backend\n9. Service\n10. Flow\n11. Credentials\n12. Config\n13. Request\n14. Response\n15. ClientMixin\n16. AccessToken\n17. RefreshToken\n18. Authorization\n19. ClientCredentials\n20. ImplicitGrant"}
{"mask": "all", "input": "nptdms.<mask>.Uint64.read(", "reference": "types", "full_reference": "nptdms.types.Uint64.read", "raw_gpt3.5": "1. channel\n2. group\n3. file\n4. dataset\n5. metadata\n6. attribute\n7. dimension\n8. index\n9. block\n10. buffer\n11. chunk\n12. data\n13. dtype\n14. endian\n15. format\n16. header\n17. length\n18. offset\n19. shape\n20. size"}
{"mask": "all", "input": "burrito.<mask>.ApplicationNotFoundError(", "reference": "util", "full_reference": "burrito.util.ApplicationNotFoundError", "raw_gpt3.5": "1. name\n2. version\n3. package\n4. module\n5. path\n6. file\n7. directory\n8. config\n9. settings\n10. environment\n11. runtime\n12. platform\n13. system\n14. process\n15. thread\n16. exception\n17. error\n18. warning\n19. info\n20. debug"}
{"mask": "last", "input": "mo_json.encoder.Unicode<mask>(", "reference": "Builder", "full_reference": "mo_json.encoder.UnicodeBuilder", "raw_gpt3.5": "1. Escape\n2. EscapeN\n3. EscapeNonAscii\n4. EscapeNonAsciiN\n5. EscapeSurrogates\n6. EscapeSurrogatesN\n7. EscapeUTF8\n8. EscapeUTF8N\n9. EscapeWide\n10. EscapeWideN\n11. EscapeX\n12. EscapeXN\n13. EscapeYAML\n14. EscapeYAMLN\n15. Unescape\n16. UnescapeN\n17. UnescapeUTF8\n18. UnescapeUTF8N\n19. UnescapeWide\n20. UnescapeWideN"}
{"mask": "last", "input": "_swigib<mask>.EClientSocketBase_reqMktData(", "reference": "py", "full_reference": "_swigibpy.EClientSocketBase_reqMktData", "raw_gpt3.5": "1. on\n2. ler\n3. ity\n4. at\n5. nfo\n6. ize\n7. ack\n8. ound\n9. ead\n10. ool\n11. ert\n12. age\n13. uff\n14. eturn\n15. ertificates\n16. nitialize\n17. nterface\n18. nstance\n19. nput\n20. nvalidate"}
{"mask": "first", "input": "<mask>cloud.api.get_config_template(", "reference": "fire", "full_reference": "firecloud.api.get_config_template", "raw_gpt3.5": "1. google\n2. aws\n3. azure\n4. openstack\n5. ibm\n6. digitalocean\n7. rackspace\n8. vultr\n9. linode\n10. oracle\n11. alibaba\n12. cloudscale\n13. cloudsigma\n14. cloudstack\n15. eucalyptus\n16. flexiant\n17. joyent\n18. nimbula\n19. ovh\n20. profitbricks"}
{"mask": "last", "input": "mp<mask>.mpfr_nan_p(", "reference": "fr", "full_reference": "mpfr.mpfr_nan_p", "raw_gpt3.5": "1. isnan\n2. isinf\n3. isfinite\n4. isna\n5. isnull\n6. is_nan\n7. is_inf\n8. is_finite\n9. is_not_nan\n10. is_not_inf\n11. is_not_finite\n12. is_notna\n13. is_not_null\n14. is_not_nan_p\n15. is_not_inf_p\n16. is_not_finite_p\n17. is_notna_p\n18. is_not_null_p\n19. is_not_nan_or_inf\n20. is_not_nan_or_inf_p"}
{"mask": "last", "input": "networking_cisco._i18n._<mask>(", "reference": "LE", "full_reference": "networking_cisco._i18n._LE", "raw_gpt3.5": "1. gettext\n2. ngettext\n3. lgettext\n4. lngettext\n5. dgettext\n6. dngettext\n7. ugettext\n8. ungettext\n9. find\n10. bindtextdomain\n11. textdomain\n12. bind_textdomain_codeset\n13. install\n14. uninstall\n15. bind\n16. domain\n17. bindtextdomain_codeset\n18. bind_textdomain_codeset\n19. bind_textdomain_codeset\n20. bind_textdomain_codeset"}
{"mask": "last", "input": "openht<mask>.output.proto.guzzle_pb2.TestRunEnvelope(", "reference": "f", "full_reference": "openhtf.output.proto.guzzle_pb2.TestRunEnvelope", "raw_gpt3.5": "1. .client\n2. .common\n3. .config\n4. .connection\n5. .core\n6. .crypto\n7. .data\n8. .debug\n9. .decorators\n10. .exceptions\n11. .file\n12. .format\n13. .http\n14. .io\n15. .json\n16. .logging\n17. .message\n18. .model\n19. .net\n20. .parser"}
{"mask": "last", "input": "synapse.lib.msg<mask>.un(", "reference": "pack", "full_reference": "synapse.lib.msgpack.un", "raw_gpt3.5": "1. id\n2. pack\n3. packb\n4. pack_into\n5. unpack\n6. unpack_from\n7. pack_into\n8. packb\n9. pack\n10. unpack\n11. unpack_from\n12. pack_into\n13. packb\n14. pack\n15. unpack\n16. unpack_from\n17. pack_into\n18. packb\n19. pack\n20. unpack"}
{"mask": "first", "input": "epic.windows.count.<mask>_reads_in_windows.count_reads_in_windows_paired_end(", "reference": "count", "full_reference": "epic.windows.count.count_reads_in_windows.count_reads_in_windows_paired_end", "raw_gpt3.5": "1. paired\n2. single\n3. mapped\n4. unmapped\n5. total\n6. unique\n7. duplicate\n8. primary\n9. secondary\n10. aligned\n11. unaligned\n12. forward\n13. reverse\n14. quality\n15. trimmed\n16. untrimmed\n17. filtered\n18. unfiltered\n19. merged\n20. unmerged"}
{"mask": "last", "input": "n<mask>.utils.Binding.PropertyBinding(", "reference": "ion", "full_reference": "nion.utils.Binding.PropertyBinding", "raw_gpt3.5": "1. net\n2. numpy\n3. pandas\n4. neo4j\n5. nltk\n6. numba\n7. natsort\n8. nipy\n9. nlopt\n10. nbsphinx\n11. nglview\n12. nilearn\n13. nbsphinx\n14. nbsphinx\n15. nbsphinx\n16. nbsphinx\n17. nbsphinx\n18. nbsphinx\n19. nbsphinx\n20. nbsphinx"}
{"mask": "last", "input": "pyof.foundation.basic_<mask>.UBInt32(", "reference": "types", "full_reference": "pyof.foundation.basic_types.UBInt32", "raw_gpt3.5": "1. Type\n2. Int\n3. UInt\n4. 8\n5. 16\n6. 32\n7. 64\n8. BE\n9. LE\n10. Bytes\n11. String\n12. Float\n13. Double\n14. Long\n15. Short\n16. Char\n17. Word\n18. DWord\n19. QWord\n20. Signed"}
{"mask": "first", "input": "abilian.services.<mask>_service.init_app(", "reference": "auth", "full_reference": "abilian.services.auth_service.init_app", "raw_gpt3.5": "1. document\n2. user\n3. group\n4. task\n5. project\n6. workflow\n7. notification\n8. search\n9. tag\n10. comment\n11. file\n12. mail\n13. calendar\n14. chat\n15. forum\n16. wiki\n17. blog\n18. bookmark\n19. contact\n20. dashboard"}
{"mask": "last", "input": "alignak.contactdownt<mask>.ContactDowntime(", "reference": "ime", "full_reference": "alignak.contactdowntime.ContactDowntime", "raw_gpt3.5": "1. ime\n2. imeHandler\n3. imeHandlerFactory\n4. imeHandlerFactoryImpl\n5. imeHandlerFactoryImplBase\n6. imeHandlerFactoryImplBaseClass\n7. imeHandlerFactoryImplBaseClassMethod\n8. imeHandlerFactoryImplBaseClassMethodWrapper\n9. imeHandlerFactoryImplBaseClassMethodWrapperDescriptor\n10. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGet\n11. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSet\n12. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDelete\n13. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDict\n14. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItems\n15. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIter\n16. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIterKeys\n17. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIterKeysValues\n18. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIterKeysValuesNext\n19. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIterKeysValuesNextStopIteration\n20. imeHandlerFactoryImplBaseClassMethodWrapperDescriptorGetSetDeleteDictItemsIterKeysValuesNextStopIterationException"}
{"mask": "all", "input": "<mask>.ListCtrl.DeleteItem(", "reference": "wx", "full_reference": "wx.ListCtrl.DeleteItem", "raw_gpt3.5": "1. wx\n2. PyQt5\n3. tkinter\n4. PySide2\n5. wxPython\n6. PyQt4\n7. PyGTK\n8. PySide\n9. wx.lib\n10. wx.grid\n11. wx.html\n12. wx.adv\n13. wx.dataviewctrl\n14. wx.gizmos\n15. wx.lib.agw\n16. wx.lib.mixins\n17. wx.lib.masked\n18. wx.lib.plot\n19. wx.lib.scrolledpanel\n20. wx.lib.sheet"}
{"mask": "last", "input": "world<mask>.common.get_verbose(", "reference": "engine", "full_reference": "worldengine.common.get_verbose", "raw_gpt3.5": "1. logger\n2. config\n3. util\n4. settings\n5. message\n6. context\n7. exception\n8. data\n9. security\n10. request\n11. middleware\n12. protocol\n13. serialization\n14. storage\n15. resource\n16. validation\n17. transport\n18. discovery\n19. metrics\n20. tracing"}
{"mask": "first", "input": "<mask>2.estimateRigidTransform(", "reference": "cv", "full_reference": "cv2.estimateRigidTransform", "raw_gpt3.5": "1. cv2\n2. skimage\n3. mahotas\n4. SimpleITK\n5. imutils\n6. scipy\n7. dipy\n8. scikit-image\n9. skimage.transform\n10. skimage.registration\n11. cv2.estimateAffine2D\n12. cv2.estimateAffinePartial2D\n13. cv2.estimateRigidTransform\n14. cv2.estimateAffine3D\n15. cv2.estimateAffinePartial3D\n16. skimage.transform.estimate_transform\n17. skimage.transform.estimate_transform_similarity\n18. skimage.transform.estimate_transform_affine\n19. skimage.registration.phase_cross_correlation\n20. skimage.registration.optical_flow_ilk"}
{"mask": "first", "input": "libxml2mod.<mask>EncodeSpecialChars(", "reference": "xml", "full_reference": "libxml2mod.xmlEncodeSpecialChars", "raw_gpt3.5": "1. xml\n2. utf\n3. char\n4. html\n5. text\n6. entity\n7. escape\n8. encode\n9. special\n10. charRef\n11. quote\n12. amp\n13. lt\n14. gt\n15. quot\n16. apos\n17. unicode\n18. hex\n19. decimal\n20. numeric"}
{"mask": "first", "input": "pysnmp.error.<mask>SnmpError(", "reference": "Py", "full_reference": "pysnmp.error.PySnmpError", "raw_gpt3.5": "1. NoSuchInstance\n2. NoSuchObject\n3. GenError\n4. EndOfMibView\n5. TooBig\n6. AuthenticationError\n7. NotWritableError\n8. NotInTimeWindow\n9. UnknownSecurityModel\n10. UnknownPDUHandler\n11. UnknownCommunityError\n12. UnknownEngineID\n13. UnknownUserError\n14. UnknownContextError\n15. UnknownNotificationType\n16. UnknownScopedPDU\n17. UnknownSecurityLevel\n18. UnknownSNMPVersion\n19. UnknownCommandResponder\n20. UnknownAccessModeError"}
{"mask": "last", "input": "pyVmomi.vim.VsanClusterConfig<mask>(", "reference": "Info", "full_reference": "pyVmomi.vim.VsanClusterConfigInfo", "raw_gpt3.5": "1. System\n2. Spec\n3. Info\n4. Result\n5. State\n6. Status\n7. Option\n8. Capability\n9. Profile\n10. Property\n11. Health\n12. Cluster\n13. Network\n14. Service\n15. Storage\n16. Encryption\n17. Advanced\n18. Performance\n19. Compliance\n20. Maintenance"}
{"mask": "last", "input": "sphinx.util.i18<mask>.format_date(", "reference": "n", "full_reference": "sphinx.util.i18n.format_date", "raw_gpt3.5": "1. _parse\n2. _format\n3. _get_locale\n4. _get_date_format\n5. _get_time_format\n6. _get_datetime_format\n7. _get_timezone_name\n8. _get_timezone_offset\n9. _get_timezone_abbr\n10. _get_timezone\n11. _get_day_name\n12. _get_month_name\n13. _get_ordinal_suffix\n14. _get_weekday\n15. _get_month\n16. _get_quarter\n17. _get_year\n18. _get_hour\n19. _get_minute\n20. _get_second"}
{"mask": "last", "input": "sing<mask>.logger.bot.debug(", "reference": "ularity", "full_reference": "singularity.logger.bot.debug", "raw_gpt3.5": "1. singularity\n2. singing\n3. single\n4. singed\n5. singlet\n6. singeing\n7. singable\n8. singingly\n9. singleness\n10. singultus\n11. singultous\n12. singult\n13. singultory\n14. singultiform\n15. singultation\n16. singultousness\n17. singultuslike\n18. singultiformly\n19. singultiformity\n20. singultousnesses"}
{"mask": "first", "input": "azure.<mask>hub.common.EventData(", "reference": "event", "full_reference": "azure.eventhub.common.EventData", "raw_gpt3.5": "1. partition\n2. event\n3. receiver\n4. checkpoint\n5. sender\n6. connection\n7. client\n8. serializer\n9. error\n10. handler\n11. message\n12. policy\n13. transport\n14. credentials\n15. tracing\n16. logging\n17. protocol\n18. security\n19. utils\n20. exceptions"}
{"mask": "first", "input": "<mask>l.util.conj_exponent(", "reference": "od", "full_reference": "odl.util.conj_exponent", "raw_gpt3.5": "1. np\n2. scipy\n3. torch\n4. mxnet\n5. cupy\n6. jax\n7. chainer\n8. tensorflow\n9. keras\n10. sklearn\n11. pandas\n12. statsmodels\n13. sympy\n14. theano\n15. dgl\n16. mxboard\n17. mxnet.ndarray\n18. mxnet.gluon\n19. mxnet.autograd\n20. mxnet.contrib"}
{"mask": "last", "input": "mo_math.vendor.strangman.p<mask>.unique(", "reference": "stat", "full_reference": "mo_math.vendor.strangman.pstat.unique", "raw_gpt3.5": "1. prefix\n2. package\n3. parser\n4. path\n5. pattern\n6. pickle\n7. platform\n8. plugin\n9. pool\n10. port\n11. post\n12. process\n13. property\n14. provider\n15. proxy\n16. pubsub\n17. py\n18. py3\n19. pygments\n20. pylab"}
{"mask": "last", "input": "official.utils.flags.core.help_<mask>(", "reference": "wrap", "full_reference": "official.utils.flags.core.help_wrap", "raw_gpt3.5": "1. formatter\n2. text\n3. options\n4. message\n5. command\n6. output\n7. topic\n8. info\n9. data\n10. prompt\n11. usage\n12. error\n13. description\n14. arguments\n15. examples\n16. version\n17. header\n18. footer\n19. width\n20. indent"}
{"mask": "last", "input": "bcb<mask>.variation.validate.get_analysis_intervals(", "reference": "io", "full_reference": "bcbio.variation.validate.get_analysis_intervals", "raw_gpt3.5": "1. _core\n2. _utils\n3. _variation\n4. _analysis\n5. _intervals\n6. _data\n7. _io\n8. _config\n9. _logging\n10. _exceptions\n11. _constants\n12. _models\n13. _metrics\n14. _plotting\n15. _stats\n16. _filters\n17. _tools\n18. _tests\n19. _gui\n20. _api"}
{"mask": "all", "input": "hpOneView.resources.<mask>.appliance_device_snmp_v3_users.ApplianceDeviceSNMPv3Users(", "reference": "settings", "full_reference": "hpOneView.resources.settings.appliance_device_snmp_v3_users.ApplianceDeviceSNMPv3Users", "raw_gpt3.5": "1. appliance\n2. device\n3. snmp\n4. v3\n5. users\n6. appliance_device\n7. appliance_device_snmp\n8. appliance_device_snmp_v3\n9. appliance_device_snmp_v3_user\n10. appliance_device_snmp_v3_users\n11. appliance_device_snmp_v3_user_group\n12. appliance_device_snmp_v3_user_groups\n13. appliance_device_snmp_v3_user_name\n14. appliance_device_snmp_v3_user_names\n15. appliance_device_snmp_v3_user_password\n16. appliance_device_snmp_v3_user_passwords\n17. appliance_device_snmp_v3_user_privilege\n18. appliance_device_snmp_v3_user_privileges\n19. appliance_device_snmp_v3_user_security_level\n20. appliance_device_snmp_v3_user_security_levels"}
{"mask": "all", "input": "django.<mask>.serializers.serialize(", "reference": "core", "full_reference": "django.core.serializers.serialize", "raw_gpt3.5": "1. data\n2. queryset\n3. model\n4. fields\n5. format\n6. stream\n7. use_natural_primary_keys\n8. use_natural_foreign_keys\n9. indent\n10. key_transforms\n11. extras\n12. ignorenonexistent\n13. use_cache\n14. version\n15. ensure_ascii\n16. allow_nan\n17. cls\n18. **options\n19. ) \n20. -> Union[str, bytes]"}
{"mask": "all", "input": "taggit.models.<mask>.objects.filter(", "reference": "Tag", "full_reference": "taggit.models.Tag.objects.filter", "raw_gpt3.5": "1. tag\n2. Tag\n3. taggable\n4. Taggable\n5. tagged\n6. Tagged\n7. taggit\n8. Taggit\n9. taggit_tag\n10. Taggit_tag\n11. taggit_tagged\n12. Taggit_tagged\n13. taggit_taggeditem\n14. Taggit_taggeditem\n15. taggit_taggeditem_manager\n16. Taggit_taggeditem_manager\n17. taggit_taggeditem_query\n18. Taggit_taggeditem_query\n19. taggit_taggeditem_queryset\n20. Taggit_taggeditem_queryset"}
{"mask": "first", "input": "pmagpy.<mask>ag.add_flag(", "reference": "pm", "full_reference": "pmagpy.pmag.add_flag", "raw_gpt3.5": "1. di\n2. in\n3. ma\n4. re\n5. co\n6. de\n7. up\n8. get\n9. set\n10. is\n11. to\n12. on\n13. fi\n14. ap\n15. cl\n16. ex\n17. lo\n18. ov\n19. rea\n20. rem"}
{"mask": "all", "input": "coverage.<mask>.PathAliases(", "reference": "files", "full_reference": "coverage.files.PathAliases", "raw_gpt3.5": "1. _get\n2. _set\n3. _delete\n4. _update\n5. _add\n6. _remove\n7. _clear\n8. _keys\n9. _values\n10. _items\n11. _contains\n12. _len\n13. _iter\n14. _eq\n15. _ne\n16. _hash\n17. _repr\n18. _str\n19. _doc\n20. _module"}
{"mask": "first", "input": "pyquil.api._devices.<mask>_lattices(", "reference": "list", "full_reference": "pyquil.api._devices.list_lattices", "raw_gpt3.5": "1. get\n2. get_all\n3. get_lattice\n4. get_lattice_names\n5. get_lattice_by_name\n6. get_lattice_by_shape\n7. get_lattice_by_type\n8. get_lattice_by_size\n9. get_lattice_by_dimension\n10. get_lattice_by_topology\n11. get_lattice_by_geometry\n12. get_lattice_by_structure\n13. get_lattice_by_material\n14. get_lattice_by_properties\n15. get_lattice_by_parameters\n16. get_lattice_by_constraints\n17. get_lattice_by_energy\n18. get_lattice_by_distance\n19. get_lattice_by_angle\n20. get_lattice_by_orientation"}
{"mask": "last", "input": "wal_e.pipebuf.NonBlockBuffered<mask>(", "reference": "Writer", "full_reference": "wal_e.pipebuf.NonBlockBufferedWriter", "raw_gpt3.5": "1. Reader\n2. Writer\n3. Stream\n4. Input\n5. Output\n6. Buffer\n7. File\n8. Socket\n9. Pipe\n10. Channel\n11. Streamer\n12. Transport\n13. Connection\n14. Data\n15. Packet\n16. Message\n17. Queue\n18. Handler\n19. Filter\n20. Protocol"}
{"mask": "last", "input": "jsonextended.edict.flatten2<mask>(", "reference": "d", "full_reference": "jsonextended.edict.flatten2d", "raw_gpt3.5": "1. _dict\n2. _keys\n3. _values\n4. _items\n5. _dicts\n6. _flatten\n7. _flatten_dict\n8. _flatten_list\n9. _flatten_tuple\n10. _flatten_set\n11. _flatten_frozenset\n12. _flatten_ordereddict\n13. _flatten_defaultdict\n14. _flatten_counter\n15. _flatten_chainmap\n16. _flatten_deque\n17. _flatten_userdict\n18. _flatten_userlist\n19. _flatten_userstring\n20. _flatten_userkeyedtuple"}
{"mask": "last", "input": "tensorflow_<mask>.apis.classification_pb2.ClassificationResponse(", "reference": "serving", "full_reference": "tensorflow_serving.apis.classification_pb2.ClassificationResponse", "raw_gpt3.5": "1. predict\n2. serving\n3. estimator\n4. contrib\n5. hub\n6. data\n7. feature_column\n8. keras\n9. lite\n10. summary\n11. tools\n12. version\n13. gpu\n14. autograph\n15. eager\n16. io\n17. saved_model\n18. training\n19. distribute\n20. probability"}
{"mask": "all", "input": "iotile.<mask>.SensorGraph(", "reference": "sg", "full_reference": "iotile.sg.SensorGraph", "raw_gpt3.5": "1. data\n2. graph\n3. sensor\n4. time\n5. plot\n6. stream\n7. signal\n8. display\n9. chart\n10. visualization\n11. analysis\n12. dashboard\n13. module\n14. device\n15. event\n16. log\n17. anomaly\n18. trend\n19. report\n20. summary"}
{"mask": "last", "input": "xmlrpclib.Multi<mask>(", "reference": "Call", "full_reference": "xmlrpclib.MultiCall", "raw_gpt3.5": "1. Call\n2. CallIterator\n3. CallResult\n4. CallError\n5. CallTimeout\n6. CallQueue\n7. CallAsync\n8. CallProxy\n9. CallWrapper\n10. CallHandler\n11. CallBuilder\n12. CallDecorator\n13. CallFactory\n14. CallManager\n15. CallRecorder\n16. CallSerializer\n17. CallTransport\n18. CallUnwrapper\n19. CallValidator\n20. CallWrapperMixin"}
{"mask": "first", "input": "dash.Dash.layout.<mask>set(", "reference": "f", "full_reference": "dash.Dash.layout.fset", "raw_gpt3.5": "1. children\n2. style\n3. props\n4. id\n5. className\n6. config\n7. meta_tags\n8. title\n9. update_title\n10. update_meta_tags\n11. update_config\n12. update_props\n13. update_children\n14. get_component\n15. get_all_dash_components\n16. get_all_dash_component_classes\n17. get_all_dash_component_suites\n18. get_all_dash_components_with_metadata\n19. get_all_dash_component_classes_with_metadata\n20. get_all_dash_component_suites_with_metadata"}
{"mask": "last", "input": "pysrt.SubRip<mask>(", "reference": "Time", "full_reference": "pysrt.SubRipTime", "raw_gpt3.5": "1. File\n2. Item\n3. Time\n4. Index\n5. Parser\n6. Writer\n7. Error\n8. Line\n9. Text\n10. Caption\n11. Event\n12. Block\n13. Style\n14. Format\n15. Segment\n16. Duration\n17. Timecode\n18. Timestamp\n19. Encoding\n20. Language"}
{"mask": "all", "input": "snet_cli.<mask>.proto.unixfs_pb2.Data(", "reference": "resources", "full_reference": "snet_cli.resources.proto.unixfs_pb2.Data", "raw_gpt3.5": "1. CID\n2. Multihash\n3. Unixfs\n4. Dag\n5. Merkle\n6. Block\n7. Proto\n8. Cbor\n9. Ipld\n10. Resolver\n11. Path\n12. Mfs\n13. Pin\n14. Pinning\n15. Ipfs\n16. Peer\n17. Libp2p\n18. Crypto\n19. Keystore\n20. Identity"}
{"mask": "last", "input": "configparser.DuplicateSection<mask>(", "reference": "Error", "full_reference": "configparser.DuplicateSectionError", "raw_gpt3.5": "1. Error\n2. Exception\n3. KeyError\n4. ValueError\n5. TypeError\n6. Warning\n7. RuntimeError\n8. AttributeError\n9. IndexError\n10. ImportError\n11. NameError\n12. SyntaxError\n13. AssertionError\n14. LookupError\n15. MemoryError\n16. NotImplementedError\n17. SystemError\n18. UnicodeError\n19. ZeroDivisionError\n20. IndentationError"}
{"mask": "last", "input": "cr8.engine.eval_fail_<mask>(", "reference": "if", "full_reference": "cr8.engine.eval_fail_if", "raw_gpt3.5": "1. exception\n2. reason\n3. message\n4. code\n5. detail\n6. trace\n7. error\n8. result\n9. status\n10. log\n11. output\n12. stack\n13. response\n14. condition\n15. flag\n16. issue\n17. problem\n18. warning\n19. info\n20. debug"}
{"mask": "first", "input": "openhtf.<mask>ugs.usb.adb_message.AdbTransportAdapter(", "reference": "pl", "full_reference": "openhtf.plugs.usb.adb_message.AdbTransportAdapter", "raw_gpt3.5": "1. _s\n2. _m\n3. _r\n4. _t\n5. _b\n6. _p\n7. _c\n8. _f\n9. _d\n10. _n\n11. _l\n12. _i\n13. _a\n14. _e\n15. _h\n16. _g\n17. _u\n18. _o\n19. _v\n20. _w"}
{"mask": "first", "input": "ansible_runner.exceptions.<mask>Error(", "reference": "Configuration", "full_reference": "ansible_runner.exceptions.ConfigurationError", "raw_gpt3.5": "1. AnsibleRunner.exceptions.AnsibleRunnerError\n2. AnsibleRunner.exceptions.AnsibleRunnerConnectionError\n3. AnsibleRunner.exceptions.AnsibleRunnerAuthenticationError\n4. AnsibleRunner.exceptions.AnsibleRunnerTimeoutError\n5. AnsibleRunner.exceptions.AnsibleRunnerExecutionError\n6. AnsibleRunner.exceptions.AnsibleRunnerConfigurationError\n7. AnsibleRunner.exceptions.AnsibleRunnerInventoryError\n8. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotFoundError\n9. AnsibleRunner.exceptions.AnsibleRunnerPlaybookExecutionError\n10. AnsibleRunner.exceptions.AnsibleRunnerPlaybookSyntaxError\n11. AnsibleRunner.exceptions.AnsibleRunnerPlaybookValidationError\n12. AnsibleRunner.exceptions.AnsibleRunnerPlaybookInterruptedError\n13. AnsibleRunner.exceptions.AnsibleRunnerPlaybookAbortedError\n14. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotRunnableError\n15. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotSupportedError\n16. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotExecutableError\n17. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotReadableError\n18. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotWritableError\n19. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotDeletableError\n20. AnsibleRunner.exceptions.AnsibleRunnerPlaybookNotRenamableError"}
{"mask": "first", "input": "hydpy.models.lland.<mask>and_parameters.ParameterSoil.trim(", "reference": "ll", "full_reference": "hydpy.models.lland.lland_parameters.ParameterSoil.trim", "raw_gpt3.5": "1. soil\n2. land\n3. water\n4. climate\n5. vegetation\n6. weather\n7. hydro\n8. stream\n9. catchment\n10. basin\n11. erosion\n12. infiltration\n13. runoff\n14. evapotranspiration\n15. snow\n16. frost\n17. temperature\n18. moisture\n19. groundwater\n20. landuse"}
{"mask": "all", "input": "tensorflow.<mask>.add_queue_runner(", "reference": "train", "full_reference": "tensorflow.train.add_queue_runner", "raw_gpt3.5": "1. train\n2. contrib\n3. core\n4. python\n5. estimator\n6. data\n7. keras\n8. nn\n9. logging\n10. summary\n11. saved_model\n12. feature_column\n13. io\n14. image\n15. math\n16. profiler\n17. random\n18. summary_v2\n19. test\n20. training."}
{"mask": "last", "input": "modelx.core.base.Impl.restore_<mask>(", "reference": "state", "full_reference": "modelx.core.base.Impl.restore_state", "raw_gpt3.5": "1. checkpoint\n2. state\n3. version\n4. backup\n5. data\n6. snapshot\n7. config\n8. history\n9. object\n10. point\n11. previous\n12. revision\n13. settings\n14. state_dict\n15. structure\n16. system\n17. template\n18. values\n19. variables\n20. view"}
{"mask": "all", "input": "google3.third_party.tensorflow.python.<mask>.LocalCLIDebugWrapperSession(", "reference": "debug", "full_reference": "google3.third_party.tensorflow.python.debug.LocalCLIDebugWrapperSession", "raw_gpt3.5": "1. debug\n2. client\n3. wrapper\n4. session\n5. grpc\n6. remote\n7. server\n8. monitor\n9. profiler\n10. cluster\n11. device\n12. ops\n13. graph\n14. training\n15. estimator\n16. contrib\n17. keras\n18. summary\n19. checkpoint\n20. distribute"}
{"mask": "last", "input": "sphinxcontrib.needs.utils.row_col_<mask>(", "reference": "maker", "full_reference": "sphinxcontrib.needs.utils.row_col_maker", "raw_gpt3.5": "1. index\n2. count\n3. min\n4. max\n5. sum\n6. mean\n7. median\n8. mode\n9. std\n10. var\n11. abs\n12. ceil\n13. floor\n14. round\n15. clip\n16. dot\n17. prod\n18. all\n19. any\n20. nonzero"}
{"mask": "last", "input": "libxml2<mask>.xmlCreateMemoryParserCtxt(", "reference": "mod", "full_reference": "libxml2mod.xmlCreateMemoryParserCtxt", "raw_gpt3.5": "1. SAX\n2. HTML\n3. Docbook\n4. RelaxNG\n5. XInclude\n6. XPath\n7. XPointer\n8. Catalog\n9. Schemas\n10. CatalogResolve\n11. CatalogGetPublic\n12. CatalogGetSystem\n13. CatalogAdd\n14. CatalogRemove\n15. CatalogIsEmpty\n16. CatalogDump\n17. CatalogConvertSGML\n18. CatalogConvertXML\n19. CatalogResolveURI\n20. CatalogResolveSystem"}
{"mask": "first", "input": "uw_sws.<mask>WPWS.get_person_by_regid(", "reference": "U", "full_reference": "uw_sws.UWPWS.get_person_by_regid", "raw_gpt3.5": "1. _s\n2. _v\n3. _c\n4. _m\n5. _p\n6. _f\n7. _r\n8. _t\n9. _n\n10. _l\n11. _d\n12. _i\n13. _b\n14. _u\n15. _e\n16. _s_\n17. _a\n18. _g\n19. _h\n20. _w"}
{"mask": "all", "input": "safe.<mask>.exceptions.InvalidLayerError(", "reference": "common", "full_reference": "safe.common.exceptions.InvalidLayerError", "raw_gpt3.5": "1. layer\n2. input\n3. output\n4. model\n5. graph\n6. node\n7. tensor\n8. shape\n9. variable\n10. operation\n11. weight\n12. bias\n13. activation\n14. loss\n15. optimizer\n16. regularizer\n17. initializer\n18. constraint\n19. metric\n20. callback"}
{"mask": "last", "input": "pyVmomi.vim.DistributedVirtualSwitchPort<mask>(", "reference": "Connection", "full_reference": "pyVmomi.vim.DistributedVirtualSwitchPortConnection", "raw_gpt3.5": "1. Group\n2. Config\n3. Statistics\n4. Runtime\n5. Map\n6. Profile\n7. Setting\n8. State\n9. Connection\n10. Filter\n11. Mirror\n12. Policy\n13. Security\n14. Session\n15. Specification\n16. Stats\n17. Trunk\n18. Vlan\n19. Portgroup\n20. PortKey"}
{"mask": "last", "input": "simpleso<mask>.detect_devices(", "reference": "apy", "full_reference": "simplesoapy.detect_devices", "raw_gpt3.5": "1. lution\n2. ck\n3. urce\n4. ftmax\n5. urce_type\n6. urce_info\n7. urce_list\n8. urce_name\n9. urce_path\n10. urce_format\n11. urce_index\n12. urce_id\n13. urce_uri\n14. urce_config\n15. urce_settings\n16. urce_properties\n17. urce_capabilities\n18. urce_status\n19. urce_state\n20. urce_metadata"}
{"mask": "last", "input": "lu<mask>.task.flatten(", "reference": "igi", "full_reference": "luigi.task.flatten", "raw_gpt3.5": "1. luigi.task.flatten()\n2. luigi.task.flatten_output()\n3. luigi.task.flatten_dict()\n4. luigi.task.flatten_list()\n5. luigi.task.flatten_tuple()\n6. luigi.task.flatten_iterable()\n7. luigi.task.flatten_dict_values()\n8. luigi.task.flatten_dict_keys()\n9. luigi.task.flatten_dict_items()\n10. luigi.task.flatten_list_of_lists()\n11. luigi.task.flatten_list_of_tuples()\n12. luigi.task.flatten_list_of_dicts()\n13. luigi.task.flatten_list_of_iterables()\n14. luigi.task.flatten_list_of_strings()\n15. luigi.task.flatten_list_of_numbers()\n16. luigi.task.flatten_list_of_booleans()\n17. luigi.task.flatten_list_of_sets()\n18. luigi.task.flatten_list_of_frozensets()\n19. luigi.task.flatten_list_of_bytes()\n20. luigi.task.flatten_list_of_bytearrays()"}
{"mask": "first", "input": "<mask>min.minify(", "reference": "html", "full_reference": "htmlmin.minify", "raw_gpt3.5": "1. css - CSSMin.minify()\n2. html - HTMLMinifier.minify()\n3. js - JSMin.minify()\n4. json - jsonminify()\n5. xml - minidom.parseString().toprettyxml()\n6. sql - sqlparse.format()\n7. markdown - markdown.markdown()\n8. yaml - yaml.safe_dump()\n9. bson - bson.BSON.encode()\n10. pickle - pickle.dumps()\n11. gzip - gzip.compress()\n12. tar - tarfile.TarFile.add()\n13. zipfile - zipfile.ZipFile.write()\n14. base64 - base64.b64encode()\n15. hashlib - hashlib.sha256()\n16. hmac - hmac.new()\n17. secrets - secrets.token_hex()\n18. uuid - uuid.uuid4()\n19. datetime - datetime.datetime.now()\n20. time - time.time()"}
{"mask": "all", "input": "graphql_relay.<mask>.node.from_global_id(", "reference": "node", "full_reference": "graphql_relay.node.node.from_global_id", "raw_gpt3.5": "1. to_global_id\n2. get_node_type\n3. is_node_id\n4. parse_global_id\n5. from_global_id_string\n6. from_global_id_unchecked\n7. to_global_id_string\n8. to_global_id_unchecked\n9. from_global_id\n10. node\n11. interface\n12. mutation\n13. connection\n14. edge\n15. PageInfo\n16. ConnectionArguments\n17. ConnectionCursor\n18. Connection\n19. ConnectionType\n20. ConnectionField"}
{"mask": "first", "input": "<mask>ica_python.connect(", "reference": "vert", "full_reference": "vertica_python.connect", "raw_gpt3.5": "1. client\n2. repl\n3. ssh\n4. server\n5. local\n6. remote\n7. api\n8. websocket\n9. http\n10. tcp\n11. udp\n12. socket\n13. mqtt\n14. grpc\n15. ssl\n16. tls\n17. websocket_client\n18. websocket_server\n19. http_client\n20. http_server"}
{"mask": "all", "input": "nnabla.<mask>.factorization.cpd.ALS(", "reference": "utils", "full_reference": "nnabla.utils.factorization.cpd.ALS", "raw_gpt3.5": "1. update\n2. rank\n3. init\n4. max_iter\n5. tol\n6. verbose\n7. reg_L1\n8. reg_L2\n9. reg_W\n10. reg_H\n11. reg_lambda\n12. reg_alpha\n13. reg_beta\n14. reg_gamma\n15. reg_eta\n16. reg_delta\n17. reg_epsilon\n18. reg_zeta\n19. reg_theta\n20. reg_iota"}
{"mask": "last", "input": "freelancersdk.resources.projects.exceptions.MilestoneNotCreated<mask>(", "reference": "Exception", "full_reference": "freelancersdk.resources.projects.exceptions.MilestoneNotCreatedException", "raw_gpt3.5": "1. Exception\n2. Error\n3. Yet\n4. Successfully\n5. Properly\n6. Correctly\n7. Already\n8. Manually\n9. Automatically\n10. DueTo\n11. ByUser\n12. BySystem\n13. ByAdmin\n14. ByOwner\n15. ByManager\n16. ByDeveloper\n17. ByTester\n18. ByClient\n19. ByPartner\n20. ByVendor"}
{"mask": "last", "input": "changes.exceptions.Probe<mask>(", "reference": "Exception", "full_reference": "changes.exceptions.ProbeException", "raw_gpt3.5": "1. ProbeError\n2. ProbeFailure\n3. ProbeException\n4. ProbeWarning\n5. ProbeIssue\n6. ProbeFault\n7. ProbeProblem\n8. ProbeMismatch\n9. ProbeConflict\n10. ProbeAssertion\n11. ProbeViolation\n12. ProbeInterrupt\n13. ProbeTermination\n14. ProbeAbortion\n15. ProbeCancellation\n16. ProbeRejection\n17. ProbeDenial\n18. ProbeRefusal\n19. ProbeDecline\n20. ProbeDismissal"}
{"mask": "first", "input": "<mask>it.stop_all(", "reference": "shut", "full_reference": "shutit.stop_all", "raw_gpt3.5": "1. rabb\n2. exi\n3. visi\n4. un\n5. comm\n6. circu\n7. dig\n8. spl\n9. perm\n10. lim\n11. trans\n12. spli\n13. excep\n14. res\n15. commi\n16. permu\n17. splat\n18. circui\n19. splin\n20. comman"}
{"mask": "first", "input": "<mask>fframework.datatypes.BlankNode(", "reference": "rd", "full_reference": "rdfframework.datatypes.BlankNode", "raw_gpt3.5": "1. rd : rdf\n2. g : graph\n3. n : node\n4. s : store\n5. u : utils\n6. i : identifier\n7. p : parser\n8. c : core\n9. l : literals\n10. h : hash\n11. m : mapping\n12. b : base\n13. f : formula\n14. t : term\n15. w : web\n16. e : expression\n17. d : dataset\n18. a : api\n19. o : owl\n20. v : value"}
{"mask": "first", "input": "base.forms.<mask>UserForm(", "reference": "Add", "full_reference": "base.forms.AddUserForm", "raw_gpt3.5": "1. Create\n2. Update\n3. Delete\n4. View\n5. Edit\n6. Search\n7. Add\n8. Modify\n9. Manage\n10. Validate\n11. Submit\n12. Retrieve\n13. Display\n14. Initialize\n15. Load\n16. Save\n17. Render\n18. Populate\n19. Reset\n20. ValidateAndSubmit"}
{"mask": "last", "input": "egoio.db_tables.model_draft.__getattribute<mask>(", "reference": "__", "full_reference": "egoio.db_tables.model_draft.__getattribute__", "raw_gpt3.5": "1. __add__\n2. __and__\n3. __call__\n4. __class__\n5. __contains__\n6. __delattr__\n7. __dir__\n8. __divmod__\n9. __doc__\n10. __eq__\n11. __format__\n12. __ge__\n13. __get__\n14. __getattr__\n15. __getattribute__\n16. __getitem__\n17. __gt__\n18. __hash__\n19. __init__\n20. __init_subclass__"}
{"mask": "all", "input": "IPython.<mask>.ssh.tunnel.try_passwordless_ssh(", "reference": "external", "full_reference": "IPython.external.ssh.tunnel.try_passwordless_ssh", "raw_gpt3.5": "1. hostname\n2. username\n3. password\n4. key\n5. port\n6. timeout\n7. retries\n8. retry_delay\n9. local_bind_address\n10. remote_bind_address\n11. sock\n12. allow_agent\n13. look_for_keys\n14. compress\n15. gss_auth\n16. gss_kex\n17. gss_deleg_creds\n18. gss_host\n19. gss_trust_dns\n20. gss_allow_mic_from_host"}
{"mask": "last", "input": "uw_sws.encode_section_<mask>(", "reference": "label", "full_reference": "uw_sws.encode_section_label", "raw_gpt3.5": "1. id\n2. meeting\n3. instructors\n4. status\n5. url\n6. notes\n7. registration\n8. components\n9. grading\n10. textbooks\n11. fees\n12. section\n13. curriculum\n14. history\n15. restrictions\n16. dates\n17. location\n18. enrollment\n19. evaluations\n20. attributes"}
{"mask": "all", "input": "psd_tools.<mask>.write_bytes(", "reference": "utils", "full_reference": "psd_tools.utils.write_bytes", "raw_gpt3.5": "1. image\n2. layer\n3. group\n4. channel\n5. color_mode\n6. compression\n7. resolution\n8. metadata\n9. blend_mode\n10. pixel_data\n11. save\n12. file_format\n13. save_as\n14. save_alpha\n15. save_icc_profile\n16. save_thumbnail\n17. save_preview\n18. save_composite_image\n19. save_composite_image_as\n20. save_composite_image_alpha"}
{"mask": "first", "input": "<mask>nic.types.resource.TypedResource(", "reference": "om", "full_reference": "omnic.types.resource.TypedResource", "raw_gpt3.5": "1. org\n2. com\n3. net\n4. io\n5. gov\n6. edu\n7. uk\n8. ca\n9. de\n10. fr\n11. jp\n12. cn\n13. ru\n14. au\n15. it\n16. nl\n17. es\n18. pl\n19. ch\n20. kr"}
{"mask": "first", "input": "openinghours.utils.<mask>_open(", "reference": "is", "full_reference": "openinghours.utils.is_open", "raw_gpt3.5": "1. monday\n2. tuesday\n3. wednesday\n4. thursday\n5. friday\n6. saturday\n7. sunday\n8. next\n9. previous\n10. current\n11. is\n12. get\n13. set\n14. add\n15. remove\n16. calculate\n17. format\n18. parse\n19. validate\n20. normalize"}
{"mask": "first", "input": "sporco.<mask>mm.bpdn.BPDNJoint.Options(", "reference": "ad", "full_reference": "sporco.admm.bpdn.BPDNJoint.Options", "raw_gpt3.5": "1. solver\n2. rho\n3. alpha\n4. gamma\n5. tau\n6. sigma\n7. max_it\n8. auto_terminate\n9. cgtol\n10. cgmaxiter\n11. verbose\n12. callback\n13. rho_x\n14. rho_y\n15. rho_eps\n16. alpha_x\n17. alpha_y\n18. gamma_x\n19. gamma_y\n20. gamma_u"}
{"mask": "first", "input": "<mask>translator.public.exceptions.InvalidEventException(", "reference": "sam", "full_reference": "samtranslator.public.exceptions.InvalidEventException", "raw_gpt3.5": "1. aws\n2. google\n3. microsoft\n4. azure\n5. ibm\n6. boto3\n7. azure.eventhub\n8. google.cloud.pubsub_v1\n9. google.cloud.functions_v1\n10. google.cloud.scheduler_v1\n11. google.cloud.tasks_v2\n12. google.cloud.tasks_v2beta3\n13. google.cloud.tasks_v2beta2\n14. google.cloud.tasks_v2beta1\n15. google.cloud.tasks_v2beta\n16. google.cloud.tasks_v2alpha3\n17. google.cloud.tasks_v2alpha2\n18. google.cloud.tasks_v2alpha1\n19. google.cloud.tasks_v2alpha\n20. google.cloud.tasks_v2"}
{"mask": "all", "input": "opensubmit.<mask>.LtiResult.objects.get_or_create(", "reference": "models", "full_reference": "opensubmit.models.LtiResult.objects.get_or_create", "raw_gpt3.5": "1. consumer\n2. provider\n3. context\n4. outcome\n5. extension\n6. service\n7. resource\n8. tool\n9. membership\n10. grade\n11. enrollment\n12. user\n13. group\n14. permission\n15. session\n16. event\n17. launch\n18. assignment\n19. submission\n20. assessment"}
{"mask": "last", "input": "networking_c<mask>.plugins.cisco.cfg_agent.cfg_exceptions.IOSXEConfigException(", "reference": "isco", "full_reference": "networking_cisco.plugins.cisco.cfg_agent.cfg_exceptions.IOSXEConfigException", "raw_gpt3.5": "1. onfig\n2. onnection\n3. ontroller\n4. ommand\n5. omponent\n6. onfiguration\n7. onfigurator\n8. onnections\n9. onfigured\n10. onfiguring\n11. onfigurable\n12. onfigurations\n13. onfigurator\n14. onfigured\n15. onfiguring\n16. onfigurable\n17. onfigurations\n18. onfigurator\n19. onfigured\n20. onfiguring"}
{"mask": "last", "input": "sc<mask>.parse.case.parse_case_data(", "reference": "out", "full_reference": "scout.parse.case.parse_case_data", "raw_gpt3.5": "1. scipy\n2. scikit\n3. scapy\n4. schedule\n5. screen\n6. scrapy\n7. scipy.sparse\n8. scipy.stats\n9. scipy.signal\n10. scipy.special\n11. scipy.spatial\n12. scipy.signaltools\n13. scipy.sparse.linalg\n14. scipy.sparse.csgraph\n15. scipy.sparse.linalg.eigen\n16. scipy.sparse.linalg.isolve\n17. scipy.sparse.linalg.dsolve\n18. scipy.sparse.linalg.interface\n19. scipy.sparse.linalg.matfuncs\n20. scipy.sparse.linalg.tests"}
{"mask": "all", "input": "eventlet.<mask>.Timeout(", "reference": "timeout", "full_reference": "eventlet.timeout.Timeout", "raw_gpt3.5": "1. seconds\n2. exception\n3. timer\n4. handler\n5. duration\n6. interval\n7. deadline\n8. callback\n9. threshold\n10. expiration\n11. limit\n12. duration_ms\n13. timeout\n14. max_duration\n15. max_time\n16. max_wait\n17. max_interval\n18. max_idle\n19. max_age\n20. max_retries"}
{"mask": "all", "input": "opensubmit.models.Grading.<mask>.filter(", "reference": "objects", "full_reference": "opensubmit.models.Grading.objects.filter", "raw_gpt3.5": "1. objects\n2. queryset\n3. data\n4. results\n5. grades\n6. submissions\n7. metadata\n8. parameters\n9. options\n10. criteria\n11. attributes\n12. values\n13. entries\n14. records\n15. responses\n16. feedback\n17. errors\n18. criteria_set\n19. criteria_list\n20. criteria_query"}
{"mask": "all", "input": "bika.lims.api.<mask>.get_roles(", "reference": "security", "full_reference": "bika.lims.api.security.get_roles", "raw_gpt3.5": "1. user\n2. group\n3. role\n4. permission\n5. user_role\n6. role_permission\n7. group_role\n8. user_group\n9. user_permission\n10. group_permission\n11. get_all_roles\n12. get_user_roles\n13. get_group_roles\n14. get_role_permissions\n15. get_user_role_permissions\n16. get_group_role_permissions\n17. get_user_groups\n18. get_group_users\n19. get_user_permissions\n20. get_group_permissions"}
{"mask": "all", "input": "seqann.<mask>.checkseq(", "reference": "util", "full_reference": "seqann.util.checkseq", "raw_gpt3.5": "1. alphabet\n2. encoding\n3. sequence\n4. format\n5. length\n6. isvalid\n7. metadata\n8. getseq\n9. getmetadata\n10. getalphabet\n11. getencoding\n12. setseq\n13. setmetadata\n14. setalphabet\n15. setencoding\n16. reversecomplement\n17. translate\n18. count\n19. find\n20. replace"}
{"mask": "all", "input": "edisgo.<mask>.pypsa_io.process_pfa_results(", "reference": "tools", "full_reference": "edisgo.tools.pypsa_io.process_pfa_results", "raw_gpt3.5": "1. read\n2. write\n3. load\n4. save\n5. parse\n6. extract\n7. convert\n8. handle\n9. filter\n10. analyze\n11. manipulate\n12. transform\n13. validate\n14. generate\n15. aggregate\n16. merge\n17. format\n18. export\n19. import\n20. execute"}
{"mask": "last", "input": "pygeotools.lib.filtlib.rolling_fl<mask>(", "reference": "tr", "full_reference": "pygeotools.lib.filtlib.rolling_fltr", "raw_gpt3.5": "1. rolling_fltr\n2. rolling_fltr2\n3. rolling_fltr3\n4. rolling_fltr4\n5. rolling_fltr5\n6. rolling_fltr6\n7. rolling_fltr7\n8. rolling_fltr8\n9. rolling_fltr9\n10. rolling_fltr10\n11. rolling_fltr11\n12. rolling_fltr12\n13. rolling_fltr13\n14. rolling_fltr14\n15. rolling_fltr15\n16. rolling_fltr16\n17. rolling_fltr17\n18. rolling_fltr18\n19. rolling_fltr19\n20. rolling_fltr20"}
{"mask": "last", "input": "asphalt.core.utils.callable_<mask>(", "reference": "name", "full_reference": "asphalt.core.utils.callable_name", "raw_gpt3.5": "1. name\n2. args\n3. argcount\n4. argdefs\n5. annotations\n6. closure\n7. code\n8. defaults\n9. dict\n10. dir\n11. doc\n12. file\n13. func_annotations\n14. func_closure\n15. func_code\n16. func_defaults\n17. func_dict\n18. func_globals\n19. func_name\n20. globals"}
{"mask": "first", "input": "implicit.nearest_neighbours.<mask>25_weight(", "reference": "bm", "full_reference": "implicit.nearest_neighbours.bm25_weight", "raw_gpt3.5": "1. cosine\n2. euclidean\n3. manhattan\n4. minkowski\n5. hamming\n6. jaccard\n7. braycurtis\n8. canberra\n9. chebyshev\n10. correlation\n11. mahalanobis\n12. seuclidean\n13. cityblock\n14. dice\n15. kulsinski\n16. matching\n17. rogerstanimoto\n18. russellrao\n19. sokalmichener\n20. sokalsneath"}
{"mask": "first", "input": "simtk.<mask>mm.CMMotionRemover(", "reference": "open", "full_reference": "simtk.openmm.CMMotionRemover", "raw_gpt3.5": "1. integrators\n2. openmm\n3. app\n4. unit\n5. vec3\n6. forcefield\n7. reference\n8. platform\n9. state\n10. custom\n11. context\n12. system\n13. xml\n14. utils\n15. constraints\n16. pdb\n17. simulation\n18. quantities\n19. langevin\n20. montecarlo"}
{"mask": "last", "input": "django.conf.settings.VAULT_BASE_SECRET_<mask>.strip(", "reference": "PATH", "full_reference": "django.conf.settings.VAULT_BASE_SECRET_PATH.strip", "raw_gpt3.5": "1. _PREFIX\n2. _PATH\n3. _DIR\n4. _NAME\n5. _SUFFIX\n6. _EXT\n7. _FILE\n8. _KEY\n9. _VALUE\n10. _SECRET\n11. _ID\n12. _TOKEN\n13. _URL\n14. _USERNAME\n15. _PASSWORD\n16. _AUTH\n17. _HEADER\n18. _BODY\n19. _PARAM\n20. _QUERY"}
{"mask": "all", "input": "proso_models.<mask>.Answer.objects.filter(", "reference": "models", "full_reference": "proso_models.models.Answer.objects.filter", "raw_gpt3.5": "1. question\n2. user\n3. session\n4. response\n5. feedback\n6. score\n7. category\n8. difficulty\n9. language\n10. explanation\n11. hint\n12. tag\n13. assessment\n14. attempt\n15. option\n16. choice\n17. solution\n18. result\n19. evaluation\n20. metadata"}
{"mask": "first", "input": "bokeh.models.widgets.<mask>ocompleteInput(", "reference": "Aut", "full_reference": "bokeh.models.widgets.AutocompleteInput", "raw_gpt3.5": "1. AutocompleteInput\n2. Text\n3. MultiSelect\n4. Select\n5. CheckboxButtonGroup\n6. CheckboxGroup\n7. RadioButtonGroup\n8. RadioGroup\n9. Slider\n10. RangeSlider\n11. TextInput\n12. TextAreaInput\n13. PasswordInput\n14. FileInput\n15. ColorPicker\n16. DatePicker\n17. DateRangeSlider\n18. DateRangeSliderInput\n19. TimePicker\n20. TimePickerInput"}
{"mask": "all", "input": "genes.<mask>.CrossRefDB.objects.get(", "reference": "models", "full_reference": "genes.models.CrossRefDB.objects.get", "raw_gpt3.5": "1. id\n2. name\n3. version\n4. description\n5. source\n6. accession\n7. organism\n8. sequence\n9. gene_id\n10. gene_name\n11. gene_symbol\n12. gene_description\n13. gene_sequence\n14. transcript_id\n15. transcript_name\n16. transcript_symbol\n17. transcript_description\n18. transcript_sequence\n19. protein_id\n20. protein_name"}
{"mask": "first", "input": "<mask>iskit.providers.ibmq.IBMQ.backends(", "reference": "q", "full_reference": "qiskit.providers.ibmq.IBMQ.backends", "raw_gpt3.5": "1. get: 0\n2. backends: 1\n3. _discover_remote_backends: 2\n4. _discover_local_backends: 3\n5. _get_backend: 4\n6. _get_provider: 5\n7. _get_backend_by_name: 6\n8. _get_backend_by_filter: 7\n9. _get_backend_by_type: 8\n10. _get_backend_status: 9\n11. _get_backend_configuration: 10\n12. _get_backend_properties: 11\n13. _get_backend_options: 12\n14. _get_backend_name: 13\n15. _get_backend_type: 14\n16. _get_backend_version: 15\n17. _get_backend_status_api: 16\n18. _get_backend_configuration_api: 17\n19. _get_backend_properties_api: 18\n20. _get_backend_options_api: 19"}
{"mask": "all", "input": "libpython.<mask>.get_selected_python_frame(", "reference": "Frame", "full_reference": "libpython.Frame.get_selected_python_frame", "raw_gpt3.5": "1. frame\n2. thread\n3. interpreter\n4. traceback\n5. code\n6. state\n7. module\n8. object\n9. globals\n10. locals\n11. dictionary\n12. stack\n13. exception\n14. generator\n15. closure\n16. bytecode\n17. function\n18. scope\n19. instruction\n20. execution"}
{"mask": "first", "input": "heron.tools.common.src.python.access.<mask>_component_exceptionsummary(", "reference": "get", "full_reference": "heron.tools.common.src.python.access.get_component_exceptionsummary", "raw_gpt3.5": "1. heron.tools.common.src.python.access.heartbeat_component_exceptionsummary\n2. heron.tools.common.src.python.access.metrics_component_exceptionsummary\n3. heron.tools.common.src.python.access.logging_component_exceptionsummary\n4. heron.tools.common.src.python.access.config_component_exceptionsummary\n5. heron.tools.common.src.python.access.state_component_exceptionsummary\n6. heron.tools.common.src.python.access.checkpoint_component_exceptionsummary\n7. heron.tools.common.src.python.access.topology_component_exceptionsummary\n8. heron.tools.common.src.python.access.scheduler_component_exceptionsummary\n9. heron.tools.common.src.python.access.resource_component_exceptionsummary\n10. heron.tools.common.src.python.access.instance_component_exceptionsummary\n11. heron.tools.common.src.python.access.execution_component_exceptionsummary\n12. heron.tools.common.src.python.access.container_component_exceptionsummary\n13. heron.tools.common.src.python.access.network_component_exceptionsummary\n14. heron.tools.common.src.python.access.health_component_exceptionsummary\n15. heron.tools.common.src.python.access.monitoring_component_exceptionsummary\n16. heron.tools.common.src.python.access.recovery_component_exceptionsummary\n17. heron.tools.common.src.python.access.loadbalancer_component_exceptionsummary\n18. heron.tools.common.src.python.access.coordinator_component_exceptionsummary\n19. heron.tools.common.src.python.access.messaging_component_exceptionsummary\n20. heron.tools.common.src.python.access.security_component_exceptionsummary"}
{"mask": "first", "input": "deeppavlov.models.preprocessors.<mask>ization.process_word(", "reference": "capital", "full_reference": "deeppavlov.models.preprocessors.capitalization.process_word", "raw_gpt3.5": "1. lower\n2. stem\n3. token\n4. lemmatize\n5. normalize\n6. encode\n7. preprocess\n8. vectorize\n9. analyze\n10. sanitize\n11. transform\n12. parse\n13. extract\n14. filter\n15. substitute\n16. replace\n17. cluster\n18. segment\n19. detect\n20. tokenize"}
{"mask": "last", "input": "glyphs<mask>.builder.to_designspace(", "reference": "Lib", "full_reference": "glyphsLib.builder.to_designspace", "raw_gpt3.5": "1. .ufo\n2. .otf\n3. .ttf\n4. .designspace\n5. .plist\n6. .json\n7. .yaml\n8. .toml\n9. .ini\n10. .csv\n11. .xml\n12. .html\n13. .md\n14. .txt\n15. .zip\n16. .tar\n17. .gz\n18. .bz2\n19. .xz\n20. .7z"}
{"mask": "all", "input": "rafcon.gui.helpers.<mask>.add_state(", "reference": "state", "full_reference": "rafcon.gui.helpers.state.add_state", "raw_gpt3.5": "1. widget\n2. dialog\n3. menu\n4. toolbar\n5. action\n6. label\n7. button\n8. checkbox\n9. radiobutton\n10. combobox\n11. listbox\n12. textbox\n13. slider\n14. progressbar\n15. spinbox\n16. treeview\n17. canvas\n18. frame\n19. notebook\n20. messagebox"}
{"mask": "all", "input": "u2flib_host.<mask>.DeviceError(", "reference": "exc", "full_reference": "u2flib_host.exc.DeviceError", "raw_gpt3.5": "1. code\n2. message\n3. description\n4. name\n5. type\n6. reason\n7. status\n8. error\n9. exception\n10. detail\n11. response\n12. result\n13. data\n14. info\n15. metadata\n16. payload\n17. output\n18. input\n19. context\n20. traceback"}
{"mask": "last", "input": "pyshad<mask>._pyshaderc.lib.shaderc_compile_options_set_warnings_as_errors(", "reference": "erc", "full_reference": "pyshaderc._pyshaderc.lib.shaderc_compile_options_set_warnings_as_errors", "raw_gpt3.5": "1. erc\n2. erc_\n3. erc_l\n4. erc_li\n5. erc_lib\n6. erc_lib.\n7. erc_lib.s\n8. erc_lib.sh\n9. erc_lib.sha\n10. erc_lib.shad\n11. erc_lib.shade\n12. erc_lib.shader\n13. erc_lib.shaderc\n14. erc_lib.shaderc_\n15. erc_lib.shaderc_c\n16. erc_lib.shaderc_co\n17. erc_lib.shaderc_com\n18. erc_lib.shaderc_comp\n19. erc_lib.shaderc_compi\n20. erc_lib.shaderc_compile"}
{"mask": "first", "input": "c7n.schema.<mask>_dump(", "reference": "json", "full_reference": "c7n.schema.json_dump", "raw_gpt3.5": "1. json\n2. yaml\n3. to\n4. dict\n5. str\n6. file\n7. data\n8. schema\n9. policy\n10. resource\n11. resource_type\n12. resource_registry\n13. resource_prefix\n14. resource_manager\n15. resource_identifier\n16. resource_augment\n17. resource_annotation\n18. resource_registry\n19. resource_type\n20. resource_manager"}
{"mask": "first", "input": "<mask>ator.migrations.DatabaseMigrationRepository(", "reference": "or", "full_reference": "orator.migrations.DatabaseMigrationRepository", "raw_gpt3.5": "1. django\n2. flask\n3. sqlalchemy\n4. peewee\n5. mongoengine\n6. tortoise\n7. pony\n8. playhouse\n9. pony.orm\n10. django.db\n11. flask_sqlalchemy\n12. sqlalchemy.orm\n13. mongoengine.connection\n14. mongoengine.fields\n15. tortoise.fields\n16. tortoise.models\n17. pony.orm.dbproviders\n18. playhouse.postgres_ext\n19. django.db.migrations\n20. flask_sqlalchemy.model"}
{"mask": "all", "input": "senaite.<mask>.get_parent(", "reference": "api", "full_reference": "senaite.api.get_parent", "raw_gpt3.5": "1. client\n2. lims\n3. api\n4. utils\n5. config\n6. logger\n7. exceptions\n8. auth\n9. plugins\n10. tests\n11. models\n12. services\n13. workflows\n14. instruments\n15. storage\n16. extensions\n17. templates\n18. interfaces\n19. addons\n20. hooks"}
{"mask": "first", "input": "spectrum.tools.<mask>osided_2_centerdc(", "reference": "tw", "full_reference": "spectrum.tools.twosided_2_centerdc", "raw_gpt3.5": "1. tw : \n2. th : \n3. fo : \n4. fi : \n5. si : \n6. se : \n7. ei : \n8. ni : \n9. te : \n10. re : \n11. de : \n12. ve : \n13. pe : \n14. ce : \n15. ge : \n16. me : \n17. ze : \n18. be : \n19. he : \n20. le :"}
{"mask": "last", "input": "ctypes.c_char_<mask>.in_dll(", "reference": "p", "full_reference": "ctypes.c_char_p.in_dll", "raw_gpt3.5": "1. ascii\n2. buffer\n3. flags\n4. format\n5. name\n6. type\n7. value\n8. writable\n9. array\n10. length\n11. pointer\n12. size\n13. unicode\n14. isdigit\n15. islower\n16. isupper\n17. isspace\n18. isalpha\n19. isalnum\n20. isprintable"}
{"mask": "last", "input": "google.cloud.bigtable_v<mask>.proto.data_pb2.ReadModifyWriteRule(", "reference": "2", "full_reference": "google.cloud.bigtable_v2.proto.data_pb2.ReadModifyWriteRule", "raw_gpt3.5": "1. ersion\n2. alue\n3. ersioned\n4. alueRange\n5. alueList\n6. ersionRange\n7. alueType\n8. ersionedData\n9. alueSet\n10. ersionInfo\n11. alueView\n12. ersionSpec\n13. alueDescriptor\n14. ersionRangeOptions\n15. alueMetadata\n16. ersionedField\n17. alueTransform\n18. ersionedValue\n19. alueOptions\n20. ersionedRowSet"}
{"mask": "first", "input": "<mask>ffutils.parser._split_keyvals(", "reference": "g", "full_reference": "gffutils.parser._split_keyvals", "raw_gpt3.5": "1. parse\n2. split\n3. get\n4. extract\n5. process\n6. tokenize\n7. filter\n8. validate\n9. normalize\n10. convert\n11. match\n12. replace\n13. format\n14. generate\n15. combine\n16. sort\n17. group\n18. aggregate\n19. analyze\n20. compare"}
{"mask": "all", "input": "plaso.containers.<mask>.AttributeContainersManager.GetAttributeContainer(", "reference": "manager", "full_reference": "plaso.containers.manager.AttributeContainersManager.GetAttributeContainer", "raw_gpt3.5": "1. Event\n2. EventTag\n3. Parser\n4. ParserChain\n5. ParserContext\n6. ParserFilter\n7. ParserMediator\n8. ParserPlugin\n9. ParserPluginData\n10. ParserPluginManager\n11. ParserPreservePathFilter\n12. ParserSelection\n13. ParserSupport\n14. ParserTask\n15. ParserVFSHelper\n16. PathSpec\n17. PathSpecFactory\n18. PathSpecFilter\n19. PathSpecQueue\n20. PathSpecSerializer"}
{"mask": "first", "input": "pytgbot.<mask>_types.receivable.updates.Message.from_array(", "reference": "api", "full_reference": "pytgbot.api_types.receivable.updates.Message.from_array", "raw_gpt3.5": "1. message\n2. update\n3. chat\n4. user\n5. photo\n6. audio\n7. document\n8. sticker\n9. video\n10. voice\n11. contact\n12. location\n13. venue\n14. animation\n15. game\n16. poll\n17. invoice\n18. successful_payment\n19. passport_data\n20. dice"}
{"mask": "last", "input": "pyp<mask>.pipelinerunner.load_and_run_pipeline(", "reference": "yr", "full_reference": "pypyr.pipelinerunner.load_and_run_pipeline", "raw_gpt3.5": "1. ython\n2. ipe\n3. arser\n4. rocessor\n5. arameter\n6. ipeline\n7. y\n8. lugin\n9. roxy\n10. ool\n11. ythonic\n12. ipelinerunner\n13. ythonpath\n14. ythonversion\n15. ythonhome\n16. ythonexe\n17. ythonpathex\n18. ythonc\n19. ythonw\n20. ythonconfig"}
{"mask": "last", "input": "sc2<mask>.playerRecord.PlayerRecord(", "reference": "players", "full_reference": "sc2players.playerRecord.PlayerRecord", "raw_gpt3.5": "1. LadderSeason\n2. Replay\n3. ReplayInfo\n4. ReplayPlayerInfo\n5. ReplayData\n6. ReplayControlInterface\n7. ReplayObserverInterface\n8. ReplayBuffer\n9. ReplayError\n10. ReplayHeader\n11. ReplayProtocol\n12. ReplayTrackerEvents\n13. ReplayUnitInfo\n14. ReplayAttribute\n15. ReplayAttributeEvents\n16. ReplayControl\n17. ReplayObserver\n18. ReplayReader\n19. ReplayServer\n20. ReplaySharedData"}
{"mask": "first", "input": "<mask>quake.hazardlib.imt.PGV(", "reference": "open", "full_reference": "openquake.hazardlib.imt.PGV", "raw_gpt3.5": "1. spectral\n2. ground_motion\n3. intensity\n4. seismic\n5. hazard\n6. acceleration\n7. response\n8. attenuation\n9. velocity\n10. design\n11. site\n12. soil\n13. peak\n14. motion\n15. factor\n16. model\n17. duration\n18. spectrum\n19. record\n20. analysis"}
{"mask": "all", "input": "OpenSSL._util.<mask>.SSL_CTX_set_verify(", "reference": "lib", "full_reference": "OpenSSL._util.lib.SSL_CTX_set_verify", "raw_gpt3.5": "1. mode\n2. options\n3. verify_flags\n4. verify_mode\n5. verify_depth\n6. verify_callback\n7. verify_cert\n8. verify_locations\n9. verify_hostname\n10. verify_email\n11. verify_time\n12. verify_flags_cb\n13. verify_cb\n14. verify_cert_cb\n15. verify_locations_cb\n16. verify_hostname_cb\n17. verify_email_cb\n18. verify_time_cb\n19. verify_flags_cert_cb\n20. verify_cert_cb_flags"}
{"mask": "last", "input": "azext_<mask>.argument.build_pos_args_table(", "reference": "alias", "full_reference": "azext_alias.argument.build_pos_args_table", "raw_gpt3.5": "1. build\n2. create\n3. generate\n4. parse\n5. format\n6. add\n7. remove\n8. update\n9. retrieve\n10. fetch\n11. list\n12. get\n13. set\n14. execute\n15. validate\n16. process\n17. prepare\n18. initialize\n19. construct\n20. assemble"}
{"mask": "last", "input": "pysp<mask>.spike_sync(", "reference": "ike", "full_reference": "pyspike.spike_sync", "raw_gpt3.5": "1. ike\n2. ike2\n3. ike3\n4. ike4\n5. ike5\n6. ike6\n7. ike7\n8. ike8\n9. ike9\n10. ike10\n11. ike11\n12. ike12\n13. ike13\n14. ike14\n15. ike15\n16. ike16\n17. ike17\n18. ike18\n19. ike19\n20. ike20"}
{"mask": "all", "input": "bitcoin_blockchain.<mask>.btc_is_multisig_script(", "reference": "keys", "full_reference": "bitcoin_blockchain.keys.btc_is_multisig_script", "raw_gpt3.5": "1. get_script_type\n2. parse_script\n3. serialize_script\n4. is_p2sh_script\n5. is_p2pkh_script\n6. is_p2wpkh_script\n7. is_p2wsh_script\n8. is_p2pk_script\n9. is_p2ms_script\n10. is_p2sh_multisig_script\n11. is_p2sh_p2wpkh_script\n12. is_p2sh_p2wsh_script\n13. is_p2wpkh_multisig_script\n14. is_p2wsh_multisig_script\n15. is_p2pkh_multisig_script\n16. is_p2pk_multisig_script\n17. is_p2ms_multisig_script\n18. is_p2sh_p2pkh_multisig_script\n19. is_p2sh_p2pk_multisig_script\n20. is_p2sh_p2ms_multisig_script"}
{"mask": "first", "input": "spyder.utils.programs.<mask>_python_script_in_terminal(", "reference": "run", "full_reference": "spyder.utils.programs.run_python_script_in_terminal", "raw_gpt3.5": "1. run\n2. execute\n3. launch\n4. open\n5. start\n6. run_\n7. execute_\n8. launch_\n9. open_\n10. start_\n11. debug\n12. run_script\n13. execute_script\n14. launch_script\n15. open_script\n16. start_script\n17. run_python\n18. execute_python\n19. launch_python\n20. open_python"}
{"mask": "first", "input": "canvasapi.exceptions.<mask>DoesNotExist(", "reference": "Resource", "full_reference": "canvasapi.exceptions.ResourceDoesNotExist", "raw_gpt3.5": "1. Assignment\n2. Course\n3. Enrollment\n4. Group\n5. Module\n6. Page\n7. Quiz\n8. Submission\n9. User\n10. Attachment\n11. Column\n12. Discussion\n13. ExternalTool\n14. File\n15. Folder\n16. GradebookColumn\n17. GradingPeriod\n18. Outcome\n19. Rubric\n20. Section"}
{"mask": "all", "input": "logging.<mask>.warn(", "reference": "root", "full_reference": "logging.root.warn", "raw_gpt3.5": "1. message\n2. exception\n3. error\n4. critical\n5. info\n6. debug\n7. log\n8. basicConfig\n9. shutdown\n10. exception_info\n11. exception_message\n12. exception_traceback\n13. exception_type\n14. exception_only\n15. exception_text\n16. exception_tb\n17. exception_caught\n18. exception_handler\n19. exception_information\n20. exception_occurred"}
{"mask": "all", "input": "<mask>.impact_function.impact_function.ImpactFunction.load_from_output_metadata(", "reference": "safe", "full_reference": "safe.impact_function.impact_function.ImpactFunction.load_from_output_metadata", "raw_gpt3.5": "1. impact\n2. impact_function\n3. ImpactFunction\n4. load_from_output_metadata\n5. .impact_function\n6. .ImpactFunction\n7. .load_from_output_metadata\n8. function\n9. Function\n10. metadata\n11. output_metadata\n12. load\n13. from_output_metadata\n14. output\n15. Impact\n16. load_from_output\n17. .load_from_output\n18. .impact\n19. .output_metadata\n20. .ImpactFunction.load_from_output_metadata"}
{"mask": "all", "input": "predix.<mask>.eventhub.EventHub_pb2.PublishRequest(", "reference": "data", "full_reference": "predix.data.eventhub.EventHub_pb2.PublishRequest", "raw_gpt3.5": "1. tenant\n2. service\n3. data\n4. message\n5. event\n6. payload\n7. topic\n8. connection\n9. authorization\n10. certificate\n11. endpoint\n12. broker\n13. producer\n14. consumer\n15. subscription\n16. attribute\n17. metadata\n18. header\n19. context\n20. request"}
{"mask": "all", "input": "pyvlx.<mask>.FrameCommandRemainingTimeNotification(", "reference": "frames", "full_reference": "pyvlx.frames.FrameCommandRemainingTimeNotification", "raw_gpt3.5": "1. command\n2. frame\n3. remaining\n4. time\n5. notification\n6. status\n7. response\n8. data\n9. payload\n10. message\n11. error\n12. exception\n13. packet\n14. header\n15. checksum\n16. sequence\n17. timestamp\n18. priority\n19. interval\n20. timeout"}
{"mask": "last", "input": "turbolift.authentication.utils.check_auth_<mask>(", "reference": "plugin", "full_reference": "turbolift.authentication.utils.check_auth_plugin", "raw_gpt3.5": "1. token\n2. credentials\n3. provider\n4. method\n5. header\n6. scheme\n7. authority\n8. signature\n9. nonce\n10. challenge\n11. response\n12. user\n13. password\n14. session\n15. cookie\n16. token_header\n17. token_scheme\n18. token_authority\n19. token_signature\n20. token_nonce"}
{"mask": "last", "input": "mo_<mask>.durations.MILLI_VALUES.keys(", "reference": "times", "full_reference": "mo_times.durations.MILLI_VALUES.keys", "raw_gpt3.5": "1. MICRO\n2. NANO\n3. MILLISECOND\n4. SECOND\n5. MINUTE\n6. HOUR\n7. DAY\n8. WEEK\n9. MONTH\n10. YEAR\n11. JANUARY\n12. FEBRUARY\n13. MARCH\n14. APRIL\n15. MAY\n16. JUNE\n17. JULY\n18. AUGUST\n19. SEPTEMBER\n20. OCTOBER"}
{"mask": "last", "input": "vel<mask>.SetDaylightSaving(", "reference": "bus", "full_reference": "velbus.SetDaylightSaving", "raw_gpt3.5": "1.ocity\n2.ocitys\n3.ocityTime\n4.ocityTimezone\n5.ocityTimeZone\n6.ocityTimeZoneInfo\n7.ocityTimeZoneName\n8.ocityTimeZoneOffset\n9.ocityTimeZoneUtcOffset\n10.ocityTimeZoneValue\n11.ocityTimezoneInfo\n12.ocityTimezoneName\n13.ocityTimezoneOffset\n14.ocityTimezoneUtcOffset\n15.ocityTimezoneValue\n16.ocityUtcOffset\n17.ocityValue\n18.ocitysInfo\n19.ocitysName\n20.ocitysOffset"}
{"mask": "all", "input": "<mask>.engine.objects.Serializable.is_serializable(", "reference": "pants", "full_reference": "pants.engine.objects.Serializable.is_serializable", "raw_gpt3.5": "1. cPickle\n2. dill\n3. joblib\n4. cloudpickle\n5. Pyro4\n6. marshal\n7. msgpack\n8. bson\n9. jsonpickle\n10. zope.interface\n11. twisted.persisted\n12. sqlalchemy.orm\n13. django.core.serializers\n14. bsonjs\n15. google.protobuf\n16. thrift\n17. avro\n18. pyarrow\n19. h5py\n20. pandas.io.pickle"}
{"mask": "first", "input": "apitools.base.py.credentials_lib.<mask>Credentials(", "reference": "Get", "full_reference": "apitools.base.py.credentials_lib.GetCredentials", "raw_gpt3.5": "1. Google\n2. AWS\n3. Azure\n4. Facebook\n5. Twitter\n6. GitHub\n7. LinkedIn\n8. Okta\n9. OAuth\n10. SAML\n11. OpenID\n12. JWT\n13. Basic\n14. Digest\n15. NTLM\n16. Kerberos\n17. X.509\n18. Certificate\n19. Token\n20. Session"}
{"mask": "first", "input": "mama_cas.exceptions.<mask>Ticket(", "reference": "Invalid", "full_reference": "mama_cas.exceptions.InvalidTicket", "raw_gpt3.5": "1. InvalidTicketError\n2. ExpiredTicketError\n3. RevokedTicketError\n4. UnknownTicketError\n5. MissingTicketError\n6. CorruptTicketError\n7. UnauthorizedTicketError\n8. UnrecognizedTicketError\n9. IncompleteTicketError\n10. MalformedTicketError\n11. UnexpectedTicketError\n12. UnhandledTicketError\n13. UnsupportedTicketError\n14. UnresolvedTicketError\n15. UnavailableTicketError\n16. UnverifiedTicketError\n17. UninitializedTicketError\n18. UnspecifiedTicketError\n19. UncheckedTicketError\n20. UnrecoverableTicketError"}
{"mask": "last", "input": "conf<mask>.liblist.libraries(", "reference": "duino", "full_reference": "confduino.liblist.libraries", "raw_gpt3.5": "1. ig\n2. igraph\n3. igraph_\n4. igraphs\n5. igraphx\n6. igraphpy\n7. igraphs_\n8. igraphcpp\n9. igraphc\n10. igraphlib\n11. igraphs_cpp\n12. igraphs_c\n13. igraphs_py\n14. igraphs_lib\n15. igraphs_cpp_\n16. igraphs_c_\n17. igraphs_py_\n18. igraphs_lib_\n19. igraphcpp_\n20. igraphc_"}
{"mask": "last", "input": "ding<mask>.tools.geo.calc_geo_dist_vincenty(", "reference": "0", "full_reference": "ding0.tools.geo.calc_geo_dist_vincenty", "raw_gpt3.5": "1. _distance\n2. _bearing\n3. _azimuth\n4. _point\n5. _latlon\n6. _geodesic\n7. _distance_meters\n8. _distance_km\n9. _distance_mi\n10. _distance_ft\n11. _distance_yd\n12. _distance_nmi\n13. _distance_to\n14. _distance_between\n15. _distance_from\n16. _distance_and_bearing\n17. _distance_and_azimuth\n18. _distance_and_point\n19. _distance_and_latlon\n20. _distance_and_geodesic"}
{"mask": "all", "input": "<mask>.cloud.logging.metric.Metric.from_api_repr(", "reference": "google", "full_reference": "google.cloud.logging.metric.Metric.from_api_repr", "raw_gpt3.5": "1. google\n2. aws\n3. azure\n4. ibm\n5. alibaba\n6. oracle\n7. digitalocean\n8. rackspace\n9. vultr\n10. linode\n11. scaleway\n12. hetzner\n13. upcloud\n14. tencent\n15. ovh\n16. cloudflare\n17. fastly\n18. netlify\n19. heroku\n20. firebase"}
{"mask": "last", "input": "bms.blocks.continuous.Function<mask>(", "reference": "Block", "full_reference": "bms.blocks.continuous.FunctionBlock", "raw_gpt3.5": "1. Domain\n2. Range\n3. Derivative\n4. Gradient\n5. Jacobian\n6. Hessian\n7. Lipschitz\n8. Convex\n9. Concave\n10. Monotonic\n11. Integrable\n12. Differentiable\n13. Lipschitzian\n14. Convexity\n15. Concavity\n16. Monotonicity\n17. Integrability\n18. Differentiability\n19. Lipschitzianity\n20. Continuity"}
{"mask": "all", "input": "pycldf.sources.Sources.<mask>(", "reference": "parse", "full_reference": "pycldf.sources.Sources.parse", "raw_gpt3.5": "1. add\n2. remove\n3. get\n4. set\n5. update\n6. clear\n7. keys\n8. values\n9. items\n10. has\n11. find\n12. filter\n13. count\n14. index\n15. sort\n16. reverse\n17. extend\n18. copy\n19. pop\n20. append"}
{"mask": "last", "input": "tensorflow_hub.tf_v<mask>.train.init_from_checkpoint(", "reference": "1", "full_reference": "tensorflow_hub.tf_v1.train.init_from_checkpoint", "raw_gpt3.5": "1. ersion\n2. 1\n3. 2\n4. 3\n5. 4\n6. 5\n7. 6\n8. 7\n9. 8\n10. 9\n11. 10\n12. 11\n13. 12\n14. 13\n15. 14\n16. 15\n17. 16\n18. 17\n19. 18\n20. 19"}
{"mask": "all", "input": "ballet.compat.<mask>.format_file_contents(", "reference": "black", "full_reference": "ballet.compat.black.format_file_contents", "raw_gpt3.5": "1. tensorflow\n2. keras\n3. torch\n4. numpy\n5. pandas\n6. sklearn\n7. scipy\n8. mxnet\n9. onnx\n10. cntk\n11. chainer\n12. theano\n13. caffe\n14. pytorch\n15. jax\n16. cupy\n17. dask\n18. xgboost\n19. lightgbm\n20. fastai"}
{"mask": "all", "input": "cms.<mask>.get_language_list(", "reference": "utils", "full_reference": "cms.utils.get_language_list", "raw_gpt3.5": "1. languages\n2. supported_languages\n3. available_languages\n4. language_codes\n5. language_list\n6. get_supported_languages\n7. get_available_languages\n8. get_language_codes\n9. get_language_list\n10. get_all_languages\n11. get_supported_language_list\n12. get_available_language_list\n13. get_language_code_list\n14. get_all_language_list\n15. get_supported_languages_list\n16. get_available_languages_list\n17. get_language_codes_list\n18. get_all_languages_list\n19. get_supported_language_codes\n20. get_available_language_codes"}
{"mask": "first", "input": "<mask>_encryption_sdk.exceptions.UnknownIdentityError(", "reference": "aws", "full_reference": "aws_encryption_sdk.exceptions.UnknownIdentityError", "raw_gpt3.5": "1. aws_encryption_sdk.exceptions.UnknownIdentityError\n2. azure_encryption_sdk.exceptions.UnknownIdentityError\n3. google_encryption_sdk.exceptions.UnknownIdentityError\n4. pyca_encryption_sdk.exceptions.UnknownIdentityError\n5. cryptography.exceptions.UnknownIdentityError\n6. pycrypto_encryption_sdk.exceptions.UnknownIdentityError\n7. botocore_encryption_sdk.exceptions.UnknownIdentityError\n8. azure.keyvault.keys.exceptions.UnknownIdentityError\n9. azure.keyvault.secrets.exceptions.UnknownIdentityError\n10. azure.keyvault.certificates.exceptions.UnknownIdentityError\n11. google.cloud.kms.exceptions.UnknownIdentityError\n12. google.auth.exceptions.UnknownIdentityError\n13. google.oauth2.exceptions.UnknownIdentityError\n14. google.cloud.exceptions.UnknownIdentityError\n15. google.cloud.storage.exceptions.UnknownIdentityError\n16. google.cloud.pubsub_v1.exceptions.UnknownIdentityError\n17. google.cloud.bigquery_storage_v1beta1.exceptions.UnknownIdentityError\n18. google.cloud.bigquery.exceptions.UnknownIdentityError\n19. google.cloud.bigtable.exceptions.UnknownIdentityError\n20. google.cloud.datastore.exceptions.UnknownIdentityError"}
{"mask": "first", "input": "atomic_reactor.plugins.pre_reactor_config.<mask>_openshift_session(", "reference": "get", "full_reference": "atomic_reactor.plugins.pre_reactor_config.get_openshift_session", "raw_gpt3.5": "1. get\n2. create\n3. delete\n4. update\n5. list\n6. start\n7. stop\n8. restart\n9. connect\n10. disconnect\n11. open\n12. close\n13. set\n14. unset\n15. authenticate\n16. authorize\n17. validate\n18. execute\n19. query\n20. check"}
{"mask": "first", "input": "<mask>stronomy.Util.mask.mask_center_2d(", "reference": "len", "full_reference": "lenstronomy.Util.mask.mask_center_2d", "raw_gpt3.5": "1. astro\n2. py\n3. astropy\n4. star\n5. sky\n6. image\n7. wcs\n8. fits\n9. photutils\n10. ccdproc\n11. reproject\n12. aplpy\n13. astrometry\n14. astropy_helpers\n15. astropy_healpix\n16. astropy_sphinx\n17. astropy_timeseries\n18. astropy_cosmology\n19. astropy_convolution\n20. astropy_mpl_style"}
{"mask": "all", "input": "tensorflow.math.<mask>(", "reference": "cos", "full_reference": "tensorflow.math.cos", "raw_gpt3.5": "1. reduce_sum\n2. reduce_mean\n3. reduce_max\n4. reduce_min\n5. reduce_all\n6. reduce_any\n7. reduce_logsumexp\n8. reduce_prod\n9. reduce_variance\n10. reduce_stddev\n11. reduce_euclidean_norm\n12. reduce_rms\n13. reduce_weighted_logsumexp\n14. reduce_join\n15. reduce_window\n16. reduce_batch_gcd\n17. reduce_batch_cholesky\n18. reduce_batch_l2_norm_squared\n19. reduce_batch_l2_norm\n20. reduce_batch_hermitian_positive_definite_eigenvectors"}
{"mask": "first", "input": "dci.api.<mask>1.tags.add_tag_to_resource(", "reference": "v", "full_reference": "dci.api.v1.tags.add_tag_to_resource", "raw_gpt3.5": "1. resource\n2. resource_type\n3. resource_id\n4. tag\n5. tag_key\n6. tag_value\n7. tag_description\n8. tag_group\n9. tag_group_id\n10. tag_group_name\n11. tag_group_description\n12. tag_group_type\n13. tag_group_owner\n14. tag_group_owner_id\n15. tag_group_owner_name\n16. tag_group_owner_email\n17. tag_group_owner_phone\n18. tag_group_owner_address\n19. tag_group_owner_city\n20. tag_group_owner_state"}
{"mask": "first", "input": "androguard.gui.sourcewindow.<mask>Window(", "reference": "Source", "full_reference": "androguard.gui.sourcewindow.SourceWindow", "raw_gpt3.5": "1. Java\n2. XML\n3. Python\n4. Bytecode\n5. Dex\n6. APK\n7. Manifest\n8. Resource\n9. Code\n10. Smali\n11. Graph\n12. Tree\n13. Layout\n14. Editor\n15. Viewer\n16. Debugger\n17. Decompiler\n18. Disassembler\n19. Analysis\n20. Signature"}
{"mask": "all", "input": "yamcs.protobuf.<mask>.rest_pb2.EditLinkRequest(", "reference": "rest", "full_reference": "yamcs.protobuf.rest.rest_pb2.EditLinkRequest", "raw_gpt3.5": "1. common\n2. messages\n3. service\n4. types\n5. resources\n6. api\n7. client\n8. utils\n9. models\n10. grpc\n11. exceptions\n12. request\n13. response\n14. serializer\n15. authentication\n16. authorization\n17. validation\n18. filters\n19. middleware\n20. decorators"}
{"mask": "first", "input": "skimage.transform.<mask>ramids.pyramid_reduce(", "reference": "py", "full_reference": "skimage.transform.pyramids.pyramid_reduce", "raw_gpt3.5": "1. gauss\n2. laplace\n3. pyramid_expand\n4. pyramid_gaussian\n5. pyramid_laplacian\n6. pyramid_reduce\n7. pyramid_weighted_reduce\n8. pyramid_weighted_expand\n9. pyramid_expand_grey\n10. pyramid_reduce_grey\n11. pyramid_expand_color\n12. pyramid_reduce_color\n13. pyramid_expand_fast\n14. pyramid_reduce_fast\n15. pyramid_expand_layer\n16. pyramid_reduce_layer\n17. pyramid_expand_layer_grey\n18. pyramid_reduce_layer_grey\n19. pyramid_expand_layer_color\n20. pyramid_reduce_layer_color"}
{"mask": "first", "input": "mxnet.<mask>_scheduler.FactorScheduler(", "reference": "lr", "full_reference": "mxnet.lr_scheduler.FactorScheduler", "raw_gpt3.5": "1. step\n2. multi\n3. cosine\n4. poly\n5. linear\n6. exponential\n7. warmup\n8. power\n9. inverse\n10. cyclic\n11. plateau\n12. cosineannealing\n13. reduceonplateau\n14. piecewise\n15. milestone\n16. constant\n17. logarithmic\n18. triangular\n19. triangular2\n20. sigmoid"}
{"mask": "first", "input": "cms.api.<mask>_title(", "reference": "create", "full_reference": "cms.api.create_title", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. create\n5. delete\n6. render\n7. format\n8. parse\n9. generate\n10. retrieve\n11. modify\n12. fetch\n13. display\n14. render_\n15. format_\n16. parse_\n17. generate_\n18. retrieve_\n19. modify_\n20. fetch_"}
{"mask": "all", "input": "audiogen.<mask>.constant(", "reference": "util", "full_reference": "audiogen.util.constant", "raw_gpt3.5": "1. PI\n2. E\n3. TAU\n4. GOLDEN_RATIO\n5. SQRT2\n6. SQRT1_2\n7. INF\n8. NAN\n9. MAX_EXPONENT\n10. MIN_EXPONENT\n11. MAXIMUM\n12. MINIMUM\n13. RAD_TO_DEG\n14. DEG_TO_RAD\n15. EPSILON\n16. LOG2E\n17. LOG10E\n18. LN2\n19. LN10\n20. PHI"}
{"mask": "last", "input": "dall<mask>.config.initialize_experiment_package(", "reference": "inger", "full_reference": "dallinger.config.initialize_experiment_package", "raw_gpt3.5": "1. _utils\n2. _config\n3. _core\n4. _experiment\n5. _logging\n6. _metrics\n7. _params\n8. _registry\n9. _resources\n10. _serialization\n11. _storage\n12. _testing\n13. _types\n14. _version\n15. _visualization\n16. _workflow\n17. _yaml\n18. _exceptions\n19. _hooks\n20. _callbacks"}
{"mask": "all", "input": "MyCapytain.common.utils.<mask>.passageLoop(", "reference": "xml", "full_reference": "MyCapytain.common.utils.xml.passageLoop", "raw_gpt3.5": "1. urn\n2. xml\n3. json\n4. text\n5. file\n6. string\n7. iterator\n8. node\n9. element\n10. document\n11. parser\n12. serializer\n13. reader\n14. writer\n15. encoder\n16. decoder\n17. filter\n18. handler\n19. callback\n20. wrapper"}
{"mask": "all", "input": "vpnchooser.db.<mask>.delete(", "reference": "session", "full_reference": "vpnchooser.db.session.delete", "raw_gpt3.5": "1. all\n2. one\n3. many\n4. by_id\n5. by_name\n6. by_date\n7. by_user\n8. by_group\n9. by_status\n10. by_type\n11. by_size\n12. by_location\n13. by_owner\n14. by_permission\n15. by_extension\n16. by_content\n17. by_metadata\n18. by_checksum\n19. by_query\n20. by_filter"}
{"mask": "all", "input": "baiji.s3.path.<mask>(", "reference": "join", "full_reference": "baiji.s3.path.join", "raw_gpt3.5": "1. join\n2. split\n3. exists\n4. isdir\n5. isfile\n6. abspath\n7. basename\n8. dirname\n9. expanduser\n10. expandvars\n11. getsize\n12. isabs\n13. islink\n14. normcase\n15. normpath\n16. realpath\n17. relpath\n18. samefile\n19. sameopenfile\n20. samestat"}
{"mask": "last", "input": "harvesting<mask>.utils.format_arxiv_id(", "reference": "kit", "full_reference": "harvestingkit.utils.format_arxiv_id", "raw_gpt3.5": "1. date\n2. author\n3. title\n4. journal\n5. volume\n6. issue\n7. page\n8. doi\n9. url\n10. category\n11. abstract\n12. keywords\n13. citation\n14. reference\n15. affiliation\n16. institution\n17. country\n18. language\n19. publisher\n20. editor"}
{"mask": "all", "input": "Crypto.Util.Padding.<mask>(", "reference": "pad", "full_reference": "Crypto.Util.Padding.pad", "raw_gpt3.5": "1. pad\n2. unpad\n3. PKCS7\n4. ANSI_X923\n5. ISO10126\n6. pad_with_size\n7. pad_with_pkcs7\n8. pad_with_ansix923\n9. pad_with_iso10126\n10. pad_with_pss\n11. pad_with_oaep\n12. pad_with_pkcs1v15\n13. pad_with_pkcs1os\n14. pad_with_pkcs1pss\n15. pad_with_pkcs1v15encode\n16. pad_with_pkcs1osencode\n17. pad_with_pkcs1pssencode\n18. pad_with_pkcs1v15decode\n19. pad_with_pkcs1osdecode\n20. pad_with_pkcs1pssdecode"}
{"mask": "last", "input": "web3._<mask>.validation.validate_address(", "reference": "utils", "full_reference": "web3._utils.validation.validate_address", "raw_gpt3.5": "1. checksum\n2. utils\n3. account\n4. exceptions\n5. mainnet\n6. testnet\n7. rinkeby\n8. kovan\n9. goerli\n10. eth\n11. bsc\n12. heco\n13. polygon\n14. xDai\n15. harmony\n16. avalanche\n17. fantom\n18. arbitrum\n19. optimism\n20. zkSync"}
{"mask": "all", "input": "zengine.lib.<mask>.Session(", "reference": "cache", "full_reference": "zengine.lib.cache.Session", "raw_gpt3.5": "1. auth\n2. config\n3. database\n4. encryption\n5. exception\n6. logging\n7. middleware\n8. network\n9. protocol\n10. security\n11. serialization\n12. storage\n13. testing\n14. transaction\n15. ui\n16. util\n17. validation\n18. version\n19. web\n20. workflow"}
{"mask": "first", "input": "samcli.commands.local.lib.local_lambda_service.<mask>LambdaService(", "reference": "Local", "full_reference": "samcli.commands.local.lib.local_lambda_service.LocalLambdaService", "raw_gpt3.5": "1. _start\n2. _stop\n3. _create_lambda_context\n4. _get_runtime\n5. _get_handler\n6. _get_event_body\n7. _get_event_type\n8. _get_content_type\n9. _get_request_id\n10. _get_remaining_time\n11. _get_function_name\n12. _get_function_version\n13. _get_memory_limit_in_mb\n14. _get_log_group_name\n15. _get_log_stream_name\n16. _get_cognito_identity\n17. _get_client_context\n18. _get_invoked_function_arn\n19. _get_deadline_ms\n20. _get_xray_trace_id"}
{"mask": "last", "input": "auto_version.replacement_handler.Replacement<mask>(", "reference": "Handler", "full_reference": "auto_version.replacement_handler.ReplacementHandler", "raw_gpt3.5": "1. Rule\n2. Handler\n3. Function\n4. Manager\n5. Strategy\n6. Factory\n7. Provider\n8. Resolver\n9. Generator\n10. Processor\n11. Adapter\n12. Selector\n13. Executor\n14. Decorator\n15. Transformer\n16. Validator\n17. Converter\n18. Builder\n19. Scheduler\n20. Observer"}
{"mask": "last", "input": "_lxc.Container.get_config_<mask>(", "reference": "item", "full_reference": "_lxc.Container.get_config_item", "raw_gpt3.5": "1. path\n2. item\n3. option\n4. value\n5. item_value\n6. item_keys\n7. item_values\n8. item_set\n9. item_delete\n10. item_clear\n11. item_pop\n12. item_popitem\n13. item_update\n14. item_copy\n15. item_fromkeys\n16. item_get\n17. item_items\n18. item_keys_view\n19. item_values_view\n20. item_items_view"}
{"mask": "first", "input": "tensor2tensor.utils.usr_dir.<mask>_usr_dir(", "reference": "import", "full_reference": "tensor2tensor.utils.usr_dir.import_usr_dir", "raw_gpt3.5": "1. add\n2. create\n3. delete\n4. edit\n5. get\n6. import\n7. list\n8. load\n9. modify\n10. new\n11. open\n12. remove\n13. save\n14. set\n15. update\n16. upload\n17. view\n18. write\n19. generate\n20. initialize"}
{"mask": "last", "input": "pyrocore.util.load_config.Config<mask>(", "reference": "Loader", "full_reference": "pyrocore.util.load_config.ConfigLoader", "raw_gpt3.5": "1. Parser\n2. File\n3. Path\n4. Loader\n5. Reader\n6. Writer\n7. Manager\n8. Builder\n9. Validator\n10. Resolver\n11. Encoder\n12. Decoder\n13. Formatter\n14. Handler\n15. Collector\n16. Extractor\n17. Generator\n18. Merger\n19. Processor\n20. Sampler"}
{"mask": "last", "input": "aikif.tool<mask>.network_tools.download_file_no_logon(", "reference": "box", "full_reference": "aikif.toolbox.network_tools.download_file_no_logon", "raw_gpt3.5": "1. s\n2. i\n3. n\n4. g\n5. e\n6. t\n7. u\n8. r\n9. l\n10. _ \n11. n\n12. a\n13. m\n14. e\n15. _\n16. f\n17. r\n18. o\n19. m\n20. _"}
{"mask": "last", "input": "plexapi.sync.MediaSettings.create<mask>(", "reference": "Music", "full_reference": "plexapi.sync.MediaSettings.createMusic", "raw_gpt3.5": "1. _subtitle\n2. _subtitle_size\n3. _subtitle_color\n4. _subtitle_offset\n5. _subtitle_outline\n6. _subtitle_background\n7. _subtitle_font\n8. _subtitle_encoding\n9. _subtitle_default\n10. _subtitle_forced\n11. _subtitle_burn\n12. _subtitle_forced_only\n13. _subtitle_track\n14. _subtitle_codec\n15. _subtitle_language\n16. _subtitle_delay\n17. _subtitle_forced_track\n18. _subtitle_forced_language\n19. _subtitle_forced_delay\n20. _subtitle_forced_track_only"}
{"mask": "first", "input": "flask.current_app.<mask>_map.iter_rules(", "reference": "url", "full_reference": "flask.current_app.url_map.iter_rules", "raw_gpt3.5": "1. endpoint\n2. view\n3. url\n4. methods\n5. subdomain\n6. host\n7. defaults\n8. build_only\n9. strict_slashes\n10. redirect_to\n11. alias\n12. compare\n13. is_endpoint_expecting\n14. is_endpoint_matching\n15. is_overridden_by\n16. provide_automatic_options\n17. get\n18. add\n19. pop\n20. __contains__"}
{"mask": "last", "input": "inlinesty<mask>.converter.Conversion(", "reference": "ler", "full_reference": "inlinestyler.converter.Conversion", "raw_gpt3.5": "1. s\n2. y\n3. l\n4. e\n5. r\n6. t\n7. o\n8. n\n9. e\n10. r\n11. .\n12. c\n13. o\n14. n\n15. v\n16. e\n17. r\n18. s\n19. i\n20. o"}
{"mask": "first", "input": "<mask>appdbg.win32.WTSEnumerateProcesses(", "reference": "win", "full_reference": "winappdbg.win32.WTSEnumerateProcesses", "raw_gpt3.5": "1. _winapi\n2. ctypes\n3. win32api\n4. pywintypes\n5. win32con\n6. win32event\n7. win32security\n8. win32service\n9. win32ts\n10. win32ui\n11. win32evtlog\n12. win32file\n13. win32job\n14. win32net\n15. win32pdh\n16. win32pipe\n17. win32print\n18. win32process\n19. win32profile\n20. win32ras"}
{"mask": "all", "input": "von_agent.<mask>.rev_reg_id2cred_def_id__tag(", "reference": "util", "full_reference": "von_agent.util.rev_reg_id2cred_def_id__tag", "raw_gpt3.5": "1. get\n2. set\n3. delete\n4. create\n5. update\n6. add\n7. remove\n8. list\n9. retrieve\n10. generate\n11. check\n12. find\n13. filter\n14. sort\n15. count\n16. validate\n17. encrypt\n18. decrypt\n19. serialize\n20. deserialize"}
{"mask": "last", "input": "wx.List<mask>.DeleteItem(", "reference": "Ctrl", "full_reference": "wx.ListCtrl.DeleteItem", "raw_gpt3.5": "1. Columns\n2. Items\n3. Strings\n4. Selection\n5. AllItems\n6. Rows\n7. Selected\n8. Indices\n9. CheckedItems\n10. CheckedStrings\n11. CheckedIndices\n12. CheckedRows\n13. CheckedSelection\n14. CheckedAllItems\n15. UncheckedItems\n16. UncheckedStrings\n17. UncheckedIndices\n18. UncheckedRows\n19. UncheckedSelection\n20. UncheckedAllItems"}
{"mask": "first", "input": "bcbio.variation.vcfutils.<mask>_paired_bams(", "reference": "get", "full_reference": "bcbio.variation.vcfutils.get_paired_bams", "raw_gpt3.5": "1. get\n2. merge\n3. filter\n4. check\n5. index\n6. sort\n7. group\n8. validate\n9. compare\n10. intersect\n11. count\n12. remove\n13. split\n14. combine\n15. select\n16. annotate\n17. calculate\n18. normalize\n19. trim\n20. adjust"}
{"mask": "all", "input": "snapcast.<mask>.client.Snapclient(", "reference": "control", "full_reference": "snapcast.control.client.Snapclient", "raw_gpt3.5": "1. host\n2. port\n3. name\n4. id\n5. volume\n6. latency\n7. server\n8. stream\n9. status\n10. mute\n11. unmute\n12. connect\n13. disconnect\n14. get_status\n15. set_volume\n16. set_latency\n17. set_name\n18. set_server\n19. set_stream\n20. is_connected"}
{"mask": "first", "input": "<mask>cf_parser.init_log(", "reference": "v", "full_reference": "vcf_parser.init_log", "raw_gpt3.5": "1. py\n2. bio\n3. cf\n4. yaml\n5. json\n6. configparser\n7. logging\n8. argparse\n9. configparser\n10. toml\n11. configparser\n12. configparser\n13. configparser\n14. configparser\n15. configparser\n16. configparser\n17. configparser\n18. configparser\n19. configparser\n20. configparser"}
{"mask": "first", "input": "<mask>r_response_server.export.ExportedMetadata(", "reference": "gr", "full_reference": "grr_response_server.export.ExportedMetadata", "raw_gpt3.5": "1. server\n2. client\n3. worker\n4. master\n5. manager\n6. request\n7. response\n8. metadata\n9. export\n10. import\n11. serializer\n12. deserializer\n13. protocol\n14. message\n15. connection\n16. transport\n17. endpoint\n18. security\n19. authentication\n20. authorization"}
{"mask": "first", "input": "pypi_download_stats.<mask>datacache.DiskDataCache(", "reference": "disk", "full_reference": "pypi_download_stats.diskdatacache.DiskDataCache", "raw_gpt3.5": "1. _get\n2. _set\n3. _delete\n4. _clear\n5. _load\n6. _dump\n7. _hash\n8. _size\n9. _path\n10. _check\n11. _expire\n12. _cleanup\n13. _lock\n14. _unlock\n15. _is_locked\n16. _get_lock_path\n17. _get_cache_path\n18. _get_cache_size\n19. _get_cache_usage\n20. _get_cache_info"}
{"mask": "last", "input": "bcb<mask>.pipeline.datadict.get_algorithm_qc(", "reference": "io", "full_reference": "bcbio.pipeline.datadict.get_algorithm_qc", "raw_gpt3.5": "1. _io\n2. _core\n3. _utils\n4. _exceptions\n5. _config\n6. _logging\n7. _compat\n8. _version\n9. _testing\n10. _validation\n11. _metrics\n12. _visualization\n13. _preprocessing\n14. _model_selection\n15. _feature_extraction\n16. _cluster\n17. _classification\n18. _regression\n19. _ensemble\n20. _svm"}
{"mask": "all", "input": "pyrogram.client.<mask>.BaseClient.MEDIA_TYPE_ID.get(", "reference": "ext", "full_reference": "pyrogram.client.ext.BaseClient.MEDIA_TYPE_ID.get", "raw_gpt3.5": "1. api_id\n2. session\n3. phone_number\n4. phone_code_hash\n5. phone_code\n6. phone_code_raw\n7. phone_code_hash_raw\n8. phone_number_raw\n9. phone_number_formatted\n10. phone_number_e164\n11. phone_number_canonical\n12. phone_number_normalized\n13. phone_number_international\n14. phone_number_local\n15. phone_number_national\n16. phone_number_extension\n17. phone_number_country_code\n18. phone_number_area_code\n19. phone_number_subscriber_number\n20. phone_number_valid"}
{"mask": "first", "input": "<mask>piece.entries.models.Entry.no_join.get(", "reference": "time", "full_reference": "timepiece.entries.models.Entry.no_join.get", "raw_gpt3.5": "1. _ : 0.9999\n2. _queryset : 0.0001\n3. _meta : 0.0000\n4. _default_manager : 0.0000\n5. _base_manager : 0.0000\n6. _get_pk_val : 0.0000\n7. _get_unique_checks : 0.0000\n8. _get_FIELD_display : 0.0000\n9. _get_next_or_previous_by_FIELD : 0.0000\n10. _get_next_or_previous_in_order : 0.0000\n11. _get_next_or_previous_by_PK : 0.0000\n12. _get_next_or_previous_by_date : 0.0000\n13. _get_next_or_previous_by_id : 0.0000\n14. _get_next_or_previous_by : 0.0000\n15. _get_next_or_previous_by_FIELD_and_date : 0.0000\n16. _get_next_or_previous_by_FIELD_and_id : 0.0000\n17. _get_next_or_previous_by_date_and_id : 0.0000\n18. _get_next_or_previous_by_FIELD_and_PK : 0.0000\n19. _get_next_or_previous_by_date_and_PK : 0.0000\n20. _get_next_or_previous_by_FIELD_and_date_and_id : 0.0000"}
{"mask": "last", "input": "flask.request.form.to_<mask>(", "reference": "dict", "full_reference": "flask.request.form.to_dict", "raw_gpt3.5": "1. dict\n2. json\n3. csv\n4. xml\n5. yaml\n6. html\n7. list\n8. set\n9. tuple\n10. pandas\n11. dataframe\n12. sql\n13. bytes\n14. file\n15. string\n16. int\n17. float\n18. bool\n19. date\n20. time"}
{"mask": "all", "input": "basic_cms.<mask>.get_language_from_request(", "reference": "http", "full_reference": "basic_cms.http.get_language_from_request", "raw_gpt3.5": "1. request\n2. http\n3. utils\n4. middleware\n5. settings\n6. core\n7. views\n8. decorators\n9. models\n10. forms\n11. admin\n12. context_processors\n13. templatetags\n14. fields\n15. widgets\n16. apps\n17. exceptions\n18. cache\n19. auth\n20. middleware_classes"}
{"mask": "last", "input": "kat<mask>.core.hashable_identity(", "reference": "cp", "full_reference": "katcp.core.hashable_identity", "raw_gpt3.5": "1. katcp.core.hashable_identity(\n2. katpoint.core.hashable_identity(\n3. katdal.core.hashable_identity(\n4. katpoint.core.hashable_identity(\n5. katcp.core.hashable_identity(\n6. katpoint.core.hashable_identity(\n7. katdal.core.hashable_identity(\n8. katcp.core.hashable_identity(\n9. katpoint.core.hashable_identity(\n10. katdal.core.hashable_identity(\n11. katcp.core.hashable_identity(\n12. katpoint.core.hashable_identity(\n13. katdal.core.hashable_identity(\n14. katcp.core.hashable_identity(\n15. katpoint.core.hashable_identity(\n16. katdal.core.hashable_identity(\n17. katcp.core.hashable_identity(\n18. katpoint.core.hashable_identity(\n19. katdal.core.hashable_identity(\n20. katcp.core.hashable_identity("}
{"mask": "last", "input": "cleverhans.attacks.fast_gradient_<mask>.optimize_linear(", "reference": "method", "full_reference": "cleverhans.attacks.fast_gradient_method.optimize_linear", "raw_gpt3.5": "1. targeted\n2. untargeted\n3. sparse\n4. dense\n5. projected\n6. random\n7. iterative\n8. momentum\n9. sign\n10. squared\n11. l1\n12. l2\n13. infinity\n14. batch\n15. single\n16. multi\n17. binary\n18. categorical\n19. softmax\n20. logit"}
{"mask": "all", "input": "neo.<mask>.Utils.is_ip_address(", "reference": "Network", "full_reference": "neo.Network.Utils.is_ip_address", "raw_gpt3.5": "1. validate\n2. parse\n3. check\n4. convert\n5. extract\n6. format\n7. resolve\n8. normalize\n9. detect\n10. generate\n11. match\n12. sanitize\n13. compare\n14. encode\n15. decode\n16. filter\n17. locate\n18. retrieve\n19. substitute\n20. verify"}
{"mask": "first", "input": "pmagpy.<mask>ag.resolve_file_name(", "reference": "pm", "full_reference": "pmagpy.pmag.resolve_file_name", "raw_gpt3.5": "1. read\n2. get\n3. set\n4. write\n5. check\n6. find\n7. parse\n8. create\n9. update\n10. delete\n11. load\n12. save\n13. open\n14. close\n15. append\n16. execute\n17. replace\n18. validate\n19. generate\n20. normalize"}
{"mask": "first", "input": "registrasion.models.commerce.<mask>Note.refunded(", "reference": "Credit", "full_reference": "registrasion.models.commerce.CreditNote.refunded", "raw_gpt3.5": "1. Order\n2. Payment\n3. Transaction\n4. Invoice\n5. Refund\n6. Credit\n7. Charge\n8. Balance\n9. Receipt\n10. Debit\n11. Return\n12. Discount\n13. Coupon\n14. Voucher\n15. Giftcard\n16. Loyalty\n17. Reward\n18. Point\n19. Redemption\n20. Exchange"}
{"mask": "all", "input": "python_pachyderm.<mask>.pfs.pfs_pb2.ListRepoRequest(", "reference": "client", "full_reference": "python_pachyderm.client.pfs.pfs_pb2.ListRepoRequest", "raw_gpt3.5": "1. repo\n2. commit\n3. branch\n4. file\n5. object\n6. metadata\n7. tag\n8. diff\n9. history\n10. pipeline\n11. job\n12. secret\n13. auth\n14. client\n15. context\n16. error\n17. event\n18. filter\n19. grpc\n20. options"}
{"mask": "first", "input": "<mask>opy.io.shapereader.Reader(", "reference": "cart", "full_reference": "cartopy.io.shapereader.Reader", "raw_gpt3.5": "1. fiona\n2. geopandas\n3. shapefile\n4. pyshp\n5. osgeo\n6. shapely\n7. ogr\n8. pyproj\n9. cartopy\n10. rasterio\n11. descartes\n12. matplotlib\n13. basemap\n14. gdal\n15. pygeos\n16. geoplot\n17. geoviews\n18. geoparsepy\n19. geos\n20. geotiler"}
{"mask": "first", "input": "<mask>int.textui.puts(", "reference": "cl", "full_reference": "clint.textui.puts", "raw_gpt3.5": "1. term: `curses`\n2. urwid: `display`\n3. blessed: `terminal`\n4. prompt_toolkit: `print_formatted_text`\n5. click: `echo`\n6. rich: `print`\n7. colorama: `init`\n8. pyfiglet: `Figlet`\n9. tabulate: `tabulate`\n10. colorlog: `basicConfig`\n11. termcolor: `colored`\n12. clint: `puts`\n13. halo: `Halo`\n14. loguru: `logger`\n15. coloredlogs: `install`\n16. progressbar: `ProgressBar`\n17. PyInquirer: `prompt`\n18. Pygments: `highlight`\n19. termplotlib: `plot`\n20. ascii_graph: `plot`"}
{"mask": "all", "input": "deeppavlov.utils.alexa.<mask>.Bot(", "reference": "bot", "full_reference": "deeppavlov.utils.alexa.bot.Bot", "raw_gpt3.5": "1. handler\n2. request\n3. response\n4. skill\n5. session\n6. intent\n7. attributes\n8. directives\n9. speech\n10. audio\n11. video\n12. display\n13. interfaces\n14. api\n15. client\n16. event\n17. context\n18. exception\n19. logger\n20. settings"}
{"mask": "first", "input": "fedoidcmsg.bundle.<mask>wks_to_keyjar(", "reference": "j", "full_reference": "fedoidcmsg.bundle.jwks_to_keyjar", "raw_gpt3.5": "1. _jwks\n2. _jwks_uri\n3. _jwks_file\n4. _jwks_bundle\n5. _jwks_bundle_uri\n6. _jwks_bundle_file\n7. _jwks_bundle_dir\n8. _jwks_bundle_dir_uri\n9. _jwks_bundle_dir_file\n10. _jwks_bundle_dir_path\n11. _jwks_bundle_dir_path_uri\n12. _jwks_bundle_dir_path_file\n13. _jwks_bundle_dir_path_list\n14. _jwks_bundle_dir_path_list_uri\n15. _jwks_bundle_dir_path_list_file\n16. _jwks_bundle_dir_path_list_dict\n17. _jwks_bundle_dir_path_list_dict_uri\n18. _jwks_bundle_dir_path_list_dict_file\n19. _jwks_bundle_dir_path_list_dict_str\n20. _jwks_bundle_dir_path_list_dict_str_uri"}
{"mask": "all", "input": "salt.<mask>.args.get_function_argspec(", "reference": "utils", "full_reference": "salt.utils.args.get_function_argspec", "raw_gpt3.5": "1. module\n2. function\n3. name\n4. obj\n5. args\n6. kwargs\n7. arg\n8. value\n9. signature\n10. annotations\n11. docstring\n12. globals\n13. locals\n14. frame\n15. code\n16. closure\n17. defaults\n18. kwonlyargs\n19. kwonlydefaults\n20. varargs"}
{"mask": "first", "input": "OpenSSL.<mask>util.lib.SSL_set_SSL_CTX(", "reference": "_", "full_reference": "OpenSSL._util.lib.SSL_set_SSL_CTX", "raw_gpt3.5": "1. crypto\n2. rand\n3. err\n4. bio\n5. asn1\n6. pkcs12\n7. x509\n8. ocsp\n9. ts\n10. hmac\n11. evp\n12. dh\n13. dsa\n14. rsa\n15. ec\n16. ssl\n17. tls\n18. dtls\n19. lhash\n20. conf"}
{"mask": "last", "input": "openquake.common<mask>.oqzip.zip_exposure(", "reference": "lib", "full_reference": "openquake.commonlib.oqzip.zip_exposure", "raw_gpt3.5": "1. .exposure\n2. .oqzip\n3. .zip\n4. .zip_exposure\n5. .oqzip.zip\n6. .common\n7. .oqzip.zip_exposure\n8. .oqzip.zip.exposure\n9. .zip_exposure(\n10. .oqzip.zip.\n11. .oqzip.zip_exposure(\n12. .common.oqzip.zip_exposure(\n13. .oqzip.zip_exposure\n14. .common.oqzip.zip\n15. .oqzip.zip.exposure(\n16. .common.oqzip.zip_exposure\n17. .oqzip.zip_exposure(\n18. .zip_exposure\n19. .oqzip.zip.\n20. .common.oqzip.zip.exposure("}
{"mask": "first", "input": "neuromllite.utils.<mask>_json(", "reference": "load", "full_reference": "neuromllite.utils.load_json", "raw_gpt3.5": "1. load\n2. dump\n3. loads\n4. dumps\n5. validate\n6. generate\n7. parse\n8. encode\n9. decode\n10. read\n11. write\n12. from\n13. into\n14. with\n15. as\n16. to\n17. convert\n18. serialize\n19. deserialize\n20. extract"}
{"mask": "last", "input": "hwtGraph.el<mask>.containers.lNode.LayoutExternalPort(", "reference": "k", "full_reference": "hwtGraph.elk.containers.lNode.LayoutExternalPort", "raw_gpt3.5": "1. ement\n2. ementary\n3. ementation\n4. ementationList\n5. ementationListContainer\n6. ementationListContainerIntf\n7. ementationListContainerIntfMap\n8. ementationListContainerIntfMapItem\n9. ementationListContainerIntfMapItemKey\n10. ementationListContainerIntfMapItemValue\n11. ementationListContainerIntfMapKey\n12. ementationListContainerIntfMapValue\n13. ementationListIntf\n14. ementationListIntfMap\n15. ementationListIntfMapItem\n16. ementationListIntfMapItemKey\n17. ementationListIntfMapItemValue\n18. ementationListIntfMapKey\n19. ementationListIntfMapValue\n20. ementationListKey"}
{"mask": "all", "input": "twisted.internet.<mask>.getProcessOutputAndValue(", "reference": "utils", "full_reference": "twisted.internet.utils.getProcessOutputAndValue", "raw_gpt3.5": "1. reactor\n2. protocol\n3. endpoints\n4. defer\n5. task\n6. error\n7. interfaces\n8. abstract\n9. utils\n10. tcp\n11. udp\n12. ssl\n13. process\n14. posixbase\n15. fdesc\n16. stdio\n17. gireactor\n18. gtk3reactor\n19. wxreactor\n20. qt5reactor"}
{"mask": "first", "input": "purity_fb.<mask>urityFb(", "reference": "P", "full_reference": "purity_fb.PurityFb", "raw_gpt3.5": "1. get_data: purity_fb.getData()\n2. set_data: purity_fb.setData()\n3. add_data: purity_fb.addData()\n4. remove_data: purity_fb.removeData()\n5. update_data: purity_fb.updateData()\n6. clear_data: purity_fb.clearData()\n7. get_info: purity_fb.getInfo()\n8. set_info: purity_fb.setInfo()\n9. add_info: purity_fb.addInfo()\n10. remove_info: purity_fb.removeInfo()\n11. update_info: purity_fb.updateInfo()\n12. clear_info: purity_fb.clearInfo()\n13. get_config: purity_fb.getConfig()\n14. set_config: purity_fb.setConfig()\n15. add_config: purity_fb.addConfig()\n16. remove_config: purity_fb.removeConfig()\n17. update_config: purity_fb.updateConfig()\n18. clear_config: purity_fb.clearConfig()\n19. get_status: purity_fb.getStatus()\n20. set_status: purity_fb.setStatus()"}
{"mask": "first", "input": "networking_cisco.<mask>2_drivers.nexus.nexus_db_v2.get_nve_switch_bindings(", "reference": "ml", "full_reference": "networking_cisco.ml2_drivers.nexus.nexus_db_v2.get_nve_switch_bindings", "raw_gpt3.5": "1. vpc\n2. interface\n3. vlan\n4. port\n5. fabric\n6. switch\n7. peer\n8. nve\n9. database\n10. config\n11. state\n12. neighbor\n13. mac\n14. address\n15. route\n16. protocol\n17. multicast\n18. security\n19. session\n20. statistics"}
{"mask": "first", "input": "<mask>utils.nodes.line(", "reference": "doc", "full_reference": "docutils.nodes.line", "raw_gpt3.5": "1. graph\n2. networkx\n3. pyvis\n4. vis\n5. plotly\n6. matplotlib\n7. bokeh\n8. igraph\n9. holoviews\n10. seaborn\n11. altair\n12. d3\n13. ggplot\n14. mpl\n15. chart\n16. visdom\n17. node\n18. edge\n19. path\n20. shape"}
{"mask": "first", "input": "audiomate.corpus.subset.utils.<mask>_identifiers_splitted_by_weights(", "reference": "get", "full_reference": "audiomate.corpus.subset.utils.get_identifiers_splitted_by_weights", "raw_gpt3.5": "1. get\n2. load\n3. split\n4. filter\n5. generate\n6. group\n7. sort\n8. combine\n9. extract\n10. calculate\n11. compute\n12. aggregate\n13. match\n14. parse\n15. process\n16. transform\n17. validate\n18. normalize\n19. convert\n20. analyze"}
{"mask": "first", "input": "sherpa.<mask>ro.ui.xsapec(", "reference": "ast", "full_reference": "sherpa.astro.ui.xsapec", "raw_gpt3.5": "1. fit\n2. data\n3. plot\n4. load\n5. set_\n6. get_\n7. calc\n8. conf\n9. init\n10. set_x\n11. set_y\n12. set_z\n13. set_data\n14. set_model\n15. set_pars\n16. set_source\n17. set_stat\n18. set_syserror\n19. set_xlog\n20. set_ylog"}
{"mask": "all", "input": "<mask>.read(", "reference": "os", "full_reference": "os.read", "raw_gpt3.5": "1. file.read()\n2. gzip.read()\n3. io.read()\n4. socket.read()\n5. ssl.read()\n6. tarfile.read()\n7. zipfile.read()\n8. mmap.read()\n9. http.client.read()\n10. http.server.read()\n11. http.cookiejar.read()\n12. http.cookies.read()\n13. xml.etree.ElementTree.read()\n14. xml.sax.read()\n15. csv.read()\n16. json.read()\n17. os.read()\n18. subprocess.read()\n19. select.read()\n20. signal.read()"}
{"mask": "first", "input": "<mask>32api.GetSystemDirectory(", "reference": "win", "full_reference": "win32api.GetSystemDirectory", "raw_gpt3.5": "1. win\n2. ctypes\n3. pywintypes\n4. winreg\n5. win32com\n6. win32gui\n7. win32net\n8. win32print\n9. win32security\n10. win32service\n11. win32timezone\n12. win32transaction\n13. win32ts\n14. win32ui\n15. win32evtlog\n16. win32evtlogutil\n17. win32file\n18. win32job\n19. win32pipe\n20. win32pdh"}
{"mask": "first", "input": "<mask>ogo.accent.get_accent_string(", "reference": "b", "full_reference": "bogo.accent.get_accent_string", "raw_gpt3.5": "1. l : 'l'\n2. a : 'a'\n3. c : 'c'\n4. e : 'e'\n5. n : 'n'\n6. t : 't'\n7. . : '.'\n8. g : 'get_accent_string'\n9. e : 'e'\n10. t : 't'\n11. _ : '_'\n12. a : 'accent'\n13. c : 'accent'\n14. c : 'accent'\n15. e : 'accent'\n16. n : 'accent'\n17. t : 'accent'\n18. . : 'accent'\n19. g : 'accent'\n20. e : 'accent'"}
{"mask": "all", "input": "<mask>.encode(", "reference": "string", "full_reference": "string.encode", "raw_gpt3.5": "1. str\n2. bytes\n3. bytearray\n4. codecs\n5. unicode_escape\n6. utf-8\n7. ascii\n8. latin1\n9. utf-16\n10. utf-32\n11. base64\n12. hex\n13. zlib\n14. gzip\n15. bz2\n16. quopri\n17. uu\n18. binascii\n19. punycode\n20. idna"}
{"mask": "first", "input": "<mask>r_response_server.rdfvalues.objects.APIAuditEntry.FromHttpRequestResponse(", "reference": "gr", "full_reference": "grr_response_server.rdfvalues.objects.APIAuditEntry.FromHttpRequestResponse", "raw_gpt3.5": "1. protob\n2. jsonb\n3. msgpackb\n4. bsonb\n5. pickleb\n6. xmlb\n7. thriftb\n8. avro\n9. grpc\n10. http\n11. tcp\n12. udp\n13. websocket\n14. ssl\n15. ssh\n16. ftp\n17. sftp\n18. smtp\n19. imap\n20. pop3"}
{"mask": "all", "input": "inception.inception_model.<mask>(", "reference": "loss", "full_reference": "inception.inception_model.loss", "raw_gpt3.5": "1. predict\n2. evaluate\n3. train\n4. load_weights\n5. save_weights\n6. summary\n7. fit\n8. compile\n9. layers\n10. input\n11. output\n12. get_layer\n13. set_weights\n14. get_weights\n15. from_config\n16. build\n17. call\n18. trainable_weights\n19. non_trainable_weights\n20. add_loss"}
{"mask": "all", "input": "PyPDF2.<mask>.PageObject.createBlankPage(", "reference": "pdf", "full_reference": "PyPDF2.pdf.PageObject.createBlankPage", "raw_gpt3.5": "1. mediaBox\n2. rotate\n3. mergePage\n4. mergeRotatedPage\n5. mergeScaledTranslatedPage\n6. mergeTranslatedPage\n7. mergeRotatedScaledPage\n8. mergeRotatedTranslatedPage\n9. mergeScaledPage\n10. mergeScaledRotatedPage\n11. mergeScaledRotatedTranslatedPage\n12. mergeTransformedPage\n13. mergeTransformedScaledPage\n14. mergeTransformedRotatedPage\n15. mergeTransformedTranslatedPage\n16. mergeTransformedScaledRotatedPage\n17. mergeTransformedScaledRotatedTranslatedPage\n18. mergeTransformedScaledTranslatedPage\n19. mergeTransformedRotatedTranslatedPage\n20. mergeTransformedScaledTranslatedRotatedPage"}
{"mask": "first", "input": "<mask>py.api.file_upload(", "reference": "dx", "full_reference": "dxpy.api.file_upload", "raw_gpt3.5": "1. dropbox\n2. google\n3. aws\n4. azure\n5. box\n6. s3\n7. onedrive\n8. ftp\n9. webdav\n10. sharepoint\n11. owncloud\n12. nextcloud\n13. backblaze\n14. pcloud\n15. mega\n16. hubic\n17. yandex\n18. synology\n19. seafile\n20. owncloudpy"}
{"mask": "first", "input": "tensorboard.compat.tf2.debugging.<mask>_non_negative(", "reference": "assert", "full_reference": "tensorboard.compat.tf2.debugging.assert_non_negative", "raw_gpt3.5": "1. assert\n2. check\n3. ensure\n4. enforce\n5. validate\n6. verify\n7. require\n8. assert_\n9. check_\n10. ensure_\n11. enforce_\n12. validate_\n13. verify_\n14. require_\n15. assert_non_negative\n16. check_non_negative\n17. ensure_non_negative\n18. enforce_non_negative\n19. validate_non_negative\n20. verify_non_negative"}
{"mask": "first", "input": "watchdog.utils.<mask>_attribute(", "reference": "has", "full_reference": "watchdog.utils.has_attribute", "raw_gpt3.5": "1. get\n2. set\n3. delete\n4. has\n5. is\n6. add\n7. remove\n8. update\n9. clear\n10. find\n11. filter\n12. validate\n13. normalize\n14. serialize\n15. deserialize\n16. parse\n17. format\n18. encode\n19. decode\n20. generate"}
{"mask": "first", "input": "<mask>acl._sodium.ffi.new(", "reference": "n", "full_reference": "nacl._sodium.ffi.new", "raw_gpt3.5": "1. crypto_secretbox_keygen\n2. crypto_secretbox\n3. crypto_secretbox_open\n4. crypto_secretstream_xchacha20poly1305_keygen\n5. crypto_secretstream_xchacha20poly1305_init_push\n6. crypto_secretstream_xchacha20poly1305_push\n7. crypto_secretstream_xchacha20poly1305_init_pull\n8. crypto_secretstream_xchacha20poly1305_pull\n9. crypto_pwhash\n10. crypto_pwhash_str\n11. crypto_pwhash_str_verify\n12. crypto_pwhash_scryptsalsa208sha256\n13. crypto_pwhash_scryptsalsa208sha256_str\n14. crypto_pwhash_scryptsalsa208sha256_str_verify\n15. crypto_box_keypair\n16. crypto_box_seed_keypair\n17. crypto_box_easy\n18. crypto_box_open_easy\n19. crypto_box_beforenm\n20. crypto_box_easy_afternm"}
{"mask": "last", "input": "django.core.management.sql.sql_<mask>(", "reference": "all", "full_reference": "django.core.management.sql.sql_all", "raw_gpt3.5": "1. custom\n2. compiler\n3. all\n4. create\n5. delete\n6. drop\n7. flush\n8. insert\n9. rebuild\n10. reset\n11. sequence_reset\n12. sql_flush\n13. sql_create\n14. sql_delete\n15. sql_indexes\n16. sql_all\n17. sql_custom\n18. sql_create_inline\n19. sql_delete_inline\n20. sql_indexes_inline"}
{"mask": "last", "input": "aws_encryption_sdk.internal.crypto.data_keys.derive_data_encryption_<mask>(", "reference": "key", "full_reference": "aws_encryption_sdk.internal.crypto.data_keys.derive_data_encryption_key", "raw_gpt3.5": "1. materials\n2. key\n3. algorithm\n4. context\n5. iv\n6. key_material\n7. key_from_master\n8. key_from_raw_material\n9. key_from_password\n10. key_from_seed\n11. key_from_bytes\n12. key_from_derivation_material\n13. key_from_encrypted_data_key\n14. key_from_encrypted_data_key_material\n15. key_from_encrypted_data_key_materials\n16. key_from_encrypted_data_keys\n17. key_from_encrypted_data_key_list\n18. key_from_encrypted_data_key_set\n19. key_from_encrypted_data_key_dict\n20. key_from_encrypted_data_key_tuple"}
{"mask": "first", "input": "vcs.exceptions.<mask>AlreadyRemovedError(", "reference": "Node", "full_reference": "vcs.exceptions.NodeAlreadyRemovedError", "raw_gpt3.5": "1. Data: \n2. Variable: \n3. Object: \n4. Attribute: \n5. Item: \n6. Key: \n7. Element: \n8. Index: \n9. Value: \n10. Type: \n11. Name: \n12. Module: \n13. Function: \n14. Method: \n15. Class: \n16. Instance: \n17. Error: \n18. Warning: \n19. Exception: \n20. RuntimeError:"}
{"mask": "last", "input": "von_<mask>.util.schema_key(", "reference": "agent", "full_reference": "von_agent.util.schema_key", "raw_gpt3.5": "1. to_dict\n2. from_dict\n3. get_schema_key\n4. schema_key\n5. get_schema\n6. get_schema_keys\n7. get_schema_key_from_dict\n8. get_schema_key_from_obj\n9. get_schema_key_from_json\n10. get_schema_key_from_yaml\n11. get_schema_key_from_file\n12. get_schema_key_from_url\n13. get_schema_key_from_path\n14. get_schema_key_from_string\n15. get_schema_key_from_bytes\n16. get_schema_key_from_stream\n17. get_schema_key_from_buffer\n18. get_schema_key_from_input\n19. get_schema_key_from_output\n20. get_schema_key_from_database"}
{"mask": "last", "input": "comm<mask>.cosmology_list.WMAP1_2dF_mean(", "reference": "ah", "full_reference": "commah.cosmology_list.WMAP1_2dF_mean", "raw_gpt3.5": "1. ology\n2. osmology\n3. ismology\n4. asmology\n5. usmology\n6. esmology\n7. tsmology\n8. nsmology\n9. lsmology\n10. mology\n11. csmology\n12. bsmology\n13. hsmology\n14. psmology\n15. qsmology\n16. rsmology\n17. ssmology\n18. vsmology\n19. wsmology\n20. xsmology"}
{"mask": "last", "input": "dxpy.api.project_<mask>(", "reference": "new", "full_reference": "dxpy.api.project_new", "raw_gpt3.5": "1. new\n2. list\n3. remove\n4. rename\n5. describe\n6. set_properties\n7. unset_properties\n8. set_visibility\n9. set_tags\n10. add_tags\n11. remove_tags\n12. get_details\n13. get_properties\n14. get_visibility\n15. get_tags\n16. get_stats\n17. get_activity\n18. get_permissions\n19. set_permissions\n20. remove_permissions"}
{"mask": "first", "input": "gi.repository.Gio.<mask>FDList.new_from_array(", "reference": "Unix", "full_reference": "gi.repository.Gio.UnixFDList.new_from_array", "raw_gpt3.5": "1. in\n2. out\n3. err\n4. memory\n5. file\n6. directory\n7. socket\n8. fifo\n9. char\n10. block\n11. event\n12. poll\n13. signal\n14. mount\n15. drive\n16. volume\n17. app_info\n18. content_type\n19. file_enumerator\n20. file_info"}
{"mask": "last", "input": "arc<mask>.JSONToFeatures_conversion(", "reference": "py", "full_reference": "arcpy.JSONToFeatures_conversion", "raw_gpt3.5": "1. _file\n2. _table\n3. _dict\n4. _string\n5. _json\n6. _data\n7. _feature\n8. _geometry\n9. _record\n10. _layer\n11. _dataset\n12. _input\n13. _output\n14. _schema\n15. _properties\n16. _fields\n17. _values\n18. _query\n19. _where\n20. _sql"}
{"mask": "first", "input": "<mask>osprovider.skos.ConceptScheme(", "reference": "sk", "full_reference": "skosprovider.skos.ConceptScheme", "raw_gpt3.5": "1. rdflib\n2. skos\n3. py\n4. concept\n5. provider\n6. rdf\n7. owl\n8. xml\n9. graph\n10. namespace\n11. store\n12. term\n13. plugin\n14. sparql\n15. query\n16. util\n17. exception\n18. serializer\n19. parser\n20. pluginstore"}
{"mask": "first", "input": "src.<mask>icml.data.db_operations.save_sql_to_files(", "reference": "sal", "full_reference": "src.salicml.data.db_operations.save_sql_to_files", "raw_gpt3.5": "1. src.mimicicml\n2. src.physioneticml\n3. src.icustayicml\n4. src.icd9icml\n5. src.charteventsicml\n6. src.labeventsicml\n7. src.outputeventsicml\n8. src.inputeventsicml\n9. src.demographicicml\n10. src.admissionicml\n11. src.procedureicml\n12. src.diagnosisicml\n13. src.microbiologyicml\n14. src.prescriptionsicml\n15. src.transfersicml\n16. src.cpteventsicml\n17. src.drgcodesicml\n18. src.hospitaladmissionicml\n19. src.hospitaldischargeicml\n20. src.hospitaltransfericml"}
{"mask": "all", "input": "mitogen.<mask>.UnicodeType(", "reference": "core", "full_reference": "mitogen.core.UnicodeType", "raw_gpt3.5": "1. str\n2. unicode\n3. bytes\n4. bytearray\n5. int\n6. float\n7. bool\n8. complex\n9. list\n10. tuple\n11. set\n12. frozenset\n13. dict\n14. object\n15. type\n16. module\n17. function\n18. method\n19. slice\n20. Ellipsis"}
{"mask": "last", "input": "py<mask>.analysis.analysis_utils.get_scan_parameter(", "reference": "bar", "full_reference": "pybar.analysis.analysis_utils.get_scan_parameter", "raw_gpt3.5": "1. core\n2. util\n3. test\n4. doc\n5. dev\n6. tools\n7. gui\n8. data\n9. math\n10. plot\n11. io\n12. stats\n13. signal\n14. optimize\n15. cluster\n16. sparse\n17. linalg\n18. fft\n19. random\n20. compat"}
{"mask": "all", "input": "py3o.<mask>.decoder.ForList(", "reference": "template", "full_reference": "py3o.template.decoder.ForList", "raw_gpt3.5": "1. xls\n2. ods\n3. csv\n4. json\n5. xml\n6. html\n7. txt\n8. docx\n9. pptx\n10. xlsx\n11. yaml\n12. ini\n13. cfg\n14. sql\n15. py\n16. pdf\n17. zip\n18. tar\n19. gz\n20. bz2"}
{"mask": "last", "input": "coeus_unity.commands.await_all_transforms_<mask>(", "reference": "exist", "full_reference": "coeus_unity.commands.await_all_transforms_exist", "raw_gpt3.5": "1. callback\n2. done\n3. futures\n4. results\n5. tasks\n6. transforms\n7. completed\n8. children\n9. parents\n10. nodes\n11. hierarchy\n12. dependencies\n13. metadata\n14. status\n15. errors\n16. progress\n17. timeouts\n18. retries\n19. exceptions\n20. cancellations"}
{"mask": "first", "input": "aeneas.ttswrappers.<mask>peakttswrapper.ESPEAKTTSWrapper(", "reference": "es", "full_reference": "aeneas.ttswrappers.espeakttswrapper.ESPEAKTTSWrapper", "raw_gpt3.5": "1. _s\n2. _p\n3. _t\n4. _r\n5. _m\n6. _l\n7. _n\n8. _f\n9. _d\n10. _c\n11. _b\n12. _g\n13. _h\n14. _i\n15. _k\n16. _v\n17. _w\n18. _x\n19. _y\n20. _z"}
{"mask": "all", "input": "pcapkit.const.ipv4.option_number.OptionNumber.<mask>(", "reference": "get", "full_reference": "pcapkit.const.ipv4.option_number.OptionNumber.get", "raw_gpt3.5": "1. copy\n2. end\n3. length\n4. min_length\n5. max_length\n6. pad\n7. reserved\n8. strict\n9. type\n10. value\n11. checksum\n12. data\n13. delta\n14. end_of_list\n15. extended_security\n16. internet_timestamp\n17. loose_source_route\n18. mtu_probe\n19. mtu_reply\n20. no_operation"}
{"mask": "last", "input": "mtools.util.grouping.Group<mask>(", "reference": "ing", "full_reference": "mtools.util.grouping.Grouping", "raw_gpt3.5": "1. Key\n2. By\n3. Name\n4. Id\n5. Index\n6. List\n7. Dict\n8. Tuple\n9. Set\n10. Object\n11. Data\n12. Frame\n13. Column\n14. Rows\n15. Values\n16. Array\n17. Iterator\n18. Generator\n19. Counter\n20. Factory"}
{"mask": "all", "input": "fabric.<mask>.warn_only(", "reference": "api", "full_reference": "fabric.api.warn_only", "raw_gpt3.5": "1. env\n2. settings\n3. context\n4. state\n5. local\n6. shell\n7. output\n8. abort\n9. hide\n10. sudo\n11. run\n12. prompt\n13. parallel\n14. execute\n15. contrib\n16. api\n17. tasks\n18. exceptions\n19. network\n20. colors"}
{"mask": "last", "input": "ontology.exception.error_code.ErrorCode.params_type_<mask>(", "reference": "error", "full_reference": "ontology.exception.error_code.ErrorCode.params_type_error", "raw_gpt3.5": "1. int\n2. str\n3. float\n4. bool\n5. list\n6. tuple\n7. dict\n8. set\n9. complex\n10. bytes\n11. bytearray\n12. memoryview\n13. frozenset\n14. None\n15. Ellipsis\n16. NotImplemented\n17. object\n18. Any\n19. Union\n20. Optional"}
{"mask": "last", "input": "_pydevd_bundle.pydevd_vars.eval_in_<mask>(", "reference": "context", "full_reference": "_pydevd_bundle.pydevd_vars.eval_in_context", "raw_gpt3.5": "1. frame\n2. context\n3. frame_context\n4. frame_context_\n5. frame_locals\n6. frame_locals_\n7. frame_globals\n8. frame_globals_\n9. frame_f_globals\n10. frame_f_globals_\n11. frame_locals_\n12. frame_locals__\n13. frame_globals__\n14. frame_f_globals__\n15. frame_globals___\n16. frame_f_globals___\n17. frame_locals___\n18. frame_locals____\n19. frame_globals____\n20. frame_f_globals____"}
{"mask": "last", "input": "imgProcessor.filters.masked<mask>.maskedFilter(", "reference": "Filter", "full_reference": "imgProcessor.filters.maskedFilter.maskedFilter", "raw_gpt3.5": "1. convolve\n2. median\n3. gaussian\n4. sobel\n5. laplace\n6. prewitt\n7. roberts\n8. scharr\n9. threshold\n10. rank\n11. wiener\n12. minimum\n13. maximum\n14. entropy\n15. percentile\n16. variance\n17. uniform\n18. adaptive\n19. difference\n20. frangi"}
{"mask": "first", "input": "indy.anoncreds.<mask>ver_get_credential(", "reference": "pro", "full_reference": "indy.anoncreds.prover_get_credential", "raw_gpt3.5": "1. issuer_\n2. cred_\n3. schema_\n4. cred_def_\n5. rev_reg_\n6. rev_reg_def_\n7. rev_reg_entry_\n8. proof_\n9. requested_\n10. proof_request_\n11. proof_request_builder_\n12. proof_request_data_\n13. proof_request_message_\n14. proof_request_message_builder_\n15. proof_request_message_data_\n16. proof_request_message_data_builder_\n17. proof_request_message_data_json_\n18. proof_request_message_data_json_builder_\n19. proof_request_message_json_\n20. proof_request_message_json_builder_"}
{"mask": "first", "input": "pex.<mask>_party.setuptools.extern.six.moves.http_client.InvalidURL(", "reference": "third", "full_reference": "pex.third_party.setuptools.extern.six.moves.http_client.InvalidURL", "raw_gpt3.5": "1. _scheme\n2. _netloc\n3. _userinfo\n4. _host\n5. _port\n6. _path\n7. _query\n8. _fragment\n9. _user\n10. _password\n11. _hostname\n12. _buffer\n13. _headers\n14. _body\n15. _content\n16. _cookies\n17. _encoding\n18. _json\n19. _method\n20. _status"}
{"mask": "last", "input": "pluggy.Plugin<mask>(", "reference": "Manager", "full_reference": "pluggy.PluginManager", "raw_gpt3.5": "1. Manager\n2. Spec\n3. Collection\n4. HookCallError\n5. HookimplMarker\n6. HookspecMarker\n7. HookCallStats\n8. HookimplResult\n9. HookspecParam\n10. HookimplHookCaller\n11. HookspecSource\n12. HookimplHookspecFirstResult\n13. HookimplHookspecFirstCaller\n14. HookimplHookspecLastResult\n15. HookimplHookspecLastCaller\n16. HookimplHookspecAllResult\n17. HookimplHookspecAllCaller\n18. HookimplHookspecArgs\n19. HookimplHookspecFirstArgs\n20. HookimplHookspecLastArgs"}
{"mask": "last", "input": "onelogin.saml<mask>.utils.OneLogin_Saml2_Error(", "reference": "2", "full_reference": "onelogin.saml2.utils.OneLogin_Saml2_Error", "raw_gpt3.5": "1. _constants\n2. _metadata\n3. _utils\n4. _xml\n5. _authn_request\n6. _settings\n7. _response\n8. _nameid\n9. _logout_request\n10. _logout_response\n11. _xmlsec\n12. _metadata_parser\n13. _idp_metadata_parser\n14. _sp_metadata_parser\n15. _signature\n16. _xml_utils\n17. _http\n18. _validators\n19. _compatibility\n20. _version"}
{"mask": "all", "input": "kitchen.text.<mask>.wrap(", "reference": "display", "full_reference": "kitchen.text.display.wrap", "raw_gpt3.5": "1. tokenizer\n2. encoder\n3. decoder\n4. normalizer\n5. preprocessor\n6. detokenizer\n7. segmenter\n8. splitter\n9. stemmer\n10. lemmatizer\n11. filter\n12. analyzer\n13. parser\n14. tagger\n15. chunker\n16. transformer\n17. scorer\n18. selector\n19. matcher\n20. converter"}
{"mask": "first", "input": "rig.utils.docstrings.<mask>_signature_to_docstring(", "reference": "add", "full_reference": "rig.utils.docstrings.add_signature_to_docstring", "raw_gpt3.5": "1. args\n2. kwargs\n3. func\n4. signature\n5. inspect\n6. _format\n7. _get_signature_params\n8. _get_signature_return\n9. _get_signature_exceptions\n10. _get_signature_example\n11. _get_signature_summary\n12. _get_signature_description\n13. _get_signature_notes\n14. _get_signature_references\n15. _get_signature_see_also\n16. _get_signature_warnings\n17. _get_signature_todo\n18. _get_signature_parameters\n19. _get_signature_returns\n20. _get_signature_exceptions_info"}
{"mask": "all", "input": "zipline.extensions.<mask>(", "reference": "load", "full_reference": "zipline.extensions.load", "raw_gpt3.5": "1. api\n2. bar_reader\n3. data\n4. exchange_info\n5. finance\n6. financial_data\n7. futures_data\n8. futures_info\n9. futures_roll\n10. futures_roll_calendar\n11. futures_roll_finder\n12. futures_roll_reader\n13. futures_roll_writer\n14. futures_rolls\n15. futures_rolls_calendar\n16. futures_rolls_finder\n17. futures_rolls_reader\n18. futures_rolls_writer\n19. futures_sim_data\n20. futures_sim_info"}
{"mask": "all", "input": "pyvips.<mask>.xyz(", "reference": "Image", "full_reference": "pyvips.Image.xyz", "raw_gpt3.5": "1. operation\n2. image\n3. band\n4. array\n5. metadata\n6. format\n7. region\n8. mask\n9. histogram\n10. cache\n11. error\n12. foreign\n13. matrix\n14. pixel\n15. property\n16. source\n17. target\n18. thumbnail\n19. tile\n20. vector"}
{"mask": "last", "input": "color<mask>.ansi.set_title(", "reference": "ama", "full_reference": "colorama.ansi.set_title", "raw_gpt3.5": "1. foreground\n2. background\n3. text\n4. colorama\n5. termcolor\n6. curses\n7. pygments\n8. colorsys\n9. color\n10. palette\n11. style\n12. theme\n13. scheme\n14. gradient\n15. hue\n16. saturation\n17. brightness\n18. luminance\n19. chroma\n20. contrast"}
{"mask": "first", "input": "pygeoc.utils.<mask>Class.string_match(", "reference": "String", "full_reference": "pygeoc.utils.StringClass.string_match", "raw_gpt3.5": "1. Geo\n2. Coordinate\n3. Distance\n4. Projection\n5. Shape\n6. Transformation\n7. Datum\n8. CRS\n9. Geometry\n10. Point\n11. Line\n12. Polygon\n13. MultiPoint\n14. MultiLine\n15. MultiPolygon\n16. Feature\n17. FeatureCollection\n18. WKT\n19. WKB\n20. JSON"}
{"mask": "all", "input": "SPD.<mask>.leastsq_jacobian.AraiCurvature(", "reference": "lib", "full_reference": "SPD.lib.leastsq_jacobian.AraiCurvature", "raw_gpt3.5": "1. SPD.utils.leastsq_jacobian.AraiCurvature\n2. SPD.optimize.leastsq_jacobian.AraiCurvature\n3. SPD.scipy.leastsq_jacobian.AraiCurvature\n4. SPD.stats.leastsq_jacobian.AraiCurvature\n5. SPD.math.leastsq_jacobian.AraiCurvature\n6. SPD.linalg.leastsq_jacobian.AraiCurvature\n7. SPD.signal.leastsq_jacobian.AraiCurvature\n8. SPD.cluster.leastsq_jacobian.AraiCurvature\n9. SPD.fft.leastsq_jacobian.AraiCurvature\n10. SPD.io.leastsq_jacobian.AraiCurvature\n11. SPD.sparse.leastsq_jacobian.AraiCurvature\n12. SPD.integrate.leastsq_jacobian.AraiCurvature\n13. SPD.constants.leastsq_jacobian.AraiCurvature\n14. SPD.distributions.leastsq_jacobian.AraiCurvature\n15. SPD.special.leastsq_jacobian.AraiCurvature\n16. SPD.ndimage.leastsq_jacobian.AraiCurvature\n17. SPD.interpolate.leastsq_jacobian.AraiCurvature\n18. SPD.cluster.vq.leastsq_jacobian.AraiCurvature\n19. SPD.cluster.hierarchy.leastsq_jacobian.AraiCurvature\n20. SPD.cluster.vq._vq.leastsq_jacobian.AraiCurvature"}
{"mask": "last", "input": "aeneas.diagnostics.Diagnostics.check_<mask>(", "reference": "all", "full_reference": "aeneas.diagnostics.Diagnostics.check_all", "raw_gpt3.5": "1. audio\n2. configuration\n3. consistency\n4. dependencies\n5. duration\n6. encoding\n7. errors\n8. file\n9. format\n10. integrity\n11. language\n12. metadata\n13. options\n14. parameters\n15. punctuation\n16. sanity\n17. silence\n18. stability\n19. synchronization\n20. version"}
{"mask": "last", "input": "vl<mask>.server.main(", "reference": "cp", "full_reference": "vlcp.server.main", "raw_gpt3.5": "1. api\n2. ew\n3. og\n4. ic\n5. ue\n6. is\n7. ua\n8. in\n9. er\n10. ar\n11. et\n12. es\n13. or\n14. en\n15. on\n16. as\n17. el\n18. um\n19. ly\n20. ig"}
{"mask": "first", "input": "cmsplugin_cascade.utils.<mask>_image_size(", "reference": "get", "full_reference": "cmsplugin_cascade.utils.get_image_size", "raw_gpt3.5": "1. get\n2. calculate\n3. determine\n4. set\n5. retrieve\n6. compute\n7. determine_optimal\n8. fetch\n9. determine_image\n10. determine_maximum\n11. determine_minimum\n12. determine_optimum\n13. determine_required\n14. determine_size\n15. determine_valid\n16. fetch_optimal\n17. get_maximum\n18. get_minimum\n19. get_optimal\n20. get_required"}
{"mask": "first", "input": "ray.<mask>cs_utils.TablePrefix_RAYLET_TASK_string.encode(", "reference": "g", "full_reference": "ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode", "raw_gpt3.5": "1. worker\n2. object\n3. core\n4. function\n5. actor\n6. placement\n7. task\n8. resource\n9. event\n10. monitor\n11. state\n12. profile\n13. exception\n14. tune\n15. cloudpickle\n16. gcs\n17. protobuf\n18. streaming\n19. dashboard\n20. autoscaler"}
{"mask": "first", "input": "winappdbg.<mask>io.HexOutput.integer(", "reference": "text", "full_reference": "winappdbg.textio.HexOutput.integer", "raw_gpt3.5": "1. to\n2. from_bytes\n3. to_bytes\n4. pack\n5. unpack\n6. read\n7. write\n8. read_int\n9. write_int\n10. read_uint\n11. write_uint\n12. read_long\n13. write_long\n14. read_ulong\n15. write_ulong\n16. read_float\n17. write_float\n18. read_double\n19. write_double\n20. read_string"}
{"mask": "last", "input": "plexapi.exceptions.Unknown<mask>(", "reference": "Type", "full_reference": "plexapi.exceptions.UnknownType", "raw_gpt3.5": "1. Exception\n2. Method\n3. Attribute\n4. Error\n5. Type\n6. Parameter\n7. Argument\n8. Option\n9. Flag\n10. Property\n11. Value\n12. Response\n13. Status\n14. Header\n15. Encoding\n16. Protocol\n17. Endpoint\n18. Resource\n19. Service\n20. Module"}
{"mask": "first", "input": "<mask>atok.ipa.is_letter(", "reference": "ip", "full_reference": "ipatok.ipa.is_letter", "raw_gpt3.5": "1. _sp\n2. _is\n3. _is_vowel\n4. _is_consonant\n5. _is_diacritic\n6. _is_punctuation\n7. _is_whitespace\n8. _is_upper\n9. _is_lower\n10. _is_title\n11. _is_alpha\n12. _is_digit\n13. _is_alnum\n14. _is_printable\n15. _is_graphic\n16. _is_control\n17. _is_ascii\n18. _is_surrogate\n19. _is_reserved\n20. _is_private_use"}
{"mask": "last", "input": "keras.backend.set_learning_<mask>(", "reference": "phase", "full_reference": "keras.backend.set_learning_phase", "raw_gpt3.5": "1. rate\n2. phase\n3. epsilon\n4. iterations\n5. threshold\n6. schedule\n7. gain\n8. momentum\n9. gamma\n10. policy\n11. style\n12. weights\n13. constraints\n14. function\n15. properties\n16. objectives\n17. parameters\n18. callbacks\n19. rate_decay\n20. gradient_clip"}
{"mask": "all", "input": "fermipy.<mask>.make_psf_kernel(", "reference": "utils", "full_reference": "fermipy.utils.make_psf_kernel", "raw_gpt3.5": "1. energy\n2. exposure\n3. psf\n4. kernel\n5. binning\n6. utils\n7. data\n8. irfs\n9. config\n10. modeling\n11. analysis\n12. catalog\n13. spectrum\n14. background\n15. image\n16. source\n17. gtutils\n18. skymap\n19. version\n20. logging"}
{"mask": "last", "input": "wilson.util.qcd.m_<mask>(", "reference": "c", "full_reference": "wilson.util.qcd.m_c", "raw_gpt3.5": "1. matrix\n2. meson\n3. module\n4. method\n5. momentum\n6. mass\n7. model\n8. manifold\n9. metric\n10. moment\n11. map\n12. multigrid\n13. multilevel\n14. multicanonical\n15. multicomponent\n16. multichannel\n17. multiboson\n18. multiblock\n19. multibranch\n20. multiclass"}
{"mask": "first", "input": "flask.<mask>_app.make_default_options_response(", "reference": "current", "full_reference": "flask.current_app.make_default_options_response", "raw_gpt3.5": "1. send - Sends a response with the default options.\n2. create - Creates a response with the default options.\n3. generate - Generates a response with the default options.\n4. build - Builds a response with the default options.\n5. prepare - Prepares a response with the default options.\n6. set - Sets a response with the default options.\n7. initialize - Initializes a response with the default options.\n8. format - Formats a response with the default options.\n9. update - Updates a response with the default options.\n10. get - Gets a response with the default options.\n11. render - Renders a response with the default options.\n12. handle - Handles a response with the default options.\n13. process - Processes a response with the default options.\n14. configure - Configures a response with the default options.\n15. compute - Computes a response with the default options.\n16. execute - Executes a response with the default options.\n17. define - Defines a response with the default options.\n18. parse - Parses a response with the default options.\n19. retrieve - Retrieves a response with the default options.\n20. validate - Validates a response with the default options."}
{"mask": "first", "input": "requests_mock.response.<mask>_response(", "reference": "create", "full_reference": "requests_mock.response.create_response", "raw_gpt3.5": "1. json\n2. text\n3. content\n4. status_code\n5. headers\n6. cookies\n7. reason\n8. elapsed\n9. history\n10. is_permanent_redirect\n11. is_redirect\n12. is_ok\n13. is_client_error\n14. is_server_error\n15. is_redirect\n16. is_permanent_redirect\n17. is_informational\n18. is_redirection\n19. is_success\n20. is_error"}
{"mask": "last", "input": "misc.generate_vcs_info.call_<mask>(", "reference": "out", "full_reference": "misc.generate_vcs_info.call_out", "raw_gpt3.5": "1. hash\n2. info\n3. log\n4. status\n5. diff\n6. commit\n7. branch\n8. tag\n9. remote\n10. merge\n11. revert\n12. annotate\n13. blame\n14. fetch\n15. push\n16. pull\n17. checkout\n18. reset\n19. cherry_pick\n20. apply"}
{"mask": "last", "input": "dwave.cloud.utils.generate_random_ising_<mask>(", "reference": "problem", "full_reference": "dwave.cloud.utils.generate_random_ising_problem", "raw_gpt3.5": "1. problem\n2. h\n3. j\n4. couplings\n5. linear\n6. quadratic\n7. interactions\n8. fields\n9. model\n10. parameters\n11. instance\n12. samples\n13. solutions\n14. energies\n15. probabilities\n16. states\n17. spins\n18. variables\n19. graphs\n20. matrices"}
{"mask": "last", "input": "boiler.user.services.user_service.attempt_social_<mask>(", "reference": "login", "full_reference": "boiler.user.services.user_service.attempt_social_login", "raw_gpt3.5": "1. login\n2. share\n3. connect\n4. invite\n5. follow\n6. network\n7. post\n8. message\n9. like\n10. comment\n11. recommend\n12. endorse\n13. block\n14. unfollow\n15. subscribe\n16. notify\n17. confirm\n18. accept\n19. reject\n20. request"}
{"mask": "all", "input": "ctyped.<mask>.CRef.cfloat(", "reference": "types", "full_reference": "ctyped.types.CRef.cfloat", "raw_gpt3.5": "1. real\n2. imag\n3. conjugate\n4. __add__\n5. __sub__\n6. __mul__\n7. __truediv__\n8. __floordiv__\n9. __mod__\n10. __divmod__\n11. __pow__\n12. __lshift__\n13. __rshift__\n14. __and__\n15. __xor__\n16. __or__\n17. __radd__\n18. __rsub__\n19. __rmul__\n20. __rtruediv__"}
{"mask": "first", "input": "pyemu.mat.mat_handler.Cov.<mask>_parameter_data(", "reference": "from", "full_reference": "pyemu.mat.mat_handler.Cov.from_parameter_data", "raw_gpt3.5": "1. num\n2. cov\n3. par\n4. get\n5. set\n6. add\n7. del\n8. est\n9. obs\n10. sim\n11. prior\n12. post\n13. inv\n14. diag\n15. full\n16. sparse\n17. symm\n18. as\n19. to\n20. from"}
{"mask": "first", "input": "<mask>man.exceptions.InvalidAuthSyntax(", "reference": "gold", "full_reference": "goldman.exceptions.InvalidAuthSyntax", "raw_gpt3.5": "1. saml2\n2. pysaml2\n3. onelogin\n4. python3_saml\n5. django_saml2_auth\n6. python_saml\n7. python3-saml\n8. python3-saml2\n9. python3-saml2aws\n10. python3-saml2idp\n11. python3-saml2sp\n12. python3-saml2xmlsec\n13. python3-saml2xmlsec1\n14. python3-saml2xmlsec1-bin\n15. python3-saml2xmlsec1-doc\n16. python3-saml2xmlsec1-dbg\n17. python3-saml2xmlsec1-dev\n18. python3-saml2xmlsec1-dev-doc\n19. python3-saml2xmlsec1-dev-dbg\n20. python3-saml2xmlsec1-dev-dbg-doc"}
{"mask": "last", "input": "OpenSSL._util.lib.X509_STORE_CTX_get_error_<mask>(", "reference": "depth", "full_reference": "OpenSSL._util.lib.X509_STORE_CTX_get_error_depth", "raw_gpt3.5": "1. depth\n2. depth_string\n3. depth_string_long\n4. depth_string_short\n5. data\n6. data_count\n7. data_flags\n8. data_int\n9. data_long\n10. data_ptr\n11. data_short\n12. data_string\n13. data_string_long\n14. data_string_short\n15. data_void\n16. error\n17. error_string\n18. error_string_long\n19. error_string_short\n20. flags"}
{"mask": "first", "input": "toil.common.<mask>UnpickleFromStream(", "reference": "safe", "full_reference": "toil.common.safeUnpickleFromStream", "raw_gpt3.5": "1. job\n2. config\n3. file\n4. worker\n5. log\n6. batch\n7. module\n8. exception\n9. util\n10. task\n11. workflow\n12. process\n13. jobStore\n14. cache\n15. service\n16. jobGraph\n17. promise\n18. resource\n19. retry\n20. stats"}
{"mask": "all", "input": "pycoin.encoding.<mask>.public_pair_to_sec(", "reference": "sec", "full_reference": "pycoin.encoding.sec.public_pair_to_sec", "raw_gpt3.5": "1. compressed\n2. sec\n3. public_pair_to_hash160_sec\n4. public_pair_to_bitcoin_address\n5. public_pair_to_bitcoin_address_compressed\n6. public_pair_to_p2pkh\n7. public_pair_to_p2pkh_compressed\n8. public_pair_to_p2sh\n9. public_pair_to_p2sh_compressed\n10. public_pair_to_p2wpkh\n11. public_pair_to_p2wpkh_compressed\n12. public_pair_to_p2wsh\n13. public_pair_to_p2wsh_compressed\n14. public_pair_to_bech32_address\n15. public_pair_to_bech32_address_compressed\n16. public_pair_to_p2pkh_uncompressed\n17. public_pair_to_p2sh_uncompressed\n18. public_pair_to_p2wpkh_uncompressed\n19. public_pair_to_p2wsh_uncompressed\n20. public_pair_to_bech32_address_uncompressed"}
{"mask": "last", "input": "database.TokenBlacklist.query.filter_<mask>(", "reference": "by", "full_reference": "database.TokenBlacklist.query.filter_by", "raw_gpt3.5": "1. by\n2. all\n3. any\n4. asc\n5. desc\n6. eq\n7. gt\n8. gte\n9. ilike\n10. in_\n11. is_\n12. join\n13. like\n14. lt\n15. lte\n16. not_\n17. or_\n18. outerjoin\n19. startswith\n20. endswith"}
{"mask": "first", "input": "<mask>amg.util.utils.scale_rows(", "reference": "py", "full_reference": "pyamg.util.utils.scale_rows", "raw_gpt3.5": "1. skl\n2. scipy\n3. numpy\n4. pandas\n5. sklearn\n6. sklearn_pandas\n7. sklearn.preprocessing\n8. sklearn.preprocessing.data\n9. sklearn.preprocessing._data\n10. sklearn.preprocessing._data.StandardScaler\n11. sklearn.preprocessing._data.MinMaxScaler\n12. sklearn.preprocessing._data.RobustScaler\n13. sklearn.preprocessing._data.MaxAbsScaler\n14. sklearn.preprocessing._data.QuantileTransformer\n15. sklearn.preprocessing._data.PowerTransformer\n16. sklearn.preprocessing._data.KernelCenterer\n17. sklearn.preprocessing._data.normalize\n18. sklearn.preprocessing._data.binarize\n19. sklearn.preprocessing._data.scale\n20. sklearn.preprocessing._data.FunctionTransformer"}
{"mask": "first", "input": "<mask>4gh.schemas.protocol.HGVSAnnotation(", "reference": "ga", "full_reference": "ga4gh.schemas.protocol.HGVSAnnotation", "raw_gpt3.5": "1. v:  0.4gh.schemas.protocol.HGVSAnnotation(\n2. _init_:  0.4gh.schemas.protocol.HGVSAnnotation(\n3. _str_:  0.4gh.schemas.protocol.HGVSAnnotation(\n4. _repr_:  0.4gh.schemas.protocol.HGVSAnnotation(\n5. _eq_:  0.4gh.schemas.protocol.HGVSAnnotation(\n6. _ne_:  0.4gh.schemas.protocol.HGVSAnnotation(\n7. _hash_:  0.4gh.schemas.protocol.HGVSAnnotation(\n8. _class_:  0.4gh.schemas.protocol.HGVSAnnotation(\n9. _module_:  0.4gh.schemas.protocol.HGVSAnnotation(\n10. _doc_:  0.4gh.schemas.protocol.HGVSAnnotation(\n11. _del_:  0.4gh.schemas.protocol.HGVSAnnotation(\n12. _getattribute_:  0.4gh.schemas.protocol.HGVSAnnotation(\n13. _setattr_:  0.4gh.schemas.protocol.HGVSAnnotation(\n14. _dir_:  0.4gh.schemas.protocol.HGVSAnnotation(\n15. _sizeof_:  0.4gh.schemas.protocol.HGVSAnnotation(\n16. _format_:  0.4gh.schemas.protocol.HGVSAnnotation(\n17. _subclasshook_:  0.4gh.schemas.protocol.HGVSAnnotation(\n18. _init_subclass_:  0.4gh.schemas.protocol.HGVSAnnotation(\n19. _prepare_:  0.4gh.schemas.protocol.HGVSAnnotation(\n20. _instancecheck_:  0.4gh.schemas.protocol.HGVSAnnotation("}
{"mask": "first", "input": "salt.utils.aws.<mask>_exponential_backoff(", "reference": "sleep", "full_reference": "salt.utils.aws.sleep_exponential_backoff", "raw_gpt3.5": "1. max\n2. initial\n3. jitter\n4. retry\n5. default\n6. min\n7. factor\n8. calculate\n9. get\n10. set\n11. apply\n12. exponential\n13. sleep\n14. random\n15. backoff\n16. generate\n17. wait\n18. compute\n19. adjust\n20. perform"}
{"mask": "first", "input": "yamcs.protobuf.mdb.mdb_pb2.<mask>SystemInfo(", "reference": "Space", "full_reference": "yamcs.protobuf.mdb.mdb_pb2.SpaceSystemInfo", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. clear\n5. delete\n6. create\n7. add\n8. remove\n9. list\n10. retrieve\n11. query\n12. parse\n13. serialize\n14. encode\n15. decode\n16. validate\n17. generate\n18. build\n19. initialize\n20. check"}
{"mask": "last", "input": "curses.noc<mask>(", "reference": "break", "full_reference": "curses.nocbreak", "raw_gpt3.5": "1. nocbreak()\n2. nocbreak()\n3. nocbreak()\n4. nocbreak()\n5. nocbreak()\n6. nocbreak()\n7. nocbreak()\n8. nocbreak()\n9. nocbreak()\n10. nocbreak()\n11. nocbreak()\n12. nocbreak()\n13. nocbreak()\n14. nocbreak()\n15. nocbreak()\n16. nocbreak()\n17. nocbreak()\n18. nocbreak()\n19. nocbreak()\n20. nocbreak()"}
{"mask": "all", "input": "pytgbot.api_types.receivable.<mask>.Location(", "reference": "media", "full_reference": "pytgbot.api_types.receivable.media.Location", "raw_gpt3.5": "1. Message\n2. CallbackQuery\n3. InlineQuery\n4. ShippingQuery\n5. PreCheckoutQuery\n6. Poll\n7. PollAnswer\n8. ChosenInlineResult\n9. User\n10. Chat\n11. ChatMember\n12. Invoice\n13. SuccessfulPayment\n14. OrderInfo\n15. ShippingAddress\n16. LabeledPrice\n17. InputMessageContent\n18. PassportData\n19. EncryptedPassportElement\n20. EncryptedCredentials"}
{"mask": "first", "input": "<mask>ak.contactdowntime.ContactDowntime(", "reference": "align", "full_reference": "alignak.contactdowntime.ContactDowntime", "raw_gpt3.5": "1. b: ContactDowntime\n2. a: ak\n3. c: .contactdowntime.ContactDowntime\n4. p: ak.contactdowntime.ContactDowntimeParser\n5. s: ak.contactdowntime.ContactDowntimeSerializer\n6. m: ak.contactdowntime.ContactDowntimeManager\n7. f: ak.contactdowntime.ContactDowntimeFactory\n8. r: ak.contactdowntime.ContactDowntimeRequest\n9. i: ak.contactdowntime.ContactDowntimeInfo\n10. l: ak.contactdowntime.ContactDowntimeList\n11. e: ak.contactdowntime.ContactDowntimeError\n12. d: ak.contactdowntime.ContactDowntimeData\n13. n: ak.contactdowntime.ContactDowntimeNotification\n14. o: ak.contactdowntime.ContactDowntimeOptions\n15. t: ak.contactdowntime.ContactDowntimeTable\n16. v: ak.contactdowntime.ContactDowntimeView\n17. u: ak.contactdowntime.ContactDowntimeUpdate\n18. g: ak.contactdowntime.ContactDowntimeGroup\n19. h: ak.contactdowntime.ContactDowntimeHistory\n20. w: ak.contactdowntime.ContactDowntimeWriter"}
{"mask": "first", "input": "rtpipe.reproduce.<mask>_cand_plot(", "reference": "make", "full_reference": "rtpipe.reproduce.make_cand_plot", "raw_gpt3.5": "1. snr\n2. dm\n3. time\n4. freq\n5. dedisperse\n6. waterfall\n7. plot\n8. save\n9. load\n10. candidate\n11. dynamic\n12. threshold\n13. peak\n14. flux\n15. width\n16. score\n17. mask\n18. dedispersed\n19. integrated\n20. subbands"}
{"mask": "all", "input": "spotifyconnect._session_instance.player.<mask>(", "reference": "off", "full_reference": "spotifyconnect._session_instance.player.off", "raw_gpt3.5": "1. load\n2. play\n3. pause\n4. stop\n5. skip\n6. previous\n7. shuffle\n8. repeat\n9. volume\n10. mute\n11. unmute\n12. current_track\n13. current_album\n14. current_artist\n15. current_playlist\n16. queue\n17. seek\n18. duration\n19. position\n20. metadata"}
{"mask": "all", "input": "prosper.<mask>.prosper_config.ProsperConfig(", "reference": "common", "full_reference": "prosper.common.prosper_config.ProsperConfig", "raw_gpt3.5": "1. core\n2. utils\n3. api\n4. models\n5. exceptions\n6. logging\n7. config\n8. auth\n9. client\n10. data\n11. storage\n12. security\n13. metrics\n14. serialization\n15. testing\n16. decorators\n17. tasks\n18. middleware\n19. version\n20. extensions"}
{"mask": "last", "input": "salt.modules.environ.set<mask>(", "reference": "env", "full_reference": "salt.modules.environ.setenv", "raw_gpt3.5": "1. setdefault\n2. setenv\n3. setenvlist\n4. setenvvar\n5. setenvvars\n6. setenvs\n7. setenvvalue\n8. setenvvalues\n9. setenvvarlist\n10. setenvvarvalue\n11. setenvvarvalues\n12. setenvvarvaluelist\n13. setenvvarvaluelists\n14. setenvvarvaluedict\n15. setenvvarvaluedicts\n16. setenvvarvaluelistdict\n17. setenvvarvaluelistdicts\n18. setenvvarvaluelistdictlist\n19. setenvvarvaluelistdictlists\n20. setenvvarvaluelistdictdict."}
{"mask": "first", "input": "troposphere.s3.<mask>ingConfiguration(", "reference": "Version", "full_reference": "troposphere.s3.VersioningConfiguration", "raw_gpt3.5": "1. Encrypt\n2. Version\n3. Tagg\n4. Cach\n5. Provision\n6. Monitor\n7. Replicat\n8. Rout\n9. Benchmark\n10. Analyz\n11. Stream\n12. Index\n13. Sync\n14. Multipart\n15. Transfer\n16. Accelerat\n17. Decryption\n18. Access\n19. Block\n20. Presigned"}
{"mask": "all", "input": "sfctl.<mask>.set_ca_cert(", "reference": "config", "full_reference": "sfctl.config.set_ca_cert", "raw_gpt3.5": "1. ca_file\n2. ca_cert\n3. ca_path\n4. ca_key\n5. ca_password\n6. ca_subject\n7. ca_crl\n8. ca_crl_file\n9. ca_crl_path\n10. ca_crl_url\n11. ca_crl_check_all\n12. ca_crl_check_time\n13. ca_crl_check_leaf\n14. ca_crl_check_chain\n15. ca_crl_check_chain_strict\n16. ca_crl_check_chain_leaf\n17. ca_crl_check_chain_leaf_strict\n18. ca_crl_check_chain_all\n19. ca_crl_check_chain_all_strict\n20. ca_crl_check_chain_time"}
{"mask": "all", "input": "django.<mask>.defaultfilters.date(", "reference": "template", "full_reference": "django.template.defaultfilters.date", "raw_gpt3.5": "1. format\n2. template\n3. localize\n4. time\n5. year\n6. month\n7. day\n8. weekday\n9. isoformat\n10. timestamp\n11. strftime\n12. parse_date\n13. now\n14. utcnow\n15. today\n16. timeuntil\n17. timeince\n18. naturalday\n19. naturaltime\n20. timesince\\_or\\_never"}
{"mask": "all", "input": "projexui.<mask>.QtGui.QApplication.sendPostedEvents(", "reference": "qt", "full_reference": "projexui.qt.QtGui.QApplication.sendPostedEvents", "raw_gpt3.5": "1. projexui.widgets.QtCore\n2. projexui.widgets.QtGui\n3. projexui.widgets.QtWidgets\n4. projexui.widgets.QtNetwork\n5. projexui.widgets.QtOpenGL\n6. projexui.widgets.QtPrintSupport\n7. projexui.widgets.QtSql\n8. projexui.widgets.QtSvg\n9. projexui.widgets.QtTest\n10. projexui.widgets.QtUiTools\n11. projexui.widgets.QtWebKit\n12. projexui.widgets.QtXml\n13. projexui.widgets.QtXmlPatterns\n14. projexui.widgets.QtBluetooth\n15. projexui.widgets.QtConcurrent\n16. projexui.widgets.QtDBus\n17. projexui.widgets.QtDesigner\n18. projexui.widgets.QtHelp\n19. projexui.widgets.QtMultimedia\n20. projexui.widgets.QtMultimediaWidgets"}
{"mask": "all", "input": "cherrypy.<mask>.body.processors.clear(", "reference": "request", "full_reference": "cherrypy.request.body.processors.clear", "raw_gpt3.5": "1. request\n2. response\n3. server\n4. lib\n5. wsgiserver\n6. _cp\n7. _cpreqbody\n8. _cpdispatch\n9. _cperror\n10. _cplogging\n11. _cpnative_server\n12. _cpresponse\n13. _cptools\n14. _cpwsgi\n15. _cpcompat\n16. _cpconfig\n17. _cpencoding\n18. _cphttpserver\n19. _cpserver\n20. _cpcgifs"}
{"mask": "last", "input": "nilearn.image.resample_to_<mask>(", "reference": "img", "full_reference": "nilearn.image.resample_to_img", "raw_gpt3.5": "1.  affine\n2.  shape\n3.  target_img\n4.  resampled_img\n5.  img\n6.  resample_img\n7.  target_shape\n8.  resample_to_img\n9.  resample_to_img_like\n10. resample_to_img_or_4d\n11. resample_to_img_or_3d\n12. resample_to_img_or_same\n13. resample_to_img_or_2d_or_3d\n14. resample_to_img_or_3d_or_4d\n15. resample_to_img_or_same_or_4d\n16. resample_to_img_or_same_or_3d\n17. resample_to_img_or_same_or_2d\n18. resample_to_img_or_same_or_higher_dim\n19. resample_to_img_or_same_or_lower_dim\n20. resample_to_img_or_same_or_2d_or_3d_or_4d"}
{"mask": "first", "input": "<mask>orious.model.Crawl.is_aborted(", "reference": "mem", "full_reference": "memorious.model.Crawl.is_aborted", "raw_gpt3.5": "1. Glorious\n2. Notorious\n3. Victorious\n4. Laborious\n5. Delirious\n6. Hilarious\n7. Mysterious\n8. Spurious\n9. Furious\n10. Nefarious\n11. Aquarius\n12. Sagittarius\n13. Libra\n14. Scorpius\n15. Aries\n16. Taurus\n17. Gemini\n18. Cancerous\n19. Capricious\n20. Sagacious"}
{"mask": "all", "input": "networking_cisco.apps.saf.<mask>.utils.utc_time_lapse(", "reference": "common", "full_reference": "networking_cisco.apps.saf.common.utils.utc_time_lapse", "raw_gpt3.5": "1. get\n2. set\n3. update\n4. calculate\n5. format\n6. convert\n7. parse\n8. generate\n9. retrieve\n10. compute\n11. adjust\n12. determine\n13. measure\n14. extract\n15. transform\n16. normalize\n17. compare\n18. validate\n19. estimate\n20. analyze"}
{"mask": "all", "input": "dscan.<mask>.exceptions.CannotResumeException(", "reference": "common", "full_reference": "dscan.common.exceptions.CannotResumeException", "raw_gpt3.5": "1. Connection\n2. Session\n3. Authentication\n4. Authorization\n5. State\n6. Resume\n7. Transfer\n8. Protocol\n9. Request\n10. Response\n11. Socket\n12. Timeout\n13. Handshake\n14. SSL\n15. Proxy\n16. Redirect\n17. Invalid\n18. Unsupported\n19. Unhandled\n20. Unexpected"}
{"mask": "first", "input": "<mask>r_response_server.databases.db_compat.ProcessHuntFlowLog(", "reference": "gr", "full_reference": "grr_response_server.databases.db_compat.ProcessHuntFlowLog", "raw_gpt3.5": "1. ar\n2. or\n3. er\n4. ir\n5. ur\n6. pr\n7. gr\n8. fr\n9. dr\n10. vr\n11. jr\n12. kr\n13. wr\n14. zr\n15. xr\n16. yr\n17. hr\n18. lr\n19. mr\n20. nr"}
{"mask": "last", "input": "fancytools.math.Point3<mask>.Point3D(", "reference": "D", "full_reference": "fancytools.math.Point3D.Point3D", "raw_gpt3.5": "1. 1\n2. 2\n3. D\n4. 3\n5. 0\n6. 4\n7. 5\n8. 6\n9. 7\n10. 8\n11. 9\n12. A\n13. B\n14. C\n15. E\n16. F\n17. G\n18. H\n19. I\n20. J"}
{"mask": "all", "input": "heron.common.<mask>.python.utils.log.Log.getEffectiveLevel(", "reference": "src", "full_reference": "heron.common.src.python.utils.log.Log.getEffectiveLevel", "raw_gpt3.5": "1. logging\n2. config\n3. util\n4. constants\n5. exceptions\n6. metrics\n7. stats\n8. security\n9. serialization\n10. errors\n11. types\n12. functions\n13. decorators\n14. settings\n15. modules\n16. plugins\n17. resources\n18. data\n19. serialization\n20. serializationutils"}
{"mask": "last", "input": "google.gax._grpc_google_<mask>.get_default_credentials(", "reference": "auth", "full_reference": "google.gax._grpc_google_auth.get_default_credentials", "raw_gpt3.5": "1. auth\n2. cloud\n3. iam\n4. logging\n5. monitoring\n6. pubsub\n7. spanner\n8. storage\n9. datastore\n10. longrunning\n11. protobuf\n12. rpc\n13. ssl\n14. authn\n15. channel\n16. context\n17. credentials\n18. grpc\n19. metadata\n20. oauth2"}
{"mask": "first", "input": "<mask>ownet.protocol.proxy(", "reference": "py", "full_reference": "pyownet.protocol.proxy", "raw_gpt3.5": "1. py\n2. twisted\n3. zope\n4. autobahn\n5. tx\n6. twisted.internet\n7. autobahn.twisted\n8. twisted.internet.protocol\n9. twisted.protocols\n10. twisted.web\n11. twisted.web.client\n12. twisted.web.http\n13. twisted.web.server\n14. twisted.words\n15. twisted.words.protocols\n16. twisted.words.protocols.jabber\n17. twisted.words.xish\n18. twisted.words.xish.domish\n19. twisted.words.xish.xmlstream\n20. twisted.words.xish.xpath"}
{"mask": "last", "input": "safe.gui.tools.help.shakemap_converter_<mask>.content(", "reference": "help", "full_reference": "safe.gui.tools.help.shakemap_converter_help.content", "raw_gpt3.5": "1. directory\n2. path\n3. file\n4. format\n5. options\n6. settings\n7. converter\n8. module\n9. data\n10. utility\n11. parser\n12. config\n13. manager\n14. writer\n15. reader\n16. handler\n17. generator\n18. filter\n19. interface\n20. controller"}
{"mask": "first", "input": "api.global_.<mask>MBOL_TABLE.move_to_global_scope(", "reference": "SY", "full_reference": "api.global_.SYMBOL_TABLE.move_to_global_scope", "raw_gpt3.5": "1. SYM\n2. NAME\n3. IDENT\n4. SCOPE\n5. VAR\n6. FUNC\n7. CLASS\n8. MODULE\n9. IMPORT\n10. TYPE\n11. ATTRIBUTE\n12. METHOD\n13. EXCEPTION\n14. DECORATOR\n15. OPERATOR\n16. CONSTANT\n17. LITERAL\n18. EXPRESSION\n19. STATEMENT\n20. ARGUMENT"}
{"mask": "last", "input": "OPi.sys<mask>.output(", "reference": "fs", "full_reference": "OPi.sysfs.output", "raw_gpt3.5": "1. _debug\n2. _get_debug_info\n3. _get_output\n4. _get_output_lock\n5. _output\n6. _output_flush\n7. _output_init\n8. _output_is_console\n9. _output_is_enabled\n10. _output_redirector\n11. _output_set_error\n12. _output_set_warning\n13. _output_stderr\n14. _output_stdout\n15. _output_write\n16. _output_write_error\n17. _output_write_warning\n18. _output_written\n19. _set_debug_info\n20. _set_output_lock"}
{"mask": "all", "input": "xbahn.<mask>.connect(", "reference": "connection", "full_reference": "xbahn.connection.connect", "raw_gpt3.5": "1. host\n2. port\n3. username\n4. password\n5. database\n6. ssl\n7. timeout\n8. retries\n9. max_connections\n10. min_connections\n11. connection_timeout\n12. idle_timeout\n13. pool_recycle\n14. pool_size\n15. pool_timeout\n16. pool_use_lifo\n17. pool_pre_ping\n18. pool_reset_on_return\n19. poolclass\n20. creator\\_args"}
{"mask": "last", "input": "grr_response_<mask>.data_store.REL_DB.WriteHuntOutputPluginsStates(", "reference": "server", "full_reference": "grr_response_server.data_store.REL_DB.WriteHuntOutputPluginsStates", "raw_gpt3.5": "1. client\n2. server\n3. api\n4. utils\n5. common\n6. grpc\n7. protobuf\n8. http\n9. json\n10. yaml\n11. xml\n12. bson\n13. msgpack\n14. sqlite\n15. mysql\n16. postgres\n17. oracle\n18. mongodb\n19. redis\n20. memcached"}
{"mask": "first", "input": "dm.<mask>sec.binding.set_error_callback(", "reference": "xml", "full_reference": "dm.xmlsec.binding.set_error_callback", "raw_gpt3.5": "1. _handle\n2. _set\n3. _register\n4. _add\n5. _remove\n6. _clear\n7. _get\n8. _check\n9. _validate\n10. _execute\n11. _process\n12. _parse\n13. _format\n14. _serialize\n15. _deserialize\n16. _encode\n17. _decode\n18. _encrypt\n19. _decrypt\n20. _compress"}
{"mask": "last", "input": "pypi_download_<mask>.dataquery.DataQuery(", "reference": "stats", "full_reference": "pypi_download_stats.dataquery.DataQuery", "raw_gpt3.5": "1. execute\n2. get\n3. select\n4. fetch\n5. insert\n6. update\n7. delete\n8. count\n9. filter\n10. join\n11. group\n12. order\n13. distinct\n14. aggregate\n15. limit\n16. offset\n17. describe\n18. connect\n19. disconnect\n20. commit"}
{"mask": "first", "input": "_pydev_imps._pydev_saved_modules.socket.<mask>addrinfo(", "reference": "get", "full_reference": "_pydev_imps._pydev_saved_modules.socket.getaddrinfo", "raw_gpt3.5": "1. ai_flags\n2. ai_family\n3. ai_socktype\n4. ai_protocol\n5. ai_addrlen\n6. ai_canonname\n7. ai_addr\n8. ai_next\n9. AI_PASSIVE\n10. AI_CANONNAME\n11. AI_NUMERICHOST\n12. AI_NUMERICSERV\n13. AI_V4MAPPED\n14. AI_ALL\n15. AI_ADDRCONFIG\n16. AI_IDN\n17. AI_CANONIDN\n18. AI_IDN_ALLOW_UNASSIGNED\n19. AI_IDN_USE_STD3_ASCII_RULES\n20. AI_RETURN_PREFERRED_NAMESERVERS"}
{"mask": "last", "input": "mx<mask>.lr_scheduler.FactorScheduler(", "reference": "net", "full_reference": "mxnet.lr_scheduler.FactorScheduler", "raw_gpt3.5": "1. base\n2. _base\n3. init\n4. _init\n5. factor\n6. _factor\n7. step\n8. _step\n9. epoch\n10. _epoch\n11. update\n12. _update\n13. get\n14. _get\n15. set\n16. _set\n17. reset\n18. _reset\n19. apply\n20. _apply"}
{"mask": "last", "input": "raf<mask>.gui.helpers.label.get_notebook_tab_title(", "reference": "con", "full_reference": "rafcon.gui.helpers.label.get_notebook_tab_title", "raw_gpt3.5": "1. _text\n2. _label\n3. _title\n4. _name\n5. _tab\n6. _tab_title\n7. _tab_name\n8. _tablabel\n9. _tabtext\n10. _tab_title_text\n11. _tab_title_label\n12. _tab_title_name\n13. _tab_title_tab\n14. _tab_title_tablabel\n15. _tab_title_tabtext\n16. _tab_title_tab_name\n17. _tab_title_tab_label\n18. _tab_title_tab_text\n19. _tab_title_text_label\n20. _tab_title_text_name"}
{"mask": "last", "input": "raiden.transfer.channel.register_onchain_<mask>(", "reference": "secret", "full_reference": "raiden.transfer.channel.register_onchain_secret", "raw_gpt3.5": "1. close\n2. settle\n3. withdraw\n4. dispute\n5. update\n6. balance\n7. state\n8. event\n9. partner\n10. dispute_timeout\n11. reveal_timeout\n12. secret_reveal\n13. secret_registry\n14. token_network\n15. token_address\n16. channel_id\n17. onchain\n18. transaction\n19. payment\n20. contract"}
{"mask": "last", "input": "toolz.cur<mask>.get(", "reference": "ried", "full_reference": "toolz.curried.get", "raw_gpt3.5": "1. get_in\n2. get_in_or_default\n3. get_in_or_key_error\n4. get_in_or_none\n5. get_in_or_stop\n6. get_in_or_val\n7. get_in_or_val_default\n8. get_in_or_val_key_error\n9. get_in_or_val_none\n10. get_in_or_val_stop\n11. get_in_or_val_type_error\n12. get_in_or_val_value_error\n13. get_in_or_zero\n14. get_in_or_zero_default\n15. get_in_or_zero_key_error\n16. get_in_or_zero_none\n17. get_in_or_zero_stop\n18. get_in_or_zero_type_error\n19. get_in_or_zero_value_error\n20. get_in_type_error"}
{"mask": "first", "input": "pysummarization.vectorizabletoken.<mask>idf_vectorizer.TfidfVectorizer(", "reference": "tf", "full_reference": "pysummarization.vectorizabletoken.tfidf_vectorizer.TfidfVectorizer", "raw_gpt3.5": "1. fit\n2. transform\n3. get_feature_names\n4. idf_\n5. vocabulary_\n6. stop_words\n7. decode_error\n8. strip_accents\n9. lowercase\n10. preprocessor\n11. tokenizer\n12. analyzer\n13. stop_words_\n14. token_pattern\n15. ngram_range\n16. max_df\n17. min_df\n18. max_features\n19. binary\n20. dtype"}
{"mask": "first", "input": "tilde.core.model.Codeversion.<mask>_unique(", "reference": "as", "full_reference": "tilde.core.model.Codeversion.as_unique", "raw_gpt3.5": "1. get\n2. set\n3. is\n4. add\n5. remove\n6. find\n7. update\n8. generate\n9. create\n10. delete\n11. check\n12. increment\n13. decrement\n14. retrieve\n15. compare\n16. merge\n17. replace\n18. filter\n19. sort\n20. validate"}
{"mask": "last", "input": "myh<mask>.toVHDL(", "reference": "dl", "full_reference": "myhdl.toVHDL", "raw_gpt3.5": "1. d\n2. e\n3. f\n4. g\n5. i\n6. k\n7. l\n8. m\n9. n\n10. o\n11. p\n12. q\n13. r\n14. s\n15. t\n16. u\n17. v\n18. w\n19. x\n20. y"}
{"mask": "last", "input": "grr_response_server.data_<mask>.REL_DB.ListClientsForKeywords(", "reference": "store", "full_reference": "grr_response_server.data_store.REL_DB.ListClientsForKeywords", "raw_gpt3.5": "1. query\n2. filter\n3. search\n4. fetch\n5. retrieve\n6. get\n7. find\n8. match\n9. select\n10. scan\n11. lookup\n12. explore\n13. browse\n14. examine\n15. investigate\n16. inspect\n17. scrutinize\n18. survey\n19. probe\n20. analyze"}
{"mask": "all", "input": "iotile.core.<mask>.update.records.ReflashTileRecord(", "reference": "hw", "full_reference": "iotile.core.hw.update.records.ReflashTileRecord", "raw_gpt3.5": "1. device\n2. firmware\n3. tile\n4. update\n5. manager\n6. connection\n7. network\n8. protocol\n9. transport\n10. security\n11. authentication\n12. encryption\n13. compression\n14. serialization\n15. storage\n16. logging\n17. exception\n18. utility\n19. test\n20. version"}
{"mask": "all", "input": "raiden.<mask>.secret_registry.events_for_onchain_secretreveal(", "reference": "transfer", "full_reference": "raiden.transfer.secret_registry.events_for_onchain_secretreveal", "raw_gpt3.5": "1. event_filter\n2. contract_address\n3. abi\n4. from_block\n5. to_block\n6. topics\n7. block_identifier\n8. event_name\n9. event_signature\n10. event_data\n11. event\n12. event_logs\n13. event_abi\n14. event_topic\n15. event_index\n16. event_data_decoder\n17. event_signature_decoder\n18. event_topic_decoder\n19. event_data_types\n20. event_topic_types"}
{"mask": "last", "input": "salt.config.schemas.es<mask>.HostCacheSchema.serialize(", "reference": "xi", "full_reference": "salt.config.schemas.esxi.HostCacheSchema.serialize", "raw_gpt3.5": "1. serializer\n2. serializable\n3. serialization\n4. serialized\n5. serializes\n6. serializing\n7. serialism\n8. serialist\n9. seriality\n10. serialisable\n11. serialisation\n12. serializations\n13. serialised\n14. serialise\n15. serialises\n16. serialiser\n17. serialisers\n18. serializableattribute\n19. serializableobject\n20. serializableproperty"}
{"mask": "last", "input": "ib_ins<mask>.order.Trade(", "reference": "ync", "full_reference": "ib_insync.order.Trade", "raw_gpt3.5": "1. Info\n2. ight\n3. trument\n4. trumentLeg\n5. trumentLegs\n6. trumentType\n7. trumentTypes\n8. trumentBySymbol\n9. trumentByLocalSymbol\n10. trumentByExchange\n11. trumentByConId\n12. trumentBySecId\n13. trumentByIsin\n14. trumentByCusip\n15. trumentByFutFopExchange\n16. trumentByFutFopLocalSymbol\n17. trumentByCurrency\n18. trumentByMultiplier\n19. trumentByRight\n20. trumentByStrike"}
{"mask": "all", "input": "secretballot.models.Vote.<mask>.filter(", "reference": "objects", "full_reference": "secretballot.models.Vote.objects.filter", "raw_gpt3.5": "1. id\n2. objects\n3. values\n4. exclude\n5. get\n6. all\n7. annotate\n8. count\n9. create\n10. delete\n11. distinct\n12. exists\n13. filter_by\n14. first\n15. last\n16. order_by\n17. select_related\n18. update\n19. values_list\n20. prefetch_related"}
{"mask": "last", "input": "act<mask>.models.model_stream(", "reference": "stream", "full_reference": "actstream.models.model_stream", "raw_gpt3.5": "1. actor\n2. action\n3. activate\n4. active\n5. actual\n6. actuator\n7. activity\n8. actin\n9. actinium\n10. actinomycin\n11. actinide\n12. actinolite\n13. actinometer\n14. actinomycete\n15. actinobacteria\n16. actinobacillus\n17. actinomycosis\n18. actinopterygian\n19. actinobacterial\n20. actinobacilli"}
{"mask": "last", "input": "elasticap<mask>.utils.stacks.get_stack_info(", "reference": "m", "full_reference": "elasticapm.utils.stacks.get_stack_info", "raw_gpt3.5": "1. y\n2. i\n3. o\n4. u\n5. s\n6. t\n7. r\n8. a\n9. m\n10. e\n11. n\n12. t\n13. .c\n14. o\n15. n\n16. f\n17. i\n18. g\n19. u\n20. r"}
{"mask": "first", "input": "<mask>it_pexpect.ShutItPexpectSession(", "reference": "shut", "full_reference": "shutit_pexpect.ShutItPexpectSession", "raw_gpt3.5": "1. ex\n2. exi\n3. exit\n4. expec\n5. expect\n6. expect_\n7. expect_e\n8. expect_ex\n9. expect_exp\n10. expect_expe\n11. expect_expec\n12. expect_expect\n13. expect_expect_\n14. expect_expect_e\n15. expect_expect_ex\n16. expect_expect_exp\n17. expect_expect_expe\n18. expect_expect_expec\n19. expect_expect_expect\n20. expect_expect_expect_"}
{"mask": "first", "input": "<mask>stamp.commands.simple_call(", "reference": "doc", "full_reference": "docstamp.commands.simple_call", "raw_gpt3.5": "1. time\n2. date\n3. datetime\n4. timestamp\n5. unixtime\n6. microsecond\n7. nanosecond\n8. millisecond\n9. second\n10. minute\n11. hour\n12. day\n13. week\n14. month\n15. year\n16. utc\n17. local\n18. timezone\n19. daylight\n20. leap"}
{"mask": "first", "input": "projexui.widgets.<mask>lineedit.XLineEdit(", "reference": "x", "full_reference": "projexui.widgets.xlineedit.XLineEdit", "raw_gpt3.5": "1. set\n2. get\n3. clear\n4. text\n5. validate\n6. input\n7. mask\n8. cursor\n9. select\n10. insert\n11. focus\n12. background\n13. foreground\n14. placeholder\n15. alignment\n16. maxLength\n17. readOnly\n18. enabled\n19. font\n20. tooltip"}
{"mask": "last", "input": "pysolvers.minisatgh_setph<mask>(", "reference": "ases", "full_reference": "pysolvers.minisatgh_setphases", "raw_gpt3.5": "1. ase\n2. ase_\n3. aseert\n4. aseert_\n5. aseertion\n6. aseertion_\n7. aseertions\n8. aseertions_\n9. aseertive\n10. aseertive_\n11. aseertively\n12. aseertively_\n13. aseertiveness\n14. aseertiveness_\n15. aseertivenesses\n16. aseertivenesses_\n17. aseertor\n18. aseertor_\n19. aseerts\n20. aseerts_"}
{"mask": "all", "input": "pandas.core.dtypes.<mask>.maybe_convert_platform(", "reference": "cast", "full_reference": "pandas.core.dtypes.cast.maybe_convert_platform", "raw_gpt3.5": "1. infer\n2. is_\n3. common\n4. is_categorical_dtype\n5. is_datetime64_any_dtype\n6. is_datetime64_dtype\n7. is_datetime64tz_dtype\n8. is_dtype_equal\n9. is_extension_array_dtype\n10. is_float_dtype\n11. is_integer_dtype\n12. is_interval_dtype\n13. is_object_dtype\n14. is_period_dtype\n15. is_sparse\n16. is_string_dtype\n17. is_timedelta64_any_dtype\n18. is_timedelta64_dtype\n19. is_timedelta64tz_dtype\n20. maybe_convert_objects"}
{"mask": "last", "input": "smc.api.common.entry_<mask>.split(", "reference": "point", "full_reference": "smc.api.common.entry_point.split", "raw_gpt3.5": "1. delimiter\n2. point\n3. name\n4. path\n5. module\n6. point_name\n7. point_path\n8. point_module\n9. entry_name\n10. entry_path\n11. entry_module\n12. entry_point_name\n13. entry_point_path\n14. entry_point_module\n15. entry_point_split\n16. entry_point_join\n17. entry_point_replace\n18. entry_point_strip\n19. entry_point_upper\n20. entry_point_lower"}
{"mask": "all", "input": "google.cloud.bigquery.<mask>.UnknownJob.from_api_repr(", "reference": "job", "full_reference": "google.cloud.bigquery.job.UnknownJob.from_api_repr", "raw_gpt3.5": "1. Query\n2. Load\n3. Copy\n4. Extract\n5. Table\n6. Dataset\n7. Project\n8. Connection\n9. Storage\n10. Schema\n11. Model\n12. Reservation\n13. ReservationJob\n14. ReservationSlot\n15. ReservationCapacityCommitment\n16. ReservationAssignment\n17. ReservationGrpcTransport\n18. ReservationServiceClient\n19. ReservationServiceStub\n20. ReservationServiceTransport"}
{"mask": "first", "input": "<mask>_framework_json_api.utils.get_relation_instance(", "reference": "rest", "full_reference": "rest_framework_json_api.utils.get_relation_instance", "raw_gpt3.5": "1. django\n2. flask\n3. pyramid\n4. tornado\n5. aiohttp\n6. bottle\n7. hug\n8. sanic\n9. fastapi\n10. falcon\n11. connexion\n12. responder\n13. quart\n14. starlette\n15. web2py\n16. cherrypy\n17. webapp2\n18. klein\n19. nameko\n20. eve"}
{"mask": "first", "input": "sporco.admm.tvl2.<mask>L2Deconv.Options(", "reference": "TV", "full_reference": "sporco.admm.tvl2.TVL2Deconv.Options", "raw_gpt3.5": "1. rho\n2. gamma\n3. alpha\n4. beta\n5. tau\n6. sigma\n7. theta\n8. delta\n9. epsilon\n10. zeta\n11. eta\n12. iota\n13. kappa\n14. lambda\n15. mu\n16. nu\n17. xi\n18. omicron\n19. pi\n20. chi"}
{"mask": "last", "input": "asyncio.ensure_<mask>(", "reference": "future", "full_reference": "asyncio.ensure_future", "raw_gpt3.5": "1. future\n2. future_cancelled\n3. future_done\n4. future_state\n5. future_result\n6. future_exc\n7. future_traceback\n8. future_add_done_callback\n9. future_remove_done_callback\n10. future_set_result_if_pending\n11. future_set_exception_if_pending\n12. future_set_result\n13. future_set_exception\n14. future_add_done_callback\n15. future_remove_done_callback\n16. future_cancel\n17. future_running\n18. future_set_running_or_notify_cancel\n19. future_get_loop\n20. future_get_stacklimit"}
{"mask": "all", "input": "pymatgen.<mask>.bonds.CovalentBond.is_bonded(", "reference": "core", "full_reference": "pymatgen.core.bonds.CovalentBond.is_bonded", "raw_gpt3.5": "1. site\n2. structure\n3. lattice\n4. element\n5. symmetry\n6. neighbors\n7. distance\n8. angle\n9. periodicity\n10. coordination\n11. species\n12. properties\n13. analysis\n14. transformations\n15. core\n16. density\n17. electronic_structure\n18. ion\n19. magnetism\n20. utils"}
{"mask": "all", "input": "pandas.core.dtypes.<mask>.is_list_like(", "reference": "common", "full_reference": "pandas.core.dtypes.common.is_list_like", "raw_gpt3.5": "1. name\n2. common\n3. pandas\n4. api\n5. pandas.api\n6. pandas.core\n7. pandas.core.dtypes\n8. pandas.core.dtypes.base\n9. pandas.core.dtypes.cast\n10. pandas.core.dtypes.common\n11. pandas.core.dtypes.dtypes\n12. pandas.core.dtypes.generic\n13. pandas.core.dtypes.inference\n14. pandas.core.dtypes.missing\n15. pandas.core.dtypes.np_datetime\n16. pandas.core.dtypes.np_numeric\n17. pandas.core.dtypes.np_object\n18. pandas.core.dtypes.np_timedelta\n19. pandas.core.dtypes.np_timestamptype\n20. pandas.core.dtypes.np_type_dict"}
{"mask": "last", "input": "pyof.foundation.basic_<mask>.UBInt16(", "reference": "types", "full_reference": "pyof.foundation.basic_types.UBInt16", "raw_gpt3.5": "1. big\n2. little\n3. endian\n4. byte\n5. int\n6. short\n7. long\n8. unsigned\n9. signed\n10. float\n11. double\n12. complex\n13. real\n14. imag\n15. abs\n16. round\n17. ceil\n18. floor\n19. trunc\n20. divmod"}
{"mask": "first", "input": "astropy.wcs.utils.<mask>coord_to_pixel(", "reference": "sky", "full_reference": "astropy.wcs.utils.skycoord_to_pixel", "raw_gpt3.5": "1. sky\n2. world\n3. pixel\n4. pixel_indices\n5. pixel_values\n6. pixel_position\n7. pixel_coords\n8. pixel_location\n9. pixel_mapping\n10. pixel_transform\n11. pixel_conversion\n12. pixel_projection\n13. pixel_reference\n14. pixel_system\n15. pixel_transformer\n16. pixel_coordinate\n17. pixel_coordinate_system\n18. pixel_coordinate_transform\n19. pixel_coordinate_conversion\n20. pixel_coordinate_projection"}
{"mask": "last", "input": "killer.killer_<mask>.KillerWindows(", "reference": "windows", "full_reference": "killer.killer_windows.KillerWindows", "raw_gpt3.5": "1. process\n2. utils\n3. config\n4. logger\n5. manager\n6. exceptions\n7. constants\n8. registry\n9. commands\n10. service\n11. scheduler\n12. monitor\n13. client\n14. database\n15. encryption\n16. authentication\n17. network\n18. protocol\n19. security\n20. storage"}
{"mask": "last", "input": "pydicom.write_<mask>(", "reference": "file", "full_reference": "pydicom.write_file", "raw_gpt3.5": "1. data\n2. file\n3. dataset\n4. pixel_data\n5. to_file\n6. to_bytes\n7. to_json\n8. to_xml\n9. to_yaml\n10. to_pickle\n11. to_dicom\n12. to_nifti\n13. to_pil\n14. to_numpy\n15. to_rle\n16. to_tiff\n17. to_svg\n18. to_pdf\n19. to_dicomweb\n20. to_dicomweb_json"}
{"mask": "all", "input": "riemann.<mask>.hash160(", "reference": "utils", "full_reference": "riemann.utils.hash160", "raw_gpt3.5": "1. tx\n2. script\n3. pubkey\n4. redeemScript\n5. witnessScript\n6. multisig\n7. input\n8. output\n9. signature\n10. witness\n11. prevout\n12. sequence\n13. locktime\n14. version\n15. sighash\n16. hashType\n17. hashPrevouts\n18. hashSequence\n19. hashOutputs\n20. hashWitnesses"}
{"mask": "last", "input": "dis._get_instructions_<mask>(", "reference": "bytes", "full_reference": "dis._get_instructions_bytes", "raw_gpt3.5": "1. bytes\n2. line\n3. source\n4. size\n5. offset\n6. list\n7. bytesource\n8. lineno\n9. code\n10. arg\n11. index\n12. name\n13. argval\n14. argrepr\n15. opname\n16. starts_line\n17. is_jump_target\n18. get\n19. iter\n20. next"}
{"mask": "last", "input": "bogo.accent.add_accent_<mask>(", "reference": "char", "full_reference": "bogo.accent.add_accent_char", "raw_gpt3.5": "1. character\n2. mark\n3. tone\n4. symbol\n5. diacritic\n6. glyph\n7. accentuation\n8. letter\n9. modifier\n10. style\n11. notation\n12. pronunciation\n13. sound\n14. stress\n15. intonation\n16. pitch\n17. inflection\n18. emphasis\n19. cadence\n20. articulation"}
{"mask": "first", "input": "boto.dynamodb2.fields.<mask>Key(", "reference": "Range", "full_reference": "boto.dynamodb2.fields.RangeKey", "raw_gpt3.5": "1. hash\n2. range\n3. global\n4. local\n5. binary\n6. number\n7. string\n8. boolean\n9. set\n10. map\n11. attribute\n12. schema\n13. validate\n14. serialize\n15. deserialize\n16. marshal\n17. unmarshal\n18. encrypt\n19. decrypt\n20. generate"}
{"mask": "last", "input": "mx<mask>.nd.SoftmaxOutput(", "reference": "net", "full_reference": "mxnet.nd.SoftmaxOutput", "raw_gpt3.5": "1. _internal\n2. _sym\n3. _contrib\n4. _autograd\n5. _sparse\n6. _random\n7. _init\n8. _categorical\n9. _clip\n10. _linalg\n11. _multibox_detection\n12. _ndarray\n13. _normalize\n14. _pooling\n15. _rnn\n16. _roi\n17. _softmax\n18. _sparse_dot\n19. _updater\n20. _version"}
{"mask": "last", "input": "rocketch<mask>.calls.groups.get_private_room_history.GetPrivateRoomHistory(", "reference": "at", "full_reference": "rocketchat.calls.groups.get_private_room_history.GetPrivateRoomHistory", "raw_gpt3.5": "1. Client\n2. Session\n3. Connection\n4. Request\n5. Response\n6. Error\n7. Message\n8. Payload\n9. Protocol\n10. Transport\n11. Authentication\n12. Authorization\n13. Encryption\n14. Decryption\n15. Compression\n16. Decompression\n17. Serialization\n18. Deserialization\n19. Validation\n20. Transformation"}
{"mask": "last", "input": "mx<mask>.gluon.nn.HybridSequential(", "reference": "net", "full_reference": "mxnet.gluon.nn.HybridSequential", "raw_gpt3.5": "1. block\n2. module\n3. layer\n4. cell\n5. container\n6. network\n7. model\n8. architecture\n9. structure\n10. framework\n11. interface\n12. util\n13. ops\n14. init\n15. loss\n16. optimizer\n17. trainer\n18. callback\n19. estimator\n20. predictor"}
{"mask": "first", "input": "ibis.impala.compiler.<mask>alaDialect.make_context(", "reference": "Imp", "full_reference": "ibis.impala.compiler.ImpalaDialect.make_context", "raw_gpt3.5": "1. imp\n2. Imp\n3. IMP\n4. impa\n5. Impa\n6. IMPA\n7. impal\n8. Impal\n9. IMPAL\n10. impala\n11. Impala\n12. IMPALA\n13. impalad\n14. Impalad\n15. IMPALAD\n16. impaladi\n17. Impaladi\n18. IMPALADI\n19. impaladia\n20. Impaladia"}
{"mask": "all", "input": "quark.db.<mask>.security_group_rule_find(", "reference": "api", "full_reference": "quark.db.api.security_group_rule_find", "raw_gpt3.5": "1. port\n2. protocol\n3. cidr\n4. direction\n5. source\n6. destination\n7. security_group_id\n8. security_group_rule_id\n9. ip_version\n10. ethertype\n11. remote_group_id\n12. remote_ip_prefix\n13. remote_group_name\n14. remote_group_domain_id\n15. remote_group_project_id\n16. remote_group_project_name\n17. remote_group_project_domain_id\n18. remote_group_project_domain_name\n19. remote_group_domain_name\n20. remote_group_domain_description"}
{"mask": "first", "input": "<mask>api.model.Schema(", "reference": "open", "full_reference": "openapi.model.Schema", "raw_gpt3.5": "1. avro\n2. jsonschema\n3. pyspark.sql.types\n4. marshmallow\n5. cerberus\n6. pydantic\n7. sqlalchemy.schema\n8. fastapi.params\n9. django.db.models.fields\n10. google.cloud.bigquery.schema\n11. flask_restplus.fields\n12. openapi_schema_validator\n13. pyarrow.schema\n14. graphql.type\n15. pandas.api.types\n16. marshmallow_sqlalchemy.SQLAlchemySchema\n17. pydantic.networks\n18. pydantic.fields\n19. sqlalchemy_utils.types\n20. pydantic.color."}
{"mask": "first", "input": "<mask>tpandas.compat.QtGui.QRadioButton(", "reference": "q", "full_reference": "qtpandas.compat.QtGui.QRadioButton", "raw_gpt3.5": "1. QtWidgets\n2. PySide2\n3. PyQt5\n4. PySide\n5. PyQt4\n6. PyQt6\n7. PySide6\n8. PyQt3D\n9. PyQtChart\n10. PyQtWebEngine\n11. PyQtDataVisualization\n12. PyQtGraph\n13. PyQtMultimedia\n14. PyQtOpenGL\n15. PyQtPrintSupport\n16. PyQtSvg\n17. PyQtTools\n18. PyQtWebChannel\n19. PyQtWebSockets\n20. PyQtXml"}
{"mask": "last", "input": "threading._<mask>.copy(", "reference": "active", "full_reference": "threading._active.copy", "raw_gpt3.5": "1. _deque\n2. _list\n3. _queue\n4. _set\n5. _heapq\n6. _collections\n7. _thread\n8. _local\n9. _RLock\n10. _Timer\n11. _Event\n12. _Semaphore\n13. _Condition\n14. _Thread\n15. _Lock\n16. _active\n17. _DummyThread\n18. _MainThread\n19. _cleanup\n20. _sleep"}
{"mask": "first", "input": "peyotl.<mask>son_syntax.helper.add_literal_meta(", "reference": "nex", "full_reference": "peyotl.nexson_syntax.helper.add_literal_meta", "raw_gpt3.5": "1. j\n2. b\n3. c\n4. d\n5. e\n6. f\n7. g\n8. h\n9. i\n10. k\n11. l\n12. m\n13. n\n14. o\n15. p\n16. q\n17. r\n18. s\n19. t\n20. u"}
{"mask": "first", "input": "rio_color.operations.<mask>_atmo_opstring(", "reference": "simple", "full_reference": "rio_color.operations.simple_atmo_opstring", "raw_gpt3.5": "1. apply\n2. compute\n3. create\n4. evaluate\n5. generate\n6. interpolate\n7. modify\n8. normalize\n9. optimize\n10. perform\n11. process\n12. refine\n13. render\n14. set\n15. transform\n16. update\n17. adjust\n18. blend\n19. convolve\n20. filter"}
{"mask": "first", "input": "egoio.db_tables.model_draft.<mask>goGridMvGriddistrict.subst_id.in_(", "reference": "E", "full_reference": "egoio.db_tables.model_draft.EgoGridMvGriddistrict.subst_id.in_", "raw_gpt3.5": "1. di\n2. str\n3. is\n4. tri\n5. dis\n6. gra\n7. ict\n8. gri\n9. id\n10. mi\n11. mi_\n12. gri_\n13. dis_\n14. sub\n15. sub_\n16. in\n17. in_\n18. go\n19. goG\n20. goGr"}
{"mask": "last", "input": "pypyr.errors.KeyNotInContext<mask>(", "reference": "Error", "full_reference": "pypyr.errors.KeyNotInContextError", "raw_gpt3.5": "1. Error\n2. Exception\n3. Value\n4. Variable\n5. Item\n6. Dictionary\n7. List\n8. Context\n9. Pipeline\n10. Step\n11. Group\n12. Config\n13. Argument\n14. Parameter\n15. Input\n16. Output\n17. Result\n18. Message\n19. Log\n20. Handler"}
{"mask": "all", "input": "drfpasswordless.<mask>.CallbackToken.objects.active(", "reference": "models", "full_reference": "drfpasswordless.models.CallbackToken.objects.active", "raw_gpt3.5": "1. user\n2. token\n3. callback\n4. auth\n5. session\n6. request\n7. api\n8. settings\n9. models\n10. utils\n11. views\n12. serializers\n13. authentication\n14. permissions\n15. decorators\n16. exceptions\n17. middleware\n18. validators\n19. signals\n20. apps"}
{"mask": "last", "input": "SCons.Errors.User<mask>(", "reference": "Error", "full_reference": "SCons.Errors.UserError", "raw_gpt3.5": "1. UserError\n2. UserWarning\n3. UserException\n4. UserDefined\n5. UserDefinedError\n6. UserDefinedWarning\n7. UserDefinedException\n8. UserDefinedType\n9. UserDefinedFunction\n10. UserDefinedClass\n11. UserDefinedMethod\n12. UserDefinedDecorator\n13. UserDefinedAttribute\n14. UserDefinedConstant\n15. UserDefinedNamespace\n16. UserDefinedModule\n17. UserDefinedPackage\n18. UserDefinedInterface\n19. UserDefinedExceptionType\n20. UserDefinedErrorType"}
{"mask": "all", "input": "sisy.<mask>.Task.objects.get(", "reference": "models", "full_reference": "sisy.models.Task.objects.get", "raw_gpt3.5": "1. name\n2. status\n3. priority\n4. description\n5. due_date\n6. assigned_to\n7. created_by\n8. modified_by\n9. completed_date\n10. tags\n11. comments\n12. attachments\n13. subtasks\n14. dependencies\n15. notifications\n16. history\n17. progress\n18. time_estimate\n19. time_spent\n20. is_completed"}
{"mask": "first", "input": "libsbml.<mask>L3Formula(", "reference": "parse", "full_reference": "libsbml.parseL3Formula", "raw_gpt3.5": "1. get\n2. set\n3. is\n4. create\n5. evaluate\n6. parse\n7. check\n8. simplify\n9. substitute\n10. expand\n11. apply\n12. convert\n13. validate\n14. simplifyMath\n15. getNumArguments\n16. getArgument\n17. getNumVariables\n18. getVariable\n19. getNumFunctions\n20. getFunction"}
{"mask": "first", "input": "<mask>r_response_server.export.GetMetadata(", "reference": "gr", "full_reference": "grr_response_server.export.GetMetadata", "raw_gpt3.5": "1. cdr_response_server.export.GetMetadata(\n2. bdr_response_server.export.GetMetadata(\n3. fdr_response_server.export.GetMetadata(\n4. tdr_response_server.export.GetMetadata(\n5. hdr_response_server.export.GetMetadata(\n6. gdr_response_server.export.GetMetadata(\n7. pdr_response_server.export.GetMetadata(\n8. sdr_response_server.export.GetMetadata(\n9. ydr_response_server.export.GetMetadata(\n10. kdr_response_server.export.GetMetadata(\n11. vdr_response_server.export.GetMetadata(\n12. zdr_response_server.export.GetMetadata(\n13. qdr_response_server.export.GetMetadata(\n14. udr_response_server.export.GetMetadata(\n15. jdr_response_server.export.GetMetadata(\n16. ndr_response_server.export.GetMetadata(\n17. mdr_response_server.export.GetMetadata(\n18. ldr_response_server.export.GetMetadata(\n19. xdr_response_server.export.GetMetadata(\n20. cdr_response_server.export.GetMetadata("}
{"mask": "first", "input": "django.contrib.<mask>types.models.ContentType.objects.clear_cache(", "reference": "content", "full_reference": "django.contrib.contenttypes.models.ContentType.objects.clear_cache", "raw_gpt3.5": "1. generic\n2. admin\n3. sitemaps\n4. messages\n5. redirects\n6. flatpages\n7. comments\n8. auth\n9. sessions\n10. sites\n11. syndication\n12. humanize\n13. staticfiles\n14. formtools\n15. databrowse\n16. messages\n17. admindocs\n18. contenttypes\n19. auth\n20. sites"}
{"mask": "first", "input": "nacl.<mask>sodium.lib.crypto_sign_keypair(", "reference": "_", "full_reference": "nacl._sodium.lib.crypto_sign_keypair", "raw_gpt3.5": "1. ed25519\n2. curve25519\n3. blake2b\n4. sha512\n5. randombytes\n6. crypto_sign\n7. crypto_box\n8. crypto_secretbox\n9. crypto_scalarmult\n10. crypto_stream\n11. crypto_auth\n12. crypto_kx\n13. crypto_pwhash\n14. crypto_generichash\n15. crypto_aead\n16. crypto_shorthash\n17. crypto_core\n18. crypto_verify\n19. crypto_hash\n20. crypto_core_ed25519"}
{"mask": "last", "input": "couchbase._libcouchbase.Bucket._rget<mask>(", "reference": "ix", "full_reference": "couchbase._libcouchbase.Bucket._rgetix", "raw_gpt3.5": "1. _quiet\n2. _replica\n3. _random\n4. _locked\n5. _multi\n6. _timeout\n7. _full\n8. _all\n9. _any\n10. _spec\n11. _hash\n12. _seq\n13. _vbucket\n14. _master\n15. _index\n16. _observe\n17. _server\n18. _error\n19. _transcoder\n20. _dura"}
{"mask": "first", "input": "gdspy.<mask>1Path(", "reference": "L", "full_reference": "gdspy.L1Path", "raw_gpt3.5": "1. set\n2. get\n3. add\n4. remove\n5. interpolate\n6. translate\n7. rotate\n8. scale\n9. mirror\n10. connect\n11. split\n12. join\n13. copy\n14. move\n15. offset\n16. simplify\n17. reverse\n18. transform\n19. expand\n20. intersect"}
{"mask": "first", "input": "<mask>os.utilities.tail(", "reference": "s", "full_reference": "sos.utilities.tail", "raw_gpt3.5": "1. file\n2. log\n3. text\n4. buffer\n5. stream\n6. reader\n7. writer\n8. handler\n9. parser\n10. monitor\n11. watcher\n12. follower\n13. retriever\n14. extractor\n15. analyzer\n16. inspector\n17. reporter\n18. aggregator\n19. compressor\n20. decompressor"}
{"mask": "all", "input": "openxc.formats.<mask>.JsonFormatter.deserialize(", "reference": "json", "full_reference": "openxc.formats.json.JsonFormatter.deserialize", "raw_gpt3.5": "1. json\n2. xml\n3. yaml\n4. bson\n5. msgpack\n6. avro\n7. csv\n8. ini\n9. toml\n10. pickle\n11. html\n12. xlsx\n13. pdf\n14. docx\n15. pptx\n16. zip\n17. tar\n18. gzip\n19. bz2\n20. lzma"}
{"mask": "last", "input": "pandas.read_sql_<mask>(", "reference": "query", "full_reference": "pandas.read_sql_query", "raw_gpt3.5": "1. table\n2. query\n3. database\n4. schema\n5. file\n6. chunked\n7. sql\n8. string\n9. table_name\n10. statement\n11. table_schema\n12. table_names\n13. table_query\n14. table_sql\n15. table_string\n16. table_file\n17. table_chunked\n18. table_statement\n19. table_database\n20. table_select"}
{"mask": "first", "input": "restnavigator.utils.<mask>_media_type(", "reference": "parse", "full_reference": "restnavigator.utils.parse_media_type", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. parse\n6. format\n7. normalize\n8. validate\n9. guess\n10. detect\n11. infer\n12. select\n13. match\n14. compare\n15. encode\n16. decode\n17. extract\n18. transform\n19. substitute\n20. filter"}
{"mask": "all", "input": "sorl.thumbnail.<mask>.settings.THUMBNAIL_IDENTIFY.split(", "reference": "conf", "full_reference": "sorl.thumbnail.conf.settings.THUMBNAIL_IDENTIFY.split", "raw_gpt3.5": "1. engine\n2. default\n3. utils\n4. image\n5. base\n6. parsers\n7. exceptions\n8. default_processors\n9. default_storage\n10. default.kvstores\n11. default.kvstores.cached_db_kvstore\n12. default.kvstores.redis_kvstore\n13. default.kvstores.simple_kvstore\n14. default.kvstores.cached_db_kvstore.CachedDbKVStore\n15. default.kvstores.redis_kvstore.RedisKVStore\n16. default.kvstores.simple_kvstore.SimpleKVStore\n17. default.kvstores.cached_db_kvstore.CachedDbKVStore.get\n18. default.kvstores.redis_kvstore.RedisKVStore.get\n19. default.kvstores.simple_kvstore.SimpleKVStore.get\n20. default.kvstores.cached_db_kvstore.CachedDbKVStore.set"}
{"mask": "first", "input": "openquake.hmtk.seismicity.utils.<mask>wise_linear_scalar(", "reference": "piece", "full_reference": "openquake.hmtk.seismicity.utils.piecewise_linear_scalar", "raw_gpt3.5": "1. time\n2. space\n3. depth\n4. magnitude\n5. distance\n6. frequency\n7. intensity\n8. velocity\n9. acceleration\n10. moment\n11. energy\n12. amplitude\n13. duration\n14. probability\n15. correlation\n16. coherence\n17. attenuation\n18. spectrum\n19. inversion\n20. regression"}
{"mask": "last", "input": "cloudaux.g<mask>.utils.get_creds_from_kwargs(", "reference": "cp", "full_reference": "cloudaux.gcp.utils.get_creds_from_kwargs", "raw_gpt3.5": "1. et_aws_creds\n2. et_aws_creds_from_env\n3. et_aws_creds_from_role\n4. et_aws_creds_from_profile\n5. et_aws_creds_from_instance_metadata\n6. et_aws_creds_from_saml\n7. et_aws_creds_from_assume_role\n8. et_aws_creds_from_azure\n9. et_aws_creds_from_gcp\n10. et_aws_creds_from_iam_role\n11. et_aws_creds_from_k8s\n12. et_aws_creds_from_oidc\n13. et_aws_creds_from_sso\n14. et_aws_creds_from_sts\n15. et_aws_creds_from_web_identity\n16. et_aws_creds_from_x509\n17. et_aws_creds_from_yubikey\n18. et_aws_creds_from_eks\n19. et_aws_creds_from_ecs\n20. et_aws_creds_from_ec2_metadata"}
{"mask": "first", "input": "fluids.fittings.<mask>v_to_Cv(", "reference": "K", "full_reference": "fluids.fittings.Kv_to_Cv", "raw_gpt3.5": "1. diameter\n2. area\n3. flow_rate\n4. velocity\n5. head_loss\n6. pressure_drop\n7. Reynolds_number\n8. friction_factor\n9. specific_gravity\n10. temperature\n11. viscosity\n12. compressibility_factor\n13. gas_constant\n14. inlet_pressure\n15. outlet_pressure\n16. inlet_temperature\n17. outlet_temperature\n18. density\n19. dynamic_viscosity\n20. kinematic_viscosity"}
{"mask": "all", "input": "benchbuild.utils.cmd.<mask>(", "reference": "cp", "full_reference": "benchbuild.utils.cmd.cp", "raw_gpt3.5": "1. run\n2. exec\n3. check\n4. wait\n5. pipe\n6. call\n7. spawn\n8. capture\n9. execute\n10. start\n11. terminate\n12. communicate\n13. interrupt\n14. poll\n15. terminate_process\n16. terminate_children\n17. terminate_all\n18. terminate_group\n19. terminate_subprocess\n20. terminate_execution"}
{"mask": "last", "input": "heron.tools.cli.src.python.args.add_system_<mask>(", "reference": "property", "full_reference": "heron.tools.cli.src.python.args.add_system_property", "raw_gpt3.5": "1. option\n2. arg\n3. flag\n4. param\n5. value\n6. config\n7. setting\n8. property\n9. variable\n10. argument\n11. module\n12. command\n13. input\n14. output\n15. file\n16. directory\n17. path\n18. name\n19. type\n20. handler"}
{"mask": "first", "input": "tia.util.<mask>plot.AxesFormat(", "reference": "m", "full_reference": "tia.util.mplot.AxesFormat", "raw_gpt3.5": "1. figure\n2. subplots\n3. axis\n4. plot\n5. legend\n6. color\n7. label\n8. tick\n9. grid\n10. font\n11. size\n12. style\n13. linewidth\n14. linestyle\n15. marker\n16. alpha\n17. xlabel\n18. ylabel\n19. xlim\n20. ylim"}
{"mask": "first", "input": "<mask>ab.core.config.QT_RES_TGT(", "reference": "ep", "full_reference": "epab.core.config.QT_RES_TGT", "raw_gpt3.5": "1. q:  QT_RES_TGT\n2. ab:  QT_RES_TGT\n3. core:  QT_RES_TGT\n4. config:  QT_RES_TGT\n5. .Q:  T_RES_TGT\n6. .a:  QT_RES_TGT\n7. .c:  QT_RES_TGT\n8. .co:  QT_RES_TGT\n9. .con:  QT_RES_TGT\n10. .conf:  QT_RES_TGT\n11. .config.:  QT_RES_TGT\n12. .QT:  _RES_TGT\n13. .QT_:  RES_TGT\n14. .QT_R:  ES_TGT\n15. .QT_RE:  S_TGT\n16. .QT_RES:  _TGT\n17. .QT_RES_:  TGT\n18. .QT_RES_T:  GT\n19. .QT_RES_TG:  T\n20. .QT_RES_TGT(:"}
{"mask": "first", "input": "tile_system.TileSystem.<mask>_to_quadkey(", "reference": "tile", "full_reference": "tile_system.TileSystem.tile_to_quadkey", "raw_gpt3.5": "1. pixel\n2. tile\n3. lat_long\n4. quadkey\n5. xyz\n6. mercator\n7. geo\n8. point\n9. coordinate\n10. projection\n11. utm\n12. web_mercator\n13. spherical\n14. cartesian\n15. transform\n16. geographic\n17. quad\n18. bounds\n19. location\n20. coordinate_system"}
{"mask": "first", "input": "graftm.unpack_sequences.<mask>packRawReads(", "reference": "Un", "full_reference": "graftm.unpack_sequences.UnpackRawReads", "raw_gpt3.5": "1. gzip\n2. bzip2\n3. lzma\n4. snappy\n5. zstd\n6. pack\n7. unpack\n8. read\n9. write\n10. compress\n11. decompress\n12. serialize\n13. deserialize\n14. encode\n15. decode\n16. chunked\n17. raw\n18. binary\n19. file\n20. data"}
{"mask": "all", "input": "twitter_ads.<mask>.size(", "reference": "utils", "full_reference": "twitter_ads.utils.size", "raw_gpt3.5": "1. height\n2. width\n3. length\n4. depth\n5. capacity\n6. dimensions\n7. volume\n8. area\n9. weight\n10. count\n11. quantity\n12. magnitude\n13. scale\n14. extent\n15. mass\n16. radius\n17. thickness\n18. diameter\n19. resolution\n20. bitrate"}
{"mask": "first", "input": "<mask>rpi_ws281x.ws2811_get_return_t_str(", "reference": "_", "full_reference": "_rpi_ws281x.ws2811_get_return_t_str", "raw_gpt3.5": "1. uint32_t\n2. int\n3. char\n4. float\n5. double\n6. short\n7. long\n8. bool\n9. size_t\n10. PyObject\n11. Py_ssize_t\n12. wchar_t\n13. uint8_t\n14. uint16_t\n15. uint64_t\n16. int8_t\n17. int16_t\n18. int64_t\n19. ssize_t\n20. Py_buffer"}
{"mask": "all", "input": "<mask>.CreateFile(", "reference": "fs", "full_reference": "fs.CreateFile", "raw_gpt3.5": "1. os.CreateFile()\n2. win32file.CreateFile()\n3. msvcrt.CreateFile()\n4. ctypes.windll.kernel32.CreateFileW()\n5. winioctlfile.CreateFile()\n6. win32security.CreateFile()\n7. win32wnet.CreateFile()\n8. win32net.CreateFile()\n9. win32print.CreateFilePrinterConnection()\n10. win32print.CreateFilePrinterPort()\n11. win32print.CreateFilePrinter()\n12. win32print.CreateFilePrinterDriver()\n13. win32pdh.CreateFile()\n14. win32pdhutil.CreateFile()\n15. win32pipe.CreateFile()\n16. win32ras.CreateFile()\n17. win32service.CreateFile()\n18. win32timezone.CreateFile()\n19. win32traceutil.CreateFile()\n20. win32ui.CreateFile()"}
{"mask": "first", "input": "pipdeptree.<mask>_dist_index(", "reference": "build", "full_reference": "pipdeptree.build_dist_index", "raw_gpt3.5": "1. _get\n2. _set\n3. _remove\n4. _update\n5. _find\n6. _add\n7. _list\n8. _parse\n9. _load\n10. _save\n11. _sort\n12. _resolve\n13. _compare\n14. _merge\n15. _clean\n16. _validate\n17. _normalize\n18. _extract\n19. _generate\n20. _flatten"}
{"mask": "first", "input": "argiope.mesh.<mask>_msh(", "reference": "read", "full_reference": "argiope.mesh.read_msh", "raw_gpt3.5": "1. create\n2. read\n3. write\n4. load\n5. save\n6. generate\n7. parse\n8. extract\n9. convert\n10. import\n11. export\n12. analyze\n13. filter\n14. process\n15. manipulate\n16. transform\n17. visualize\n18. interpolate\n19. smooth\n20. triangulate"}
{"mask": "last", "input": "ro<mask>.refactor.importutils.ImportOrganizer(", "reference": "pe", "full_reference": "rope.refactor.importutils.ImportOrganizer", "raw_gpt3.5": "1. core\n2. factor\n3. factor.import\n4. factor.imports\n5. factor.importutils\n6. factor.importutils.Importer\n7. factor.importutils.ImporterError\n8. factor.importutils.ImporterFactory\n9. factor.importutils.ImporterRegistry\n10. factor.importutils.ImporterRegistryError\n11. factor.importutils.ImporterRegistryFactory\n12. factor.importutils.ImporterRegistryFactoryError\n13. factor.importutils.ImporterRegistryFactoryImpl\n14. factor.importutils.ImporterRegistryImpl\n15. factor.importutils.ImporterRegistryImplError\n16. factor.importutils.ImporterRegistryImplFactory\n17. factor.importutils.ImporterRegistryImplFactoryError\n18. factor.importutils.ImporterRegistryImplImpl\n19. factor.importutils.ImporterRegistryImplImplError\n20. factor.importutils.ImporterRegistryImplImplFactory"}
{"mask": "first", "input": "tower_cli.cli.transfer.cleaner.<mask>er(", "reference": "Clean", "full_reference": "tower_cli.cli.transfer.cleaner.Cleaner", "raw_gpt3.5": "1. Cleanuper\n2. Transferer\n3. Remover\n4. Purger\n5. Sanitizer\n6. Scrubber\n7. Deleter\n8. Wiper\n9. Eraser\n10. Sweeper\n11. Cleaner\n12. Trasher\n13. Disposer\n14. Eliminator\n15. Purifier\n16. Exterminator\n17. Annihilator\n18. Obliterator\n19. Destructor\n20. Disintegrator"}
{"mask": "last", "input": "coll<mask>.material.Effect(", "reference": "ada", "full_reference": "collada.material.Effect", "raw_gpt3.5": "1. or\n2.ision\n3.ect\n4.isionMap\n5.isionMapAlpha\n6.isionMapRGB\n7.isionMapRGBA\n8.isionMapRGBAShadow\n9.isionMapShadow\n10.isionMapShadowAlpha\n11.isionMapShadowRGB\n12.isionMapShadowRGBA\n13.isionMapShadowRGBAShadow\n14.isionMapShadowShadow\n15.isionMapShadowShadowAlpha\n16.isionMapShadowShadowRGB\n17.isionMapShadowShadowRGBA\n18.isionMapShadowShadowRGBAShadow\n19.isionMapShadowShadowShadow\n20.isionMapShadowShadowShadowAlpha"}
{"mask": "first", "input": "<mask>wbem.WBEMServer(", "reference": "py", "full_reference": "pywbem.WBEMServer", "raw_gpt3.5": "1. py: \n2. com: \n3. win: \n4. ms: \n5. linux: \n6. net: \n7. os: \n8. db: \n9. xml: \n10. http: \n11. ftp: \n12. ssh: \n13. telnet: \n14. smtp: \n15. imap: \n16. pop: \n17. ldap: \n18. tcp: \n19. udp: \n20. ssl:"}
{"mask": "last", "input": "qu<mask>.db.api.subnet_find(", "reference": "ark", "full_reference": "quark.db.api.subnet_find", "raw_gpt3.5": "1. etcd\n2. consul\n3. zookeeper\n4. redis\n5. memcached\n6. mongodb\n7. cassandra\n8. elasticsearch\n9. postgres\n10. mysql\n11. sqlite\n12. oracle\n13. sql\n14. influxdb\n15. prometheus\n16. graphite\n17. kafka\n18. rabbitmq\n19. nats\n20. mqtt"}
{"mask": "first", "input": "websockets.<mask>Closed(", "reference": "Connection", "full_reference": "websockets.ConnectionClosed", "raw_gpt3.5": "1. ConnectionClosed\n2. ConnectionClosedError\n3. ConnectionClosedOK\n4. ConnectionClosedErrorCodes\n5. ConnectionClosedEvent\n6. ConnectionClosedException\n7. ConnectionClosedInvalidState\n8. ConnectionClosedLocally\n9. ConnectionClosedManually\n10. ConnectionClosedNormally\n11. ConnectionClosedOKEvent\n12. ConnectionClosedTimeout\n13. ConnectionClosedUnexpectedCode\n14. ConnectionClosedUnexpectedCondition\n15. ConnectionClosedWithCode\n16. ConnectionClosedWithReason\n17. ConnectionClosedWithTraceback\n18. ConnectionClosedWithoutCloseFrame\n19. ConnectionClosedWithoutStatus\n20. ConnectionClosedWithoutStatusCode"}
{"mask": "last", "input": "grr_response_proto.flows_pb<mask>.ArtifactCollectorFlowArgs(", "reference": "2", "full_reference": "grr_response_proto.flows_pb2.ArtifactCollectorFlowArgs", "raw_gpt3.5": "1. .A\n2. .A_\n3. .Ar\n4. .Art\n5. .Arti\n6. .Artif\n7. .Artifa\n8. .Artifact\n9. .ArtifactC\n10. .ArtifactCo\n11. .ArtifactCol\n12. .ArtifactColl\n13. .ArtifactColle\n14. .ArtifactCollec\n15. .ArtifactCollect\n16. .ArtifactCollecto\n17. .ArtifactCollector\n18. .ArtifactCollectorF\n19. .ArtifactCollectorFl\n20. .ArtifactCollectorFlo"}
{"mask": "last", "input": "winappdbg.win32.FileTimeToSystem<mask>(", "reference": "Time", "full_reference": "winappdbg.win32.FileTimeToSystemTime", "raw_gpt3.5": "1. Time\n2. TimeZoneInformation\n3. Time_t\n4. TimeToSystemTime\n5. TimeToSystemTimeEx\n6. TimeToTzSpecificLocalTime\n7. TimeToTzSpecificLocalTimeEx\n8. Timezone\n9. TimezoneInformation\n10. TimezoneOffset\n11. TimezoneRule\n12. TimezoneTransition\n13. TimezoneTransitionTime\n14. TimezoneType\n15. TimezoneValue\n16. TimezoneValueKey\n17. TimezoneValueMap\n18. TimezoneValueSet\n19. TimezoneValueTuple\n20. TimezoneValueUnion"}
{"mask": "first", "input": "<mask>r_response_server.aff4.FACTORY.RecursiveMultiListChildren(", "reference": "gr", "full_reference": "grr_response_server.aff4.FACTORY.RecursiveMultiListChildren", "raw_gpt3.5": "1. h\n2. t\n3. o\n4. d\n5. e\n6. r\n7. _ \n8. r\n9. e\n10. a\n11. d\n12. _ \n13. o\n14. n\n15. l\n16. y\n17. _ \n18. r\n19. e\n20. a"}
{"mask": "last", "input": "metan<mask>.token_utils.string_pieces(", "reference": "l", "full_reference": "metanl.token_utils.string_pieces", "raw_gpt3.5": "1. _to\n2. _from\n3. _as\n4. _list\n5. _set\n6. _dict\n7. _tuple\n8. _int\n9. _float\n10. _bool\n11. _str\n12. _bytes\n13. _path\n14. _module\n15. _class\n16. _function\n17. _method\n18. _property\n19. _attribute\n20. _identifier"}
{"mask": "first", "input": "utool.<mask>_gridsearch.parse_nestings(", "reference": "util", "full_reference": "utool.util_gridsearch.parse_nestings", "raw_gpt3.5": "1. hyperopt\n2. sklearn\n3. scipy\n4. numpy\n5. pandas\n6. itertools\n7. collections\n8. functools\n9. operator\n10. typing\n11. json\n12. os\n13. re\n14. copy\n15. inspect\n16. logging\n17. multiprocessing\n18. random\n19. time\n20. warnings"}
{"mask": "all", "input": "<mask>.edge.BGEdge.from_json(", "reference": "bg", "full_reference": "bg.edge.BGEdge.from_json", "raw_gpt3.5": "1. networkx\n2. igraph\n3. graph_tool\n4. snap\n5. nxmetis\n6. nxpd\n7. nxviz\n8. nxpy\n9. nx_altair\n10. nx_agraph\n11. nx_extras\n12. nx_spring_layout\n13. nx_pylab\n14. nx_edi\n15. nx_ansi\n16. nx_aurora\n17. nx_aws\n18. nx_bgp\n19. nx_bgpstream\n20. nx_boost"}
{"mask": "first", "input": "fabsetup.utils.<mask>_out_template(", "reference": "filled", "full_reference": "fabsetup.utils.filled_out_template", "raw_gpt3.5": "1. console\n2. file\n3. string\n4. html\n5. markdown\n6. latex\n7. xml\n8. json\n9. yaml\n10. csv\n11. sql\n12. python\n13. shell\n14. text\n15. docx\n16. pdf\n17. xls\n18. xlsx\n19. pptx\n20. svg"}
{"mask": "last", "input": "structlog.std<mask>.PositionalArgumentsFormatter(", "reference": "lib", "full_reference": "structlog.stdlib.PositionalArgumentsFormatter", "raw_gpt3.5": "1. .kv - returns structlog.stdlib.PositionalArgumentsFormatter.kv\n2. .format - returns structlog.stdlib.PositionalArgumentsFormatter.format\n3. .repr - returns structlog.stdlib.PositionalArgumentsFormatter.repr\n4. .str - returns structlog.stdlib.PositionalArgumentsFormatter.str\n5. .args - returns structlog.stdlib.PositionalArgumentsFormatter.args\n6. .kwargs - returns structlog.stdlib.PositionalArgumentsFormatter.kwargs\n7. .__init__ - returns structlog.stdlib.PositionalArgumentsFormatter.__init__\n8. .__call__ - returns structlog.stdlib.PositionalArgumentsFormatter.__call__\n9. .__delattr__ - returns structlog.stdlib.PositionalArgumentsFormatter.__delattr__\n10. .__dir__ - returns structlog.stdlib.PositionalArgumentsFormatter.__dir__\n11. .__doc__ - returns structlog.stdlib.PositionalArgumentsFormatter.__doc__\n12. .__eq__ - returns structlog.stdlib.PositionalArgumentsFormatter.__eq__\n13. .__format__ - returns structlog.stdlib.PositionalArgumentsFormatter.__format__\n14. .__ge__ - returns structlog.stdlib.PositionalArgumentsFormatter.__ge__\n15. .__getattribute__ - returns structlog.stdlib.PositionalArgumentsFormatter.__getattribute__\n16. .__gt__ - returns structlog.stdlib.PositionalArgumentsFormatter.__gt__\n17. .__hash__ - returns structlog.stdlib.PositionalArgumentsFormatter.__hash__\n18. .__init_subclass__ - returns structlog.stdlib.PositionalArgumentsFormatter.__init_subclass__\n19. .__le__ - returns structlog.stdlib.PositionalArgumentsFormatter.__le__\n20. .__lt__ - returns structlog.stdlib.PositionalArgumentsFormatter.__lt__"}
{"mask": "first", "input": "txacme.store.<mask>Store(", "reference": "Directory", "full_reference": "txacme.store.DirectoryStore", "raw_gpt3.5": "1. Redis\n2. Memcached\n3. MongoDB\n4. SQLite\n5. Postgres\n6. MySQL\n7. Oracle\n8. Cassandra\n9. DynamoDB\n10. Elasticsearch\n11. Couchbase\n12. Riak\n13. HBase\n14. InfluxDB\n15. ArangoDB\n16. OrientDB\n17. Neo4j\n18. VoltDB\n19. Aerospike\n20. Hazelcast"}
{"mask": "all", "input": "craftai.<mask>.CraftAiLongRequestTimeOutError(", "reference": "errors", "full_reference": "craftai.errors.CraftAiLongRequestTimeOutError", "raw_gpt3.5": "1. exceptions\n2. errors\n3. utils\n4. models\n5. requests\n6. http\n7. client\n8. api\n9. auth\n10. resources\n11. serializers\n12. version\n13. config\n14. logging\n15. tests\n16. sandbox\n17. benchmarks\n18. examples\n19. documentation\n20. __init__"}
{"mask": "first", "input": "tensorflow.contrib.tpu.<mask>PUEstimatorSpec(", "reference": "T", "full_reference": "tensorflow.contrib.tpu.TPUEstimatorSpec", "raw_gpt3.5": "1. train: Returns a TPUEstimatorSpec for training.\n2. eval: Returns a TPUEstimatorSpec for evaluation.\n3. predict: Returns a TPUEstimatorSpec for prediction.\n4. export: Returns a TPUEstimatorSpec for exporting the model.\n5. run_config: Returns a TPUEstimatorSpec with the given RunConfig.\n6. model_fn: Returns a TPUEstimatorSpec with the given model_fn.\n7. mode: Returns a TPUEstimatorSpec with the given mode.\n8. params: Returns a TPUEstimatorSpec with the given params.\n9. loss: Returns a TPUEstimatorSpec with the given loss.\n10. train_op: Returns a TPUEstimatorSpec with the given train_op.\n11. eval_metric_ops: Returns a TPUEstimatorSpec with the given eval_metric_ops.\n12. training_hooks: Returns a TPUEstimatorSpec with the given training_hooks.\n13. evaluation_hooks: Returns a TPUEstimatorSpec with the given evaluation_hooks.\n14. export_outputs: Returns a TPUEstimatorSpec with the given export_outputs.\n15. scaffold_fn: Returns a TPUEstimatorSpec with the given scaffold_fn.\n16. host_call: Returns a TPUEstimatorSpec with the given host_call.\n17. training_chief_hooks: Returns a TPUEstimatorSpec with the given training_chief_hooks.\n18. evaluation_chief_hooks: Returns a TPUEstimatorSpec with the given evaluation_chief_hooks.\n19. training_hooks: Returns a TPUEstimatorSpec with the given training_hooks.\n20. evaluation_hooks: Returns a TPUEstimatorSpec with the given evaluation_hooks."}
{"mask": "first", "input": "app.readers.<mask>formatting.clear_el(", "reference": "xml", "full_reference": "app.readers.xmlformatting.clear_el", "raw_gpt3.5": "1. xml\n2. json\n3. csv\n4. excel\n5. yaml\n6. html\n7. txt\n8. pdf\n9. docx\n10. md\n11. latex\n12. rtf\n13. sql\n14. ini\n15. cfg\n16. log\n17. py\n18. js\n19. css\n20. php"}
{"mask": "first", "input": "nyawc.helpers.<mask>Helper.URLHelper.get_subdomain(", "reference": "URL", "full_reference": "nyawc.helpers.URLHelper.URLHelper.get_subdomain", "raw_gpt3.5": "1. domain\n2. path\n3. query\n4. scheme\n5. port\n6. fragment\n7. username\n8. password\n9. hostname\n10. protocol\n11. authority\n12. subdomain\n13. tld\n14. domain_name\n15. domain_suffix\n16. domain_parts\n17. domain_labels\n18. domain_components\n19. domain_parts_list\n20. domain_labels_list"}
{"mask": "all", "input": "pysoa.<mask>.logging.PySOALogContextFilter.clear_logging_request_context(", "reference": "common", "full_reference": "pysoa.common.logging.PySOALogContextFilter.clear_logging_request_context", "raw_gpt3.5": "1. context\n2. request\n3. logging\n4. PySOALogContextFilter\n5. clear\n6. set\n7. get\n8. remove\n9. add\n10. update\n11. format\n12. initialize\n13. configure\n14. reset\n15. create\n16. destroy\n17. set_up\n18. tear_down\n19. handle\n20. filter"}
{"mask": "all", "input": "<mask>.get_platforms(", "reference": "build", "full_reference": "build.get_platforms", "raw_gpt3.5": "1. cl.get_platforms()\n2. pyopencl.get_platforms()\n3. pyopencl.get_platforms()[0]\n4. pyopencl.get_platforms()[1]\n5. pyopencl.get_platforms()[2]\n6. pyopencl.get_platforms()[3]\n7. pyopencl.get_platforms()[4]\n8. pyopencl.get_platforms()[5]\n9. pyopencl.get_platforms()[6]\n10. pyopencl.get_platforms()[7]\n11. pyopencl.get_platforms()[8]\n12. pyopencl.get_platforms()[9]\n13. pyopencl.get_platforms()[10]\n14. pyopencl.get_platforms()[11]\n15. pyopencl.get_platforms()[12]\n16. pyopencl.get_platforms()[13]\n17. pyopencl.get_platforms()[14]\n18. pyopencl.get_platforms()[15]\n19. pyopencl.get_platforms()[16]\n20. pyopencl.get_platforms()[17]"}
{"mask": "first", "input": "mutatorMath.objects.error.<mask>atorError(", "reference": "Mut", "full_reference": "mutatorMath.objects.error.MutatorError", "raw_gpt3.5": "1. Glyph\n2. Font\n3. Contour\n4. Point\n5. Component\n6. Anchor\n7. Guide\n8. Hint\n9. Alignment\n10. Transformation\n11. Interpolation\n12. Calculation\n13. Decomposition\n14. Transformation\n15. Generation\n16. Validation\n17. Conversion\n18. Substitution\n19. Combination\n20. Adjustment"}
{"mask": "last", "input": "pyhdb.exceptions.ConnectionTimedOut<mask>(", "reference": "Error", "full_reference": "pyhdb.exceptions.ConnectionTimedOutError", "raw_gpt3.5": "1. Exception\n2. Error\n3. Timeout\n4. Retry\n5. Handler\n6. Config\n7. Policy\n8. Retryable\n9. ConnectionError\n10. ConnectionAborted\n11. ConnectionRefused\n12. ConnectionReset\n13. ConnectionClosed\n14. ConnectionEstablished\n15. ConnectionFailed\n16. ConnectionLost\n17. ConnectionPool\n18. ConnectionSettings\n19. ConnectionStatus\n20. ConnectionWrapper"}
{"mask": "all", "input": "numpy.dtype.<mask>(", "reference": "type", "full_reference": "numpy.dtype.type", "raw_gpt3.5": "1. name (0.9999)\n2. kind (0.9999)\n3. type (0.9998)\n4. str (0.9998)\n5. newbyteorder (0.9997)\n6. itemsize (0.9997)\n7. alignment (0.9996)\n8. base (0.9996)\n9. num (0.9995)\n10. char (0.9995)\n11. fields (0.9994)\n12. descr (0.9994)\n13. isbuiltin (0.9993)\n14. isnative (0.9993)\n15. isnative (0.9993)\n16. __reduce__ (0.9992)\n17. __str__ (0.9992)\n18. __eq__ (0.9992)\n19. __ne__ (0.9992)\n20. __hash__ (0.9992)"}
{"mask": "last", "input": "libxml2<mask>.xmlValidateDtdFinal(", "reference": "mod", "full_reference": "libxml2mod.xmlValidateDtdFinal", "raw_gpt3.5": "1. _SAXHandler\n2. _SAX2Handler\n3. _SAX2OutputBuffer\n4. _SAXOutputBuffer\n5. _XPathContext\n6. _xmlAttr\n7. _xmlAttribute\n8. _xmlAttributeType\n9. _xmlBuffer\n10. _xmlChar\n11. _xmlDict\n12. _xmlDoc\n13. _xmlDocProperties\n14. _xmlElement\n15. _xmlElementType\n16. _xmlError\n17. _xmlGenericErrorFunc\n18. _xmlLastError\n19. _xmlNode\n20. _xmlParserCtxt"}
{"mask": "last", "input": "tensorflow_probability.edward<mask>.Deterministic(", "reference": "2", "full_reference": "tensorflow_probability.edward2.Deterministic", "raw_gpt3.5": "1. .RandomVariable(\n2. .RandomVariableBatch(\n3. .RandomVariableGraph(\n4. .RandomVariableMatrix(\n5. .RandomVariableSparse(\n6. .RandomVariableSparseTensor(\n7. .RandomVariableTensor(\n8. .RandomVariableTree(\n9. .RandomVariableVector(\n10. .RandomVariableWithPrecondition(\n11. .RandomVariableWithPreconditionBatch(\n12. .RandomVariableWithPreconditionGraph(\n13. .RandomVariableWithPreconditionMatrix(\n14. .RandomVariableWithPreconditionSparse(\n15. .RandomVariableWithPreconditionSparseTensor(\n16. .RandomVariableWithPreconditionTensor(\n17. .RandomVariableWithPreconditionTree(\n18. .RandomVariableWithReplacement(\n19. .RandomVariableWithReplacementBatch(\n20. .RandomVariableWithReplacementGraph("}
{"mask": "first", "input": "<mask>fframework.rdfclass.esconversion.get_es_value(", "reference": "rd", "full_reference": "rdfframework.rdfclass.esconversion.get_es_value", "raw_gpt3.5": "1. rdflib\n2. py\n3. owlready2\n4. ontospy\n5. rdflib_jsonld\n6. rdflib_sqlalchemy\n7. rdflib.plugins.sparql\n8. rdflib.plugins.serializers\n9. rdflib.plugins.parsers\n10. rdflib.plugins.memory\n11. rdflib.plugins.stores\n12. rdflib.plugins.sparql.results\n13. rdflib.plugins.sparql.processor\n14. rdflib.plugins.sparql.algebra\n15. rdflib.plugins.sparql.evaluate\n16. rdflib.plugins.sparql.parser\n17. rdflib.plugins.sparql.processor.utils\n18. rdflib.plugins.sparql.operators\n19. rdflib.plugins.sparql.optimizers\n20. rdflib.plugins.sparql.algebra.translate"}
{"mask": "all", "input": "spyder.<mask>.sourcecode.disambiguate_fname(", "reference": "utils", "full_reference": "spyder.utils.sourcecode.disambiguate_fname", "raw_gpt3.5": "1. path\n2. fname\n3. module\n4. name\n5. func\n6. code\n7. obj\n8. var\n9. arg\n10. index\n11. lineno\n12. col_offset\n13. scope\n14. symbol\n15. signature\n16. args\n17. kwds\n18. defaults\n19. annotations\n20. globals"}
{"mask": "first", "input": "networkx.<mask>write.json_graph.node_link_graph(", "reference": "read", "full_reference": "networkx.readwrite.json_graph.node_link_graph", "raw_gpt3.5": "1. gexf\n2. graphml\n3. pajek\n4. yaml\n5. cytoscape\n6. gpickle\n7. adjacency\n8. edgelist\n9. json\n10. multiedge\n11. multigraph\n12. simple\n13. sparse\n14. weighted\n15. xml\n16. digraph\n17. directed\n18. undirected\n19. bipartite\n20. relabel"}
{"mask": "first", "input": "grr_response_server.aff4.FACTORY.<mask>ListChildren(", "reference": "Multi", "full_reference": "grr_response_server.aff4.FACTORY.MultiListChildren", "raw_gpt3.5": "1. Get\n2. Open\n3. Create\n4. Delete\n5. Query\n6. Write\n7. Read\n8. Add\n9. Remove\n10. Find\n11. Enumerate\n12. List\n13. Retrieve\n14. Collect\n15. Fetch\n16. Scan\n17. Search\n18. Filter\n19. Traverse\n20. Access"}
{"mask": "first", "input": "vega_datasets._compat.<mask>_decode(", "reference": "bytes", "full_reference": "vega_datasets._compat.bytes_decode", "raw_gpt3.5": "1. utf\n2. latin\n3. ascii\n4. cp\n5. iso\n6. base\n7. unicode\n8. hex\n9. url\n10. puny\n11. gzip\n12. zlib\n13. bz2\n14. lzf\n15. snappy\n16. lzma\n17. blosc\n18. brotli\n19. zstd\n20. msgpack"}
{"mask": "last", "input": "projex<mask>.qt.QtGui.QGraphicsTextItem(", "reference": "ui", "full_reference": "projexui.qt.QtGui.QGraphicsTextItem", "raw_gpt3.5": "1. Scene\n2. View\n3. Widget\n4. Application\n5. Core\n6. Dialog\n7. Layout\n8. Animation\n9. Event\n10. Font\n11. Image\n12. Item\n13. Matrix\n14. Paint\n15. Path\n16. Pen\n17. Polygon\n18. Style\n19. Table\n20. Transform"}
{"mask": "all", "input": "tensorboard.plugins.hparams.<mask>.parse_session_start_info_plugin_data(", "reference": "metadata", "full_reference": "tensorboard.plugins.hparams.metadata.parse_session_start_info_plugin_data", "raw_gpt3.5": "1. session\n2. start\n3. info\n4. plugin\n5. data\n6. parse\n7. plugin_data\n8. session_start\n9. hparams\n10. parse_session\n11. start_info\n12. session_start_info\n13. parse_session_start\n14. start_info_plugin\n15. hparams_parse\n16. plugin_data_parse\n17. hparams_parse_session\n18. session_start_info_plugin\n19. hparams_parse_session_start\n20. parse_session_start_info"}
{"mask": "last", "input": "chunk_<mask>.chunk_on(", "reference": "on", "full_reference": "chunk_on.chunk_on", "raw_gpt3.5": "1.  chunk_size\n2.  chunk_index\n3.  chunk_name\n4.  chunk_id\n5.  chunk_data\n6.  chunk_offset\n7.  chunk_count\n8.  chunk_location\n9.  chunk_boundary\n10. chunk_position\n11. chunk_split\n12. chunk_group\n13. chunk_filter\n14. chunk_selector\n15. chunk_reader\n16. chunk_writer\n17. chunk_manager\n18. chunk_handler\n19. chunk_processor\n20. chunk_aggregator"}
{"mask": "first", "input": "hazelcast.protocol.codec.<mask>_add_entry_listener_to_key_codec.encode_request(", "reference": "map", "full_reference": "hazelcast.protocol.codec.map_add_entry_listener_to_key_codec.encode_request", "raw_gpt3.5": "1. map\n2. multi\n3. queue\n4. list\n5. set\n6. topic\n7. ringbuffer\n8. replicatedmap\n9. flakeidgenerator\n10. pncounter\n11. semaphore\n12. atomiclong\n13. cardinalityestimator\n14. durableexecutor\n15. executor\n16. idgenerator\n17. latch\n18. lock\n19. countdownlatch\n20. atomicreference"}
{"mask": "all", "input": "billy.core.db.committees.<mask>(", "reference": "save", "full_reference": "billy.core.db.committees.save", "raw_gpt3.5": "1. get_all()\n2. get_by_id(id)\n3. add(committee)\n4. update(committee)\n5. delete(committee)\n6. get_members(committee_id)\n7. get_chairs(committee_id)\n8. get_vice_chairs(committee_id)\n9. get_secretaries(committee_id)\n10. get_treasurers(committee_id)\n11. get_meetings(committee_id)\n12. get_reports(committee_id)\n13. get_budget(committee_id)\n14. get_expenses(committee_id)\n15. get_revenue(committee_id)\n16. get_donations(committee_id)\n17. get_sponsors(committee_id)\n18. get_events(committee_id)\n19. get_projects(committee_id)\n20. get_tasks(committee_id)"}
{"mask": "all", "input": "pysat.<mask>.CardEnc.atmost(", "reference": "card", "full_reference": "pysat.card.CardEnc.atmost", "raw_gpt3.5": "1. n\n2. k\n3. num\n4. max\n5. val\n6. limit\n7. bound\n8. threshold\n9. count\n10. size\n11. quantity\n12. capacity\n13. ceiling\n14. limit_val\n15. max_val\n16. upper_bound\n17. max_count\n18. max_size\n19. max_quantity\n20. max_capacity"}
{"mask": "all", "input": "mxnet.<mask>.ones(", "reference": "nd", "full_reference": "mxnet.nd.ones", "raw_gpt3.5": "1. shape\n2. dtype\n3. ctx\n4. order\n5. verbose\n6. axis\n7. squeeze_axis\n8. out\n9. name\n10. data\n11. num_outputs\n12. grad_req\n13. stype\n14. row_axis\n15. col_axis\n16. keepdims\n17. eps\n18. momentum\n19. wd\n20. rescale_grad"}
{"mask": "last", "input": "indra.assemblers.s<mask>.SifAssembler(", "reference": "if", "full_reference": "indra.assemblers.sif.SifAssembler", "raw_gpt3.5": "1. sbml\n2. statement\n3. sif\n4. schema\n5. source\n6. submodel\n7. species\n8. signature\n9. structure\n10. system\n11. syntax\n12. selection\n13. serializer\n14. service\n15. session\n16. set\n17. state\n18. store\n19. support\n20. summary"}
{"mask": "all", "input": "pkg_resources.Requirement.<mask>(", "reference": "parse", "full_reference": "pkg_resources.Requirement.parse", "raw_gpt3.5": "1. project_name\n2. specifier\n3. parse\n4. __init__\n5. extras\n6. key\n7. __eq__\n8. __hash__\n9. __str__\n10. __repr__\n11. __lt__\n12. __le__\n13. __gt__\n14. __ge__\n15. __ne__\n16. __bool__\n17. __nonzero__\n18. __contains__\n19. __len__\n20. __getitem__"}
{"mask": "last", "input": "imgaug.augmentables.heatmaps.HeatmapsOnImage.from_0to<mask>(", "reference": "1", "full_reference": "imgaug.augmentables.heatmaps.HeatmapsOnImage.from_0to1", "raw_gpt3.5": "1. 1\n2. 255\n3. 100\n4. 10\n5. 50\n6. 20\n7. 200\n8. 30\n9. 150\n10. 5\n11. 75\n12. 15\n13. 80\n14. 125\n15. 40\n16. 60\n17. 70\n18. 90\n19. 120\n20. 180"}
{"mask": "last", "input": "connor.command_parser.parse_command_line_<mask>(", "reference": "args", "full_reference": "connor.command_parser.parse_command_line_args", "raw_gpt3.5": "1. args\n2. options\n3. arguments\n4. string\n5. input\n6. output\n7. file\n8. text\n9. command\n10. prompt\n11. input_string\n12. command_line\n13. input_file\n14. output_file\n15. input_text\n16. output_text\n17. command_string\n18. input_command\n19. output_command\n20. command_args"}
{"mask": "all", "input": "fermipy.<mask>.native_impl.NativeInterface(", "reference": "jobs", "full_reference": "fermipy.jobs.native_impl.NativeInterface", "raw_gpt3.5": "1. gtanalysis\n2. utils\n3. data\n4. config\n5. irfs\n6. skymap\n7. spectrum\n8. sourcefind\n9. modeling\n10. catalog\n11. analysis\n12. version\n13. logging\n14. exceptions\n15. astro\n16. diffuse\n17. roi_model\n18. tsmap\n19. time\n20. stats"}
{"mask": "first", "input": "<mask>cast_healthchecker.utils.reconfigure_bird(", "reference": "any", "full_reference": "anycast_healthchecker.utils.reconfigure_bird", "raw_gpt3.5": "1. broad\n2. down\n3. up\n4. over\n5. under\n6. out\n7. in\n8. up_\n9. down_\n10. back\n11. re\n12. in_\n13. out_\n14. up_down\n15. down_up\n16. up_down_\n17. down_up_\n18. reconfigure\n19. reconfigure_\n20. reconfigure_birds"}
{"mask": "last", "input": "IPython.nbformat.from_<mask>(", "reference": "dict", "full_reference": "IPython.nbformat.from_dict", "raw_gpt3.5": "1. IPython.nbformat.from_filename()\n2. IPython.nbformat.from_file_path()\n3. IPython.nbformat.from_file_location()\n4. IPython.nbformat.from_dict()\n5. IPython.nbformat.from_json()\n6. IPython.nbformat.from_json_file()\n7. IPython.nbformat.from_json_string()\n8. IPython.nbformat.from_notebook_node()\n9. IPython.nbformat.from_py_dict()\n10. IPython.nbformat.from_pyfile()\n11. IPython.nbformat.from_pyjson()\n12. IPython.nbformat.from_pyjson_file()\n13. IPython.nbformat.from_pyjson_string()\n14. IPython.nbformat.from_pyobject()\n15. IPython.nbformat.from_pystring()\n16. IPython.nbformat.from_stream()\n17. IPython.nbformat.from_stream_json()\n18. IPython.nbformat.from_stream_pyjson()\n19. IPython.nbformat.from_version()\n20. IPython.nbformat.from_yaml()"}
{"mask": "all", "input": "fluent_contents.<mask>.ContentItem.objects.non_polymorphic(", "reference": "models", "full_reference": "fluent_contents.models.ContentItem.objects.non_polymorphic", "raw_gpt3.5": "1. _default_manager\n2. _meta\n3. _base_manager\n4. _get_next_or_previous_by_FIELD\n5. _get_next_or_previous_in_order\n6. _get_pk_val\n7. _get_unique_checks\n8. _meta_data\n9. _perform_date_checks\n10. _perform_unique_checks\n11. _prepare\n12. _save_parents\n13. _save_table\n14. _set_pk_val\n15. _state\n16. _unique_checks\n17. _update_fields\n18. _validate_unique\n19. _when_mentioned\n20. _with_transaction_atomic"}
{"mask": "all", "input": "django.contrib.messages.<mask>(", "reference": "warning", "full_reference": "django.contrib.messages.warning", "raw_gpt3.5": "1. constants\n2. context_processors\n3. exceptions\n4. get_messages\n5. middleware\n6. request\n7. set_level\n8. set_message\n9. set_safe_message\n10. set_tag\n11. set_tags\n12. set_verbose_name\n13. storage\n14. success\n15. template_response\n16. utils\n17. views\n18. warning\n19. write\n20. write_once"}
{"mask": "all", "input": "nodeshot.core.layers.models.Layer.<mask>.published(", "reference": "objects", "full_reference": "nodeshot.core.layers.models.Layer.objects.published", "raw_gpt3.5": "1. name\n2. get\n3. set\n4. is\n5. all\n6. filter\n7. exclude\n8. values\n9. values_list\n10. annotate\n11. order_by\n12. distinct\n13. count\n14. exists\n15. update\n16. delete\n17. create\n18. bulk_create\n19. prefetch_related\n20. select_related"}
{"mask": "last", "input": "validator_<mask>.errors.PathExistsError(", "reference": "collection", "full_reference": "validator_collection.errors.PathExistsError", "raw_gpt3.5": "1. path\n2. file\n3. directory\n4. folder\n5. resource\n6. url\n7. name\n8. item\n9. location\n10. dir\n11. target\n12. source\n13. object\n14. module\n15. config\n16. schema\n17. input\n18. output\n19. log\n20. permission"}
{"mask": "all", "input": "<mask>.result.GreenTestResult(", "reference": "green", "full_reference": "green.result.GreenTestResult", "raw_gpt3.5": "1. unittest\n2. nose\n3. pytest\n4. twisted\n5. trial\n6. django.test\n7. nose2\n8. robot.running.result.GreenTestResult\n9. robot.libraries.BuiltIn\n10. robot.running.model.TestSuite\n11. robot.running.model.TestCase\n12. robot.running.model.Keyword\n13. robot.running.model.TestSuiteVisitor\n14. robot.running.model.TestCaseVisitor\n15. robot.running.model.KeywordVisitor\n16. robot.running.model.TestSuiteRebotVisitor\n17. robot.running.model.TestCaseRebotVisitor\n18. robot.running.model.KeywordRebotVisitor\n19. robot.running.model.TestSuiteVisitorResult\n20. robot.running.model.TestCaseVisitorResult"}
{"mask": "first", "input": "<mask>pydevd_bundle.pydevd_save_locals.is_save_locals_available(", "reference": "_", "full_reference": "_pydevd_bundle.pydevd_save_locals.is_save_locals_available", "raw_gpt3.5": "1. _ :bool\n2. __ :bool\n3. ___ :bool\n4. ____ :bool\n5. _____ :bool\n6. ______ :bool\n7. _______ :bool\n8. ________ :bool\n9. _________ :bool\n10. __________ :bool\n11. ___________ :bool\n12. ____________ :bool\n13. _____________ :bool\n14. ______________ :bool\n15. _______________ :bool\n16. ________________ :bool\n17. _________________ :bool\n18. __________________ :bool\n19. ___________________ :bool\n20. ____________________ :bool"}
{"mask": "all", "input": "bika.lims.<mask>.snapshot.get_snapshot_by_version(", "reference": "api", "full_reference": "bika.lims.api.snapshot.get_snapshot_by_version", "raw_gpt3.5": "1. sample\n2. analysis\n3. container\n4. artifact\n5. result\n6. workflow\n7. instrument\n8. client\n9. project\n10. user\n11. storage\n12. configuration\n13. event\n14. attachment\n15. permission\n16. report\n17. label\n18. log\n19. template\n20. query"}
{"mask": "last", "input": "kolek<mask>.printer.printer.choice(", "reference": "to", "full_reference": "kolekto.printer.printer.choice", "raw_gpt3.5": "1. s\n2. a\n3. t\n4. i\n5. o\n6. n\n7. e\n8. r\n9. m\n10. u\n11. l\n12. f\n13. b\n14. c\n15. d\n16. g\n17. h\n18. j\n19. k\n20. v"}
{"mask": "first", "input": "pseudo.<mask>_generator_dsl.Placeholder(", "reference": "code", "full_reference": "pseudo.code_generator_dsl.Placeholder", "raw_gpt3.5": "1. pseudo.random_generator_dsl.Placeholder(\n2. pseudo.data_generator_dsl.Placeholder(\n3. pseudo.tensor_generator_dsl.Placeholder(\n4. pseudo.image_generator_dsl.Placeholder(\n5. pseudo.audio_generator_dsl.Placeholder(\n6. pseudo.text_generator_dsl.Placeholder(\n7. pseudo.video_generator_dsl.Placeholder(\n8. pseudo.graph_generator_dsl.Placeholder(\n9. pseudo.model_generator_dsl.Placeholder(\n10. pseudo.layer_generator_dsl.Placeholder(\n11. pseudo.loss_generator_dsl.Placeholder(\n12. pseudo.optimizer_generator_dsl.Placeholder(\n13. pseudo.metric_generator_dsl.Placeholder(\n14. pseudo.activation_generator_dsl.Placeholder(\n15. pseudo.regularizer_generator_dsl.Placeholder(\n16. pseudo.initializer_generator_dsl.Placeholder(\n17. pseudo.normalization_generator_dsl.Placeholder(\n18. pseudo.attention_generator_dsl.Placeholder(\n19. pseudo.recurrent_generator_dsl.Placeholder(\n20. pseudo.convolution_generator_dsl.Placeholder("}
{"mask": "last", "input": "bcbio.pipeline.datadict.get_srna_trna_<mask>(", "reference": "file", "full_reference": "bcbio.pipeline.datadict.get_srna_trna_file", "raw_gpt3.5": "1. counts\n2. data\n3. stats\n4. info\n5. table\n6. reads\n7. annotations\n8. expression\n9. features\n10. mapping\n11. sequences\n12. coverage\n13. alignments\n14. metrics\n15. transcripts\n16. intervals\n17. junctions\n18. variants\n19. regions\n20. samples"}
{"mask": "all", "input": "regenmaschine.<mask>.raise_remote_error(", "reference": "errors", "full_reference": "regenmaschine.errors.raise_remote_error", "raw_gpt3.5": "1. message\n2. error_type\n3. traceback\n4. exception\n5. error\n6. exc\n7. err\n8. remote_error\n9. exc_type\n10. exc_info\n11. exc_message\n12. exc_traceback\n13. exc_error\n14. exc_remote_error\n15. exc_err\n16. exc_exception\n17. exc_err_type\n18. exc_err_info\n19. exc_err_message\n20. exc_err_traceback"}
{"mask": "all", "input": "flaskr.auth.models.User.<mask>.get(", "reference": "query", "full_reference": "flaskr.auth.models.User.query.get", "raw_gpt3.5": "1. id\n2. username\n3. email\n4. password\n5. is_active\n6. is_authenticated\n7. is_anonymous\n8. is_admin\n9. is_staff\n10. is_superuser\n11. get_id\n12. set_password\n13. check_password\n14. get_username\n15. get_email\n16. get_is_active\n17. get_is_authenticated\n18. get_is_anonymous\n19. get_is_admin\n20. get_is_staff"}
{"mask": "all", "input": "param.<mask>(", "reference": "Integer", "full_reference": "param.Integer", "raw_gpt3.5": "1. values\n2. keys\n3. items\n4. get\n5. pop\n6. popitem\n7. setdefault\n8. update\n9. clear\n10. copy\n11. fromkeys\n12. __contains__\n13. __delitem__\n14. __eq__\n15. __getitem__\n16. __hash__\n17. __iter__\n18. __len__\n19. __ne__\n20. __setitem__"}
{"mask": "all", "input": "hotdoc.<mask>.loggable.info(", "reference": "utils", "full_reference": "hotdoc.utils.loggable.info", "raw_gpt3.5": "1. hotdoc.utils.loggable.info(\n2. hotdoc.core.loggable.info(\n3. hotdoc.parser.loggable.info(\n4. hotdoc.renderer.loggable.info(\n5. hotdoc.sphinx_ext.loggable.info(\n6. hotdoc.sphinx_ext.utils.loggable.info(\n7. hotdoc.sphinx_ext.core.loggable.info(\n8. hotdoc.sphinx_ext.parser.loggable.info(\n9. hotdoc.sphinx_ext.renderer.loggable.info(\n10. hotdoc.sphinx_ext.builders.loggable.info(\n11. hotdoc.sphinx_ext.builders.html.loggable.info(\n12. hotdoc.sphinx_ext.builders.latex.loggable.info(\n13. hotdoc.sphinx_ext.builders.manpage.loggable.info(\n14. hotdoc.sphinx_ext.builders.texinfo.loggable.info(\n15. hotdoc.sphinx_ext.builders.text.loggable.info(\n16. hotdoc.sphinx_ext.directives.loggable.info(\n17. hotdoc.sphinx_ext.directives.utils.loggable.info(\n18. hotdoc.sphinx_ext.directives.core.loggable.info(\n19. hotdoc.sphinx_ext.directives.parser.loggable.info(\n20. hotdoc.sphinx_ext.directives.renderer.loggable.info("}
{"mask": "first", "input": "<mask>ix.data.eventhub.EventHub_pb2_grpc.PublisherStub(", "reference": "pred", "full_reference": "predix.data.eventhub.EventHub_pb2_grpc.PublisherStub", "raw_gpt3.5": "1. google\n2. azure\n3. apollo\n4. confluent\n5. kafka\n6. grpc\n7. protobuf\n8. eventstream\n9. eventbridge\n10. eventstore\n11. eventgrid\n12. eventful\n13. eventuate\n14. eventide\n15. eventbrite\n16. eventgen\n17. eventio\n18. eventricity\n19. eventuate-tram\n20. eventuate-local"}
{"mask": "first", "input": "libsubmit.utils.<mask>time_to_minutes(", "reference": "w", "full_reference": "libsubmit.utils.wtime_to_minutes", "raw_gpt3.5": "1. convert\n2. parse\n3. format\n4. calculate\n5. get\n6. extract\n7. compute\n8. adjust\n9. transform\n10. convert_to\n11. parse_to\n12. format_to\n13. calculate_from\n14. get_from\n15. extract_from\n16. compute_from\n17. adjust_from\n18. transform_from\n19. convert_into\n20. parse_into"}
{"mask": "all", "input": "models.<mask>(", "reference": "People", "full_reference": "models.People", "raw_gpt3.5": "1. LSTMCell\n2. GRUCell\n3. RNNCell\n4. Sequential\n5. Model\n6. Dense\n7. Conv1D\n8. Conv2D\n9. Conv3D\n10. MaxPooling1D\n11. MaxPooling2D\n12. MaxPooling3D\n13. AveragePooling1D\n14. AveragePooling2D\n15. AveragePooling3D\n16. BatchNormalization\n17. Dropout\n18. Flatten\n19. Input\n20. Embedding"}
{"mask": "first", "input": "salt.config.schemas.<mask>xcluster.EsxclusterProxySchema.serialize(", "reference": "es", "full_reference": "salt.config.schemas.esxcluster.EsxclusterProxySchema.serialize", "raw_gpt3.5": "1. vm\n2. host\n3. data\n4. net\n5. disk\n6. cpu\n7. mem\n8. power\n9. config\n10. cluster\n11. storage\n12. network\n13. proxy\n14. esx\n15. vcenter\n16. hypervisor\n17. datastore\n18. resource\n19. inventory\n20. virtual"}
{"mask": "all", "input": "datadog_checks.tokumx.vendor.pymongo.<mask>._maybe_add_read_preference(", "reference": "message", "full_reference": "datadog_checks.tokumx.vendor.pymongo.message._maybe_add_read_preference", "raw_gpt3.5": "1. MongoClient\n2. ReadPreference\n3. ReplicaSetConnection\n4. MongoReplicaSetClient\n5. MongoShardedClient\n6. MongoSingleClient\n7. MongoSecondaryPreferred\n8. MongoPrimaryPreferred\n9. MongoSecondary\n10. MongoPrimary\n11. MongoShardedClient\n12. MongoSingleClient\n13. MongoReplicaSetClient\n14. MongoReplicaSetClientOptions\n15. MongoShardedClientOptions\n16. MongoSingleClientOptions\n17. MongoSecondaryPreferredOptions\n18. MongoPrimaryPreferredOptions\n19. MongoSecondaryOptions\n20. MongoPrimaryOptions"}
{"mask": "last", "input": "MQ<mask>.set_tmp_folder(", "reference": "2", "full_reference": "MQ2.set_tmp_folder", "raw_gpt3.5": "1. _dir\n2. _path\n3. _folder\n4. _location\n5. _directory\n6. _temp_folder\n7. _temp_dir\n8. _temp_path\n9. _temp_directory\n10. _tmp_dir\n11. _tmp_path\n12. _tmp_folder_path\n13. _tmp_folder_dir\n14. _tmp_directory\n15. _tmp_location\n16. _tmp_folder_location\n17. _temp_folder_path\n18. _temp_folder_dir\n19. _temp_folder_location\n20. _tmp_folder_directory"}
{"mask": "last", "input": "h<mask>.introspect.takes_kwargs(", "reference": "ug", "full_reference": "hug.introspect.takes_kwargs", "raw_gpt3.5": "1. http\n2. json\n3. xml\n4. flask\n5. django\n6. requests\n7. aiohttp\n8. sqlalchemy\n9. pandas\n10. numpy\n11. typing\n12. asyncio\n13. logging\n14. argparse\n15. functools\n16. os\n17. sys\n18. time\n19. datetime\n20. random"}
{"mask": "last", "input": "boiler.errors.register_error_<mask>(", "reference": "handler", "full_reference": "boiler.errors.register_error_handler", "raw_gpt3.5": "1. handler\n2. code\n3. message\n4. type\n5. exception\n6. name\n7. class\n8. detail\n9. reason\n10. status\n11. traceback\n12. log\n13. description\n14. metadata\n15. context\n16. severity\n17. category\n18. level\n19. source\n20. event"}
{"mask": "all", "input": "hyperion.<mask>.util.get_postcode(", "reference": "models", "full_reference": "hyperion.models.util.get_postcode", "raw_gpt3.5": "1. country\n2. address\n3. location\n4. city\n5. state\n6. zip\n7. postal\n8. code\n9. geo\n10. area\n11. district\n12. region\n13. territory\n14. province\n15. municipality\n16. borough\n17. precinct\n18. enclave\n19. hamlet\n20. village"}
{"mask": "first", "input": "goldman.signals.<mask>_req_update.send(", "reference": "post", "full_reference": "goldman.signals.post_req_update.send", "raw_gpt3.5": "1. market\n2. order\n3. trade\n4. price\n5. quote\n6. execution\n7. position\n8. security\n9. strategy\n10. risk\n11. account\n12. limit\n13. stop\n14. cancel\n15. fill\n16. orderbook\n17. volume\n18. liquidity\n19. imbalance\n20. auction"}
{"mask": "last", "input": "ug<mask>.utils.mlab.isstring(", "reference": "ali", "full_reference": "ugali.utils.mlab.isstring", "raw_gpt3.5": "1. str\n2. unicode\n3. bytes\n4. basestring\n5. string\n6. is_str\n7. is_string\n8. is_unicode\n9. is_bytes\n10. is_basestring\n11. is_string_like\n12. is_text\n13. is_text_string\n14. is_string_type\n15. is_string_or_bytes\n16. is_string_or_unicode\n17. is_string_or_bytes_like\n18. is_string_or_unicode_like\n19. is_string_or_bytes_type\n20. is_string_or_unicode_type"}
{"mask": "last", "input": "rez.vendor.pygraph.algorithms.utils.heapp<mask>(", "reference": "ush", "full_reference": "rez.vendor.pygraph.algorithms.utils.heappush", "raw_gpt3.5": "1. _ify\n2. ush\n3. op\n4. y\n5. ushpop\n6. ushpush\n7. ushreplace\n8. ushify\n9. ushremove\n10. ushheapify\n11. ushheapreplace\n12. ushheapreplacepop\n13. ushheapremove\n14. ushheapreplacepush\n15. ushheapreplacepushpop\n16. ushheapreplacepoppush\n17. ushheapreplacepushremove\n18. ushheapreplacepopremove\n19. ushheapreplacepushpopremove\n20. ushheapreplacepoppushremove"}
{"mask": "first", "input": "<mask>sec.template.add_encrypted_key(", "reference": "xml", "full_reference": "xmlsec.template.add_encrypted_key", "raw_gpt3.5": "1. cryptography\n2. aws\n3. google\n4. azure\n5. paramiko\n6. pycrypto\n7. boto3\n8. pyopenssl\n9. OpenSSL\n10. jwt\n11. django\n12. flask\n13. requests\n14. urllib3\n15. http\n16. ssl\n17. socket\n18. hashlib\n19. hmac\n20. secrets"}
{"mask": "last", "input": "grr_response_core.lib.rdf<mask>.artifacts.Artifact(", "reference": "values", "full_reference": "grr_response_core.lib.rdfvalues.artifacts.Artifact", "raw_gpt3.5": "1. Type\n2. Parser\n3. Graph\n4. Query\n5. Store\n6. Serializer\n7. Namespace\n8. Literal\n9. URIRef\n10. Value\n11. Statement\n12. BNode\n13. ConjunctiveGraph\n14. GraphMixin\n15. GraphInterface\n16. GraphQueryResult\n17. GraphUpdate\n18. GraphPattern\n19. GraphObject\n20. GraphAggregate"}
{"mask": "last", "input": "honeycomb.utils.plugin_<mask>.install_plugin(", "reference": "utils", "full_reference": "honeycomb.utils.plugin_utils.install_plugin", "raw_gpt3.5": "1. package\n2. loader\n3. manager\n4. registry\n5. system\n6. handler\n7. initializer\n8. interface\n9. controller\n10. provider\n11. helper\n12. connector\n13. resolver\n14. executor\n15. orchestrator\n16. adapter\n17. validator\n18. decorator\n19. logger\n20. sanitizer"}
{"mask": "all", "input": "dpxdt.<mask>.models.Build.query.get(", "reference": "server", "full_reference": "dpxdt.server.models.Build.query.get", "raw_gpt3.5": "1. id\n2. name\n3. version\n4. status\n5. created_at\n6. updated_at\n7. owner_id\n8. owner_name\n9. owner_email\n10. owner_phone\n11. owner_address\n12. owner_city\n13. owner_state\n14. owner_country\n15. owner_zipcode\n16. build_id\n17. build_name\n18. build_version\n19. build_status\n20. build_created_at"}
{"mask": "all", "input": "scapy.config.<mask>.netcache.in6_neighbor.get(", "reference": "conf", "full_reference": "scapy.config.conf.netcache.in6_neighbor.get", "raw_gpt3.5": "1. cache\n2. timeout\n3. enabled\n4. debug\n5. maxsize\n6. in4\n7. in6\n8. cache4\n9. cache6\n10. cache_timeout\n11. cache_enabled\n12. cache_debug\n13. cache_maxsize\n14. cache_in4\n15. cache_in6\n16. cache4_timeout\n17. cache6_timeout\n18. cache4_enabled\n19. cache6_enabled\n20. cache4_debug"}
{"mask": "last", "input": "tensorflow_hub.tf_utils.atomic_write_string_to_<mask>(", "reference": "file", "full_reference": "tensorflow_hub.tf_utils.atomic_write_string_to_file", "raw_gpt3.5": "1. file\n2. path\n3. disk\n4. buffer\n5. stream\n6. memory\n7. device\n8. storage\n9. location\n10. resource\n11. object\n12. cache\n13. database\n14. log\n15. registry\n16. database_file\n17. output_file\n18. input_file\n19. temp_file\n20. metadata_file"}
{"mask": "last", "input": "pygments.token.string_to_tokent<mask>(", "reference": "ype", "full_reference": "pygments.token.string_to_tokentype", "raw_gpt3.5": "1. ype\n2. ame\n3. ype_\n4. ame_\n5. ype_toke\n6. ame_toke\n7. ype_token\n8. ame_token\n9. ype_token_\n10. ame_token_\n11. ype_token_s\n12. ame_token_s\n13. ype_token_st\n14. ame_token_st\n15. ype_token_str\n16. ame_token_str\n17. ype_token_stri\n18. ame_token_stri\n19. ype_token_strin\n20. ame_token_strin"}
{"mask": "last", "input": "pymata_aio.pymata_<mask>.PymataSocket(", "reference": "socket", "full_reference": "pymata_aio.pymata_socket.PymataSocket", "raw_gpt3.5": "1. client\n2. message\n3. server\n4. connection\n5. handler\n6. event\n7. thread\n8. socket\n9. protocol\n10. transport\n11. endpoint\n12. address\n13. factory\n14. listener\n15. session\n16. channel\n17. buffer\n18. stream\n19. writer\n20. reader"}
{"mask": "last", "input": "ipy<mask>.show(", "reference": "volume", "full_reference": "ipyvolume.show", "raw_gpt3.5": "1. display\n2. widgets\n3. events\n4. output\n5. interact\n6. get_ipython\n7. config\n8. nbconvert\n9. nbformat\n10. kernel\n11. core\n12. lib\n13. testing\n14. console\n15. parallel\n16. genutils\n17. extensions\n18. displaypub\n19. completer\n20. debugger"}
{"mask": "first", "input": "<mask>apalm.junos.utils.junos_views.junos_protocol_route_table(", "reference": "n", "full_reference": "napalm.junos.utils.junos_views.junos_protocol_route_table", "raw_gpt3.5": "1. junos\n2. utils\n3. junos_views\n4. junos_protocol_route_table\n5. apalm.junos\n6. apalm.junos.utils\n7. apalm.junos_views\n8. apalm.junos_protocol_route_table\n9. apalm.junos.utils.junos_views\n10. apalm.junos.utils.junos_protocol_route_table\n11. apalm.junos_views.junos_protocol_route_table\n12. junos.utils\n13. junos_views.junos_protocol_route_table\n14. utils.junos_views\n15. utils.junos_protocol_route_table\n16. junos.utils.junos_views\n17. junos.utils.junos_protocol_route_table\n18. junos_views.junos_protocol_route_table\n19. apalm.junos.utils.junos_views.junos_protocol_route_table\n20. apalm.junos_views.junos_protocol_route_table"}
{"mask": "last", "input": "sympy.rot_axis<mask>(", "reference": "1", "full_reference": "sympy.rot_axis1", "raw_gpt3.5": "1. _angle\n2. _axis\n3. _coords\n4. _degree\n5. _dir\n6. _matrix\n7. _point\n8. _vector\n9. _around\n10. _perp\n11. _proj\n12. _to\n13. _from\n14. _norm\n15. _diff\n16. _mul\n17. _add\n18. _sub\n19. _cross\n20. _dot"}
{"mask": "all", "input": "projex.wikitext.styles.<mask>.get(", "reference": "styles", "full_reference": "projex.wikitext.styles.styles.get", "raw_gpt3.5": "1. font\n2. color\n3. size\n4. family\n5. weight\n6. decoration\n7. background\n8. align\n9. spacing\n10. transform\n11. underline\n12. italic\n13. bold\n14. strike\n15. shadow\n16. outline\n17. highlight\n18. subscript\n19. superscript\n20. baseline"}
{"mask": "last", "input": "hair<mask>.plugins.HairballPlugin.script_start_type(", "reference": "ball", "full_reference": "hairball.plugins.HairballPlugin.script_start_type", "raw_gpt3.5": "1. _version\n2. _ball\n3. _color\n4. _cut\n5. _length\n6. _style\n7. _texture\n8. _type\n9. _access\n10. _analysis\n11. _animation\n12. _brush\n13. _bundle\n14. _chain\n15. _clip\n16. _collision\n17. _comb\n18. _condition\n19. _constraint\n20. _curl"}
{"mask": "last", "input": "cryptography.x<mask>.extensions.UnrecognizedExtension(", "reference": "509", "full_reference": "cryptography.x509.extensions.UnrecognizedExtension", "raw_gpt3.5": "1. key\n2. 509\n3. oid\n4. name\n5. nss\n6. pkcs12\n7. pem\n8. der\n9. pkey\n10.509cert\n11. certificate\n12. authority\n13. certificatebuilder\n14. certificatestore\n15. certificatevalidationerror\n16. certificateverifycationcontext\n17. certificateverifycationerror\n18. certificateverifycationparameters\n19. certificateverifycationpolicy\n20. certificateverifycationstatus"}
{"mask": "first", "input": "<mask>vfs.volume.tsk_volume_system.TSKVolumeSystem(", "reference": "df", "full_reference": "dfvfs.volume.tsk_volume_system.TSKVolumeSystem", "raw_gpt3.5": "1. _open\n2. _close\n3. _read\n4. _write\n5. _seek\n6. _get_size\n7. _get_offset\n8. _get_block_size\n9. _get_block_count\n10. _get_block\n11. _get_block_data\n12. _get_block_flags\n13. _get_block_size_map\n14. _get_block_usage_map\n15. _get_block_type_map\n16. _get_block_type_count\n17. _get_block_type\n18. _get_block_type_name\n19. _get_block_type_description\n20. _get_block_type_flags"}
{"mask": "last", "input": "networking_cisco.plugins.cisco.cfg_agent.cfg_exceptions.IOSXEConfig<mask>(", "reference": "Exception", "full_reference": "networking_cisco.plugins.cisco.cfg_agent.cfg_exceptions.IOSXEConfigException", "raw_gpt3.5": "1. IOSXEConfigParseError\n2. IOSXEConfigInvalidError\n3. IOSXEConfigNotFoundError\n4. IOSXEConfigAccessError\n5. IOSXEConfigSyntaxError\n6. IOSXEConfigPermissionError\n7. IOSXEConfigReadError\n8. IOSXEConfigWriteError\n9. IOSXEConfigDeleteError\n10. IOSXEConfigUpdateError\n11. IOSXEConfigDuplicateError\n12. IOSXEConfigValidationError\n13. IOSXEConfigConversionError\n14. IOSXEConfigEncodingError\n15. IOSXEConfigDecodingError\n16. IOSXEConfigSerializationError\n17. IOSXEConfigDeserializationError\n18. IOSXEConfigMigrationError\n19. IOSXEConfigInitializationError\n20. IOSXEConfigRuntimeError"}
{"mask": "last", "input": "onelogin.saml<mask>.xml_utils.OneLogin_Saml2_XML.make_root(", "reference": "2", "full_reference": "onelogin.saml2.xml_utils.OneLogin_Saml2_XML.make_root", "raw_gpt3.5": "1. _element\n2. _tostring\n3. _Element\n4. _ElementTree\n5. _ElementPath\n6. _ElementInclude\n7. _ElementMaker\n8. _ElementString\n9. _ElementDescriptor\n10. _ElementInterface\n11. _ElementNamespace\n12. _ElementValidator\n13. _ElementRegistry\n14. _ElementContainer\n15. _ElementDeclaration\n16. _ElementDeclarationList\n17. _ElementDeclarationParser\n18. _ElementDeclarationSerializer\n19. _ElementDeclarationValidator\n20. _ElementDeclarationRegistry"}
{"mask": "first", "input": "apidoc.object.<mask>_raw.Object.Types(", "reference": "source", "full_reference": "apidoc.object.source_raw.Object.Types", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. update\n6. create\n7. delete\n8. find\n9. list\n10. parse\n11. serialize\n12. load\n13. save\n14. execute\n15. validate\n16. generate\n17. extract\n18. convert\n19. initialize\n20. import"}
{"mask": "last", "input": "pika.Blocking<mask>(", "reference": "Connection", "full_reference": "pika.BlockingConnection", "raw_gpt3.5": "1. Connection\n2. Channel\n3. BasicProperties\n4. Delivery\n5. Consumer\n6. DeliveryTag\n7. ConnectionParameters\n8. ConnectionClosed\n9. ConnectionError\n10. ConnectionBlocked\n11. ConnectionUnblocked\n12. ConnectionTune\n13. ConnectionOpen\n14. ConnectionClose\n15. ConnectionStart\n16. ConnectionSecure\n17. ConnectionCloseOK\n18. ConnectionStartOK\n19. ConnectionTuneOK\n20. ConnectionSecureOK"}
{"mask": "first", "input": "tictax.<mask>ictax.matrix(", "reference": "t", "full_reference": "tictax.tictax.matrix", "raw_gpt3.5": "1. create\n2. update\n3. delete\n4. get\n5. set\n6. clear\n7. transpose\n8. multiply\n9. add\n10. subtract\n11. divide\n12. invert\n13. determinant\n14. trace\n15. eigenvalues\n16. eigenvectors\n17. diagonalize\n18. solve\n19. LU_decomposition\n20. QR_decomposition"}
{"mask": "last", "input": "plaso.containers.time_<mask>.PythonDatetimeEvent(", "reference": "events", "full_reference": "plaso.containers.time_events.PythonDatetimeEvent", "raw_gpt3.5": "1. Timestamp\n2. Zone\n3. Format\n4. Delta\n5. Parser\n6. Range\n7. Conversion\n8. ZoneInfo\n9. Representation\n10. ConversionHelper\n11. Definitions\n12. Timezone\n13. TimeRange\n14. TimeValues\n15. TimezoneOffset\n16. TimezoneDefinition\n17. TimezoneInformation\n18. TimezoneTransition\n19. TimezoneTransitionList\n20. TimezoneTransitionError"}
{"mask": "first", "input": "numpy.fft.<mask>fftfreq(", "reference": "r", "full_reference": "numpy.fft.rfftfreq", "raw_gpt3.5": "1. n\n2. d\n3. s\n4. r\n5. i\n6. a\n7. p\n8. b\n9. h\n10. l\n11. m\n12. n\n13. o\n14. t\n15. u\n16. v\n17. w\n18. x\n19. y\n20. z"}
{"mask": "all", "input": "smc.<mask>.exceptions.ResourceNotFound(", "reference": "api", "full_reference": "smc.api.exceptions.ResourceNotFound", "raw_gpt3.5": "1. client\n2. api\n3. server\n4. connection\n5. resource\n6. session\n7. request\n8. response\n9. auth\n10. error\n11. utils\n12. model\n13. config\n14. logger\n15. security\n16. transport\n17. protocol\n18. message\n19. serializer\n20. cache"}
{"mask": "last", "input": "trepan.lib.th<mask>.map_thread_names(", "reference": "red", "full_reference": "trepan.lib.thred.map_thread_names", "raw_gpt3.5": "1. read\n2. readwrite\n3. readlines\n4. readlink\n5. readv\n6. readinto\n7. readall\n8. read_until\n9. read_csv\n10. read_sql\n11. read_excel\n12. read_pickle\n13. read_html\n14. read_json\n15. read_parquet\n16. read_sql_table\n17. read_sql_query\n18. read_sql_table\n19. read_sql_query\n20. read_sql_table_schema"}
{"mask": "last", "input": "pingou<mask>.parametric.mixed_anova(", "reference": "in", "full_reference": "pingouin.parametric.mixed_anova", "raw_gpt3.5": "1. .statsmodels\n2. .statsmodels.stats\n3. .statsmodels.stats.anova\n4. .statsmodels.stats.anova.anova_lm\n5. .statsmodels.stats.anova.anova_single\n6. .statsmodels.stats.anova.anova_twoway\n7. .statsmodels.stats.anova.anova_twoway_repeated\n8. .statsmodels.stats.anova.anova_generic\n9. .statsmodels.stats.anova.anova_mixed\n10. .statsmodels.stats.anova.anova_lm_multi\n11. .statsmodels.stats.anova.anova_lm_mixed\n12. .statsmodels.stats.anova.anova_lm_repeated\n13. .statsmodels.stats.anova.anova_lm_generic\n14. .statsmodels.stats.anova.anova_lm_twoway\n15. .statsmodels.stats.anova.anova_lm_twoway_repeated\n16. .statsmodels.stats.anova.anova_lm_single\n17. .statsmodels.stats.anova.anova_lm_mixed_repeated\n18. .statsmodels.stats.anova.anova_lm_mixed_generic\n19. .statsmodels.stats.anova.anova_lm_mixed_twoway\n20. .statsmodels.stats.anova.anova_lm_mixed_twoway_repeated"}
{"mask": "first", "input": "pyghmi.ipmi.<mask>ru.FRU(", "reference": "f", "full_reference": "pyghmi.ipmi.fru.FRU", "raw_gpt3.5": "1. get\n2. set\n3. get_all\n4. get_device_id\n5. get_fru_info\n6. get_inventory_of_type\n7. get_sensor_reading\n8. get_sensor_type\n9. get_sensor_units\n10. get_sdr\n11. get_sdr_by_type\n12. get_sdr_repository_info\n13. get_sensor_thresholds\n14. get_sensor_value\n15. get_sensor_values\n16. get_system_event_log\n17. get_user_access\n18. get_user_name\n19. get_user_password\n20. get_user_privilege"}
{"mask": "first", "input": "matplotlib_venn.<mask>region.VennCircleRegion(", "reference": "_", "full_reference": "matplotlib_venn._region.VennCircleRegion", "raw_gpt3.5": "1. _get_label_center\n2. _get_patch_coords\n3. _get_patch_path\n4. _get_text_position\n5. _get_transformed_patch_coords\n6. _update_patch_coords\n7. contains_point\n8. draw\n9. get_clip_path\n10. get_edgecolor\n11. get_facecolor\n12. get_label\n13. get_label_position\n14. get_label_text\n15. get_path\n16. get_path_patch\n17. get_transform\n18. set_clip_path\n19. set_edgecolor\n20. set_facecolor"}
{"mask": "first", "input": "<mask>_commit.output.write_line(", "reference": "pre", "full_reference": "pre_commit.output.write_line", "raw_gpt3.5": "1. git_commit.output.write_line(\n2. svn_commit.output.write_line(\n3. hg_commit.output.write_line(\n4. bzr_commit.output.write_line(\n5. cvs_commit.output.write_line(\n6. tfvc_commit.output.write_line(\n7. p4_commit.output.write_line(\n8. vss_commit.output.write_line(\n9. tfs_commit.output.write_line(\n10. clearcase_commit.output.write_line(\n11. perforce_commit.output.write_line(\n12. plastic_commit.output.write_line(\n13. subversion_commit.output.write_line(\n14. mercurial_commit.output.write_line(\n15. darcs_commit.output.write_line(\n16. fossil_commit.output.write_line(\n17. monotone_commit.output.write_line(\n18. bazaar_commit.output.write_line(\n19. cvsnt_commit.output.write_line(\n20. gitlab_commit.output.write_line("}
{"mask": "last", "input": "bubbletools.utils.line_<mask>(", "reference": "type", "full_reference": "bubbletools.utils.line_type", "raw_gpt3.5": "1. plot\n2. intersection\n3. segment\n4. slope\n5. distance\n6. midpoint\n7. parallel\n8. perpendicular\n9. angle\n10. equation\n11. point\n12. reflect\n13. rotate\n14. translate\n15. clip\n16. extend\n17. simplify\n18. tangent\n19. normal\n20. bisector"}
{"mask": "all", "input": "scout.parse.<mask>.get_omim_panel_genes(", "reference": "panel", "full_reference": "scout.parse.panel.get_omim_panel_genes", "raw_gpt3.5": "1. panel_name\n2. panel_version\n3. panel_id\n4. panel_genes\n5. panel_info\n6. panel_data\n7. panel_metadata\n8. panel_description\n9. panel_annotations\n10. panel_references\n11. panel_citations\n12. panel_publications\n13. panel_authors\n14. panel_contributors\n15. panel_license\n16. panel_terms\n17. panel_categories\n18. panel_diseases\n19. panel_phenotypes\n20. panel_variants"}
{"mask": "last", "input": "pybel_<mask>.analysis.stability.get_contradiction_summary(", "reference": "tools", "full_reference": "pybel_tools.analysis.stability.get_contradiction_summary", "raw_gpt3.5": "1. calculate\n2. compute\n3. evaluate\n4. determine\n5. analyze\n6. predict\n7. estimate\n8. measure\n9. determine_\n10. assess\n11. determine_\n12. infer\n13. determine_contradictions\n14. identify\n15. detect\n16. resolve\n17. find\n18. determine_contradiction\n19. check\n20. determine_contradiction_summary"}
{"mask": "first", "input": "autograd.scipy.stats.multivariate_normal.<mask>pdf(", "reference": "log", "full_reference": "autograd.scipy.stats.multivariate_normal.logpdf", "raw_gpt3.5": "1. log: autograd.scipy.stats.multivariate_normal.logpdf()\n2. cdf: autograd.scipy.stats.multivariate_normal.cdf()\n3. entropy: autograd.scipy.stats.multivariate_normal.entropy()\n4. rvs: autograd.scipy.stats.multivariate_normal.rvs()\n5. mean: autograd.scipy.stats.multivariate_normal.mean()\n6. var: autograd.scipy.stats.multivariate_normal.var()\n7. cov: autograd.scipy.stats.multivariate_normal.cov()\n8. std: autograd.scipy.stats.multivariate_normal.std()\n9. moment: autograd.scipy.stats.multivariate_normal.moment()\n10. median: autograd.scipy.stats.multivariate_normal.median()\n11. mode: autograd.scipy.stats.multivariate_normal.mode()\n12. fit: autograd.scipy.stats.multivariate_normal.fit()\n13. interval: autograd.scipy.stats.multivariate_normal.interval()\n14. expect: autograd.scipy.stats.multivariate_normal.expect()\n15. logcdf: autograd.scipy.stats.multivariate_normal.logcdf()\n16. logpmf: autograd.scipy.stats.multivariate_normal.logpmf()\n17. pmf: autograd.scipy.stats.multivariate_normal.pmf()\n18. sf: autograd.scipy.stats.multivariate_normal.sf()\n19. stats: autograd.scipy.stats.multivariate_normal.stats()\n20. moment_type: autograd.scipy.stats.multivariate_normal.moment_type()"}
{"mask": "last", "input": "uncompyle6.parsers.parse33.Python33Parser<mask>(", "reference": "Single", "full_reference": "uncompyle6.parsers.parse33.Python33ParserSingle", "raw_gpt3.5": "1. parse\n2. _expr\n3. _stmt\n4. _suite\n5. _test\n6. _factor\n7. _term\n8. _power\n9. _atom\n10. _trailer\n11. _arglist\n12. _comp_iter\n13. _comp_for\n14. _comp_if\n15. _yield_expr\n16. _testlist_comp\n17. _testlist\n18. _dictorsetmaker\n19. _classdef\n20. _funcdef"}
{"mask": "last", "input": "samcli.commands._utils.options.template_click_<mask>(", "reference": "option", "full_reference": "samcli.commands._utils.options.template_click_option", "raw_gpt3.5": "1. completer\n2. callback\n3. group\n4. option\n5. prompt\n6. type\n7. default\n8. help\n9. show_choices\n10. show_default\n11. show_envvar\n12. show_nargs\n13. show_required\n14. show_choices\n15. show_type\n16. show_count\n17. show_hidden\n18. show_options\n19. show_choices\n20. show_value"}
{"mask": "first", "input": "<mask>ocore.Cryptography.Crypto.Crypto.ToScriptHash(", "reference": "ne", "full_reference": "neocore.Cryptography.Crypto.Crypto.ToScriptHash", "raw_gpt3.5": "1. ne\n2. c\n3. de\n4. se\n5. be\n6. le\n7. fe\n8. me\n9. ve\n10. he\n11. ze\n12. pe\n13. te\n14. re\n15. ke\n16. we\n17. xe\n18. ye\n19. ge\n20. je"}
{"mask": "all", "input": "cerberus.<mask>.drop_item_from_tuple(", "reference": "utils", "full_reference": "cerberus.utils.drop_item_from_tuple", "raw_gpt3.5": "1. schema\n2. validator\n3. errors\n4. exceptions\n5. validator_registry\n6. type_registry\n7. validator_mapping\n8. type_mapping\n9. validator_registry.add\n10. type_registry.add\n11. validator_mapping.add\n12. type_mapping.add\n13. validator_registry.pop\n14. type_registry.pop\n15. validator_mapping.pop\n16. type_mapping.pop\n17. validator_registry.get\n18. type_registry.get\n19. validator_mapping.get\n20. type_mapping.get"}
{"mask": "all", "input": "MAVProxy.<mask>.lib.win_layout.save_layout(", "reference": "modules", "full_reference": "MAVProxy.modules.lib.win_layout.save_layout", "raw_gpt3.5": "1. window\n2. layout\n3. lib\n4. win\n5. save\n6. mav\n7. proxy\n8. mavproxy\n9. gui\n10. config\n11. settings\n12. state\n13. data\n14. file\n15. manager\n16. utils\n17. core\n18. message\n19. module\n20. mission"}
{"mask": "all", "input": "uliweb.<mask>.headers.get(", "reference": "request", "full_reference": "uliweb.request.headers.get", "raw_gpt3.5": "1. request\n2. environ\n3. response\n4. cookies\n5. session\n6. auth\n7. content_type\n8. content_length\n9. accept_charset\n10. accept_encoding\n11. accept_language\n12. cache_control\n13. connection\n14. host\n15. pragma\n16. referer\n17. user_agent\n18. accept\n19. accept_datetime\n20. authorization"}
{"mask": "first", "input": "coinbase.wallet.error.<mask>_api_error(", "reference": "build", "full_reference": "coinbase.wallet.error.build_api_error", "raw_gpt3.5": "1. http\n2. json\n3. requests\n4. coinbase\n5. auth\n6. client\n7. response\n8. message\n9. status\n10. error\n11. api\n12. invalid\n13. signature\n14. rate_limit\n15. not_found\n16. server\n17. unauthorized\n18. forbidden\n19. bad_request\n20. internal_server"}
{"mask": "all", "input": "edxval.<mask>.Profile.objects.get(", "reference": "models", "full_reference": "edxval.models.Profile.objects.get", "raw_gpt3.5": "1. user\n2. course\n3. enrollment\n4. organization\n5. student\n6. instructor\n7. staff\n8. admin\n9. group\n10. grade\n11. certificate\n12. progress\n13. completion\n14. assessment\n15. quiz\n16. survey\n17. feedback\n18. activity\n19. submission\n20. credential"}
{"mask": "last", "input": "py<mask>.exceptions.InvalidImageMember(", "reference": "rax", "full_reference": "pyrax.exceptions.InvalidImageMember", "raw_gpt3.5": "1. PIL\n2. numpy\n3. skimage\n4. cv2\n5. scipy\n6. matplotlib\n7. tensorflow\n8. keras\n9. skimage\n10. skimage.io\n11. skimage.color\n12. skimage.filters\n13. skimage.segmentation\n14. skimage.transform\n15. skimage.util\n16. skimage.measure\n17. skimage.draw\n18. skimage.morphology\n19. skimage.feature\n20. skimage.exposure"}
{"mask": "last", "input": "gw2<mask>.session.get(", "reference": "api", "full_reference": "gw2api.session.get", "raw_gpt3.5": "1. auth\n2. client\n3. cookies\n4. credentials\n5. data\n6. headers\n7. hooks\n8. params\n9. proxies\n10. redirect\n11. stream\n12. timeout\n13. trust_env\n14. verify\n15. cert\n16. allow_redirects\n17. json\n18. files\n19. auth_token\n20. auth_header"}
{"mask": "last", "input": "butcher.util.hash_<mask>(", "reference": "file", "full_reference": "butcher.util.hash_file", "raw_gpt3.5": "1. bytes\n2. hexdigest\n3. sha1\n4. sha224\n5. sha256\n6. sha384\n7. sha3_224\n8. sha3_256\n9. sha3_384\n10. sha3_512\n11. sha512\n12. shake_128\n13. shake_256\n14. update\n15. blake2b\n16. blake2s\n17. digest\n18. new\n19. pbkdf2_hmac\n20. scrypt"}
{"mask": "last", "input": "libpysal.cg.get_bounding_<mask>(", "reference": "box", "full_reference": "libpysal.cg.get_bounding_box", "raw_gpt3.5": "1. box\n2. coords\n3. rectangle\n4. vertices\n5. region\n6. corners\n7. area\n8. extent\n9. polygon\n10. boundary\n11. box_2d\n12. box_3d\n13. envelope\n14. hull\n15. rectangle_2d\n16. rectangle_3d\n17. shape\n18. square\n19. tile\n20. window"}
{"mask": "last", "input": "validator_<mask>.validators.not_empty(", "reference": "collection", "full_reference": "validator_collection.validators.not_empty", "raw_gpt3.5": "1. message\n2. value\n3. field\n4. data\n5. input\n6. form\n7. string\n8. error\n9. list\n10. dict\n11. file\n12. email\n13. phone\n14. url\n15. date\n16. time\n17. datetime\n18. integer\n19. float\n20. decimal"}
{"mask": "first", "input": "<mask>engine.model.world.GenerationParameters(", "reference": "world", "full_reference": "worldengine.model.world.GenerationParameters", "raw_gpt3.5": "1. terrain\n2. biome\n3. climate\n4. world\n5. map\n6. noise\n7. chunk\n8. heightmap\n9. feature\n10. structure\n11. decoration\n12. surface\n13. cave\n14. ore\n15. tree\n16. village\n17. dungeon\n18. stronghold\n19. mansion\n20. temple"}
{"mask": "last", "input": "ontology.utils.arguments.type_<mask>(", "reference": "assert", "full_reference": "ontology.utils.arguments.type_assert", "raw_gpt3.5": "1. hint\n2. name\n3. str\n4. check\n5. list\n6. dict\n7. module\n8. tuple\n9. bool\n10. error\n11. object\n12. class\n13. id\n14. code\n15. info\n16. set\n17. func\n18. value\n19. options\n20. annotation"}
{"mask": "first", "input": "hyperstream.<mask>Stream(", "reference": "Hyper", "full_reference": "hyperstream.HyperStream", "raw_gpt3.5": "1. Data\n2. Time\n3. Multi\n4. Window\n5. Chunk\n6. Event\n7. Batch\n8. Resampling\n9. Sliding\n10. Aggregation\n11. Filter\n12. Merge\n13. Join\n14. Interpolation\n15. Sampling\n16. Downsample\n17. Upsample\n18. Rolling\n19. Grouped\n20. Buffered"}
{"mask": "last", "input": "qut<mask>.basis(", "reference": "ip", "full_reference": "qutip.basis", "raw_gpt3.5": "1. qutip.basis(\n2. qutip.qip.basis(\n3. qutip.qip.operations.basis(\n4. qutip.qip.device.basis(\n5. qutip.qip.circuit.basis(\n6. qutip.qip.compiler.basis(\n7. qutip.qip.pulse.basis(\n8. qutip.qip.protocols.basis(\n9. qutip.qip.qubits.basis(\n10. qutip.qip.subsystems.basis(\n11. qutip.qip.superop_reps.basis(\n12. qutip.qip.superop_reps.basis_transformations(\n13. qutip.qip.superop_reps.basis_utils(\n14. qutip.qip.superop_reps.basis_tools(\n15. qutip.qip.superop_reps.basis_generators(\n16. qutip.qip.superop_reps.basis_states(\n17. qutip.qip.superop_reps.basis_operators(\n18. qutip.qip.superop_reps.basis_transforms(\n19. qutip.qip.superop_reps.basis_transformations_qobj(\n20. qutip.qip.superop_reps.basis_transformations_super("}
{"mask": "last", "input": "scapy.base_classes.Set<mask>(", "reference": "Gen", "full_reference": "scapy.base_classes.SetGen", "raw_gpt3.5": "1. SetField\n2. SetGen\n3. SetListField\n4. SetSocket\n5. SetEnumField\n6. SetDynamic\n7. SetLast\n8. SetLayer\n9. SetPayload\n10. SetMACField\n11. SetIPField\n12. SetShortField\n13. SetLongField\n14. SetXByteField\n15. SetXShortField\n16. SetXIntField\n17. SetXLongField\n18. SetXLEShortField\n19. SetXLEIntField\n20. SetXLELongField"}
{"mask": "last", "input": "smartcard.AbstractCardRequest.AbstractCard<mask>.waitforcard(", "reference": "Request", "full_reference": "smartcard.AbstractCardRequest.AbstractCardRequest.waitforcard", "raw_gpt3.5": "1. Connection\n2. Channel\n3. Command\n4. Response\n5. Protocol\n6. Event\n7. Transaction\n8. Session\n9. Data\n10. Message\n11. Reader\n12. Terminal\n13. Factory\n14. Transport\n15. Interface\n16. Status\n17. Attribute\n18. Element\n19. Packet\n20. Exchange"}
{"mask": "all", "input": "leonardo.module.web.models.Page.<mask>.for_request(", "reference": "objects", "full_reference": "leonardo.module.web.models.Page.objects.for_request", "raw_gpt3.5": "1. get\n2. all\n3. filter\n4. objects\n5. exclude\n6. prefetch_related\n7. select_related\n8. annotate\n9. values\n10. values_list\n11. order_by\n12. distinct\n13. count\n14. create\n15. update\n16. delete\n17. exists\n18. first\n19. last\n20. iterator"}
{"mask": "last", "input": "syn<mask>.lib.ast.PropPivotOut(", "reference": "apse", "full_reference": "synapse.lib.ast.PropPivotOut", "raw_gpt3.5": "1. syntax\n2. sys\n3. sympy\n4. sync\n5. sysconfig\n6. sysv_ipc\n7. sysctl\n8. sysfs\n9. sysinfo\n10. syslog\n11. sysfsutils\n12. sysstat\n13. sysfsutils-dev\n14. sysdig\n15. sysfsutils-udeb\n16. sysfsutils-doc\n17. sysfsutils-udeb\n18. sysfsutils-dev-doc\n19. sysfsutils-dev-udeb\n20. sysfsutils-dev-udeb-dbg"}
{"mask": "first", "input": "setuptools.extern.packaging.specifiers.<mask>ifierSet(", "reference": "Spec", "full_reference": "setuptools.extern.packaging.specifiers.SpecifierSet", "raw_gpt3.5": "1. Spec\n2. Version\n3. Environment\n4. Invalid\n5. Legacy\n6. Base\n7. Union\n8. Intersection\n9. Range\n10. Any\n11. Compatible\n12. Incompatible\n13. Wildcard\n14. Empty\n15. InvalidSpecifier\n16. Specifier\n17. SpecifierSet\n18. VersionSpecifier\n19. VersionUnion\n20. VersionIntersection"}
{"mask": "last", "input": "bcb<mask>.pipeline.datadict.get_srna_gtf_file(", "reference": "io", "full_reference": "bcbio.pipeline.datadict.get_srna_gtf_file", "raw_gpt3.5": "1. _path\n2. _file\n3. _dir\n4. _name\n5. _root\n6. _base\n7. _ext\n8. _filename\n9. _prefix\n10. _suffix\n11. _src\n12. _dest\n13. _url\n14. _data\n15. _config\n16. _input\n17. _output\n18. _log\n19. _cache\n20. _result"}
{"mask": "first", "input": "<mask>ilt.git.overlay(", "reference": "g", "full_reference": "gilt.git.overlay", "raw_gpt3.5": "1. sk : sklearn\n2. bu : build\n3. gi : git\n4. ut : utils\n5. to : tools\n6. fi : file\n7. co : config\n8. pa : path\n9. da : data\n10. mo : model\n11. ve : version\n12. ma : main\n13. se : setuptools\n14. lo : logging\n15. co : context\n16. re : repo\n17. in : init\n18. co : commands\n19. me : metadata\n20. co : compat"}
{"mask": "all", "input": "resolwe.flow.<mask>.Relation.objects.get(", "reference": "models", "full_reference": "resolwe.flow.models.Relation.objects.get", "raw_gpt3.5": "1. data\n2. process\n3. collection\n4. entity\n5. input\n6. output\n7. storage\n8. descriptor\n9. type\n10. manager\n11. utils\n12. signals\n13. exceptions\n14. auth\n15. settings\n16. contrib\n17. tests\n18. views\n19. api\n20. core"}
{"mask": "first", "input": "saharaclient.api.base.<mask>_json(", "reference": "get", "full_reference": "saharaclient.api.base.get_json", "raw_gpt3.5": "1. _get_json\n2. _post_json\n3. _put_json\n4. _delete_json\n5. _patch_json\n6. _head_json\n7. _options_json\n8. _trace_json\n9. _connect_json\n10. _propfind_json\n11. _proppatch_json\n12. _mkcol_json\n13. _copy_json\n14. _move_json\n15. _lock_json\n16. _unlock_json\n17. _report_json\n18. _mkactivity_json\n19. _checkout_json\n20. _merge_json"}
{"mask": "last", "input": "pyclamd.ClamdUnix<mask>(", "reference": "Socket", "full_reference": "pyclamd.ClamdUnixSocket", "raw_gpt3.5": "1. Socket\n2. Path\n3. Scan\n4. Version\n5. Ping\n6. Reload\n7. Shutdown\n8. Stats\n9. PingHost\n10. PingProxy\n11. PingProxyHost\n12. PingProxyPort\n13. PingProxyUser\n14. PingProxyPass\n15. PingTimeout\n16. PingSocket\n17. PingPath\n18. PingScan\n19. PingVersion\n20. PingStats"}
{"mask": "last", "input": "wafflehaus.neutron.nova_interaction.common.Nova<mask>(", "reference": "Connection", "full_reference": "wafflehaus.neutron.nova_interaction.common.NovaConnection", "raw_gpt3.5": "1. NovaInteraction\n2. NovaInteractionBase\n3. NovaInteractionException\n4. NovaInteractionResult\n5. NovaInteractionContext\n6. NovaInteractionManager\n7. NovaInteractionSerializer\n8. NovaInteractionSerializerBase\n9. NovaInteractionSerializerException\n10. NovaInteractionSerializerResult\n11. NovaInteractionSerializerContext\n12. NovaInteractionSerializerManager\n13. NovaInteractionSerializerFactory\n14. NovaInteractionSerializerPlugin\n15. NovaInteractionSerializerPluginBase\n16. NovaInteractionSerializerPluginException\n17. NovaInteractionSerializerPluginResult\n18. NovaInteractionSerializerPluginContext\n19. NovaInteractionSerializerPluginManager\n20. NovaInteractionSerializerPluginFactory"}
{"mask": "all", "input": "enterprise.<mask>.EnterpriseCustomerUser(", "reference": "models", "full_reference": "enterprise.models.EnterpriseCustomerUser", "raw_gpt3.5": "1. authentication\n2. authorization\n3. billing\n4. configuration\n5. customer\n6. data\n7. email\n8. group\n9. identity\n10. integration\n11. license\n12. management\n13. notification\n14. organization\n15. permission\n16. policy\n17. profile\n18. role\n19. security\n20. subscription"}
{"mask": "all", "input": "pyrogram.<mask>.functions.messages.CheckChatInvite(", "reference": "api", "full_reference": "pyrogram.api.functions.messages.CheckChatInvite", "raw_gpt3.5": "1. get\n2. delete\n3. accept\n4. decline\n5. edit\n6. revoke\n7. import\n8. export\n9. send\n10. create\n11. join\n12. leave\n13. parse\n14. resolve\n15. validate\n16. generate\n17. fetch\n18. update\n19. query\n20. verify"}
{"mask": "last", "input": "ipy_<mask>.IpyTable(", "reference": "table", "full_reference": "ipy_table.IpyTable", "raw_gpt3.5": "1. display\n2. widgets\n3. events\n4. utils\n5. sheet\n6. output\n7. grid\n8. format\n9. config\n10. html\n11. sheetview\n12. column\n13. row\n14. cell\n15. style\n16. editor\n17. selection\n18. clipboard\n19. dragdrop\n20. json"}
{"mask": "all", "input": "cassandra.cqlengine.connection.<mask>(", "reference": "execute", "full_reference": "cassandra.cqlengine.connection.execute", "raw_gpt3.5": "1. default\n2. setup\n3. register_connection\n4. execute\n5. get_session\n6. get_cluster\n7. _get_connection\n8. _get_session\n9. _get_cluster\n10. _execute\n11. _default\n12. _setup\n13. _register_connection\n14. _get_default_connection\n15. _get_setup_connection\n16. _get_registered_connection\n17. _execute_query\n18. _execute_statement\n19. _execute_query_async\n20. _execute_statement_async"}
{"mask": "first", "input": "pmagpy.pmag.<mask>_attr(", "reference": "get", "full_reference": "pmagpy.pmag.get_attr", "raw_gpt3.5": "1. add\n2. calc\n3. check\n4. convert\n5. define\n6. delete\n7. get\n8. list\n9. load\n10. make\n11. plot\n12. print\n13. read\n14. remove\n15. save\n16. set\n17. show\n18. update\n19. write\n20. zero"}
{"mask": "last", "input": "route<mask>.xml_generators.create_hosted_zone_writer(", "reference": "53", "full_reference": "route53.xml_generators.create_hosted_zone_writer", "raw_gpt3.5": "1. parser\n2. utils\n3. writer\n4. generator\n5. builder\n6. serializer\n7. encoder\n8. formatter\n9. handler\n10. decorator\n11. adapter\n12. manager\n13. executor\n14. controller\n15. retriever\n16. validator\n17. connector\n18. resolver\n19. composer\n20. transformer"}
{"mask": "all", "input": "clips._clips.<mask>.EnvSlotSources(", "reference": "lib", "full_reference": "clips._clips.lib.EnvSlotSources", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. clear\n6. count\n7. index\n8. keys\n9. values\n10. items\n11. update\n12. extend\n13. append\n14. pop\n15. sort\n16. reverse\n17. copy\n18. fromkeys\n19. __contains__\n20. __getitem__"}
{"mask": "last", "input": "bcb<mask>.rnaseq.salmon.estimate_fragment_size(", "reference": "io", "full_reference": "bcbio.rnaseq.salmon.estimate_fragment_size", "raw_gpt3.5": "1. _len\n2. _size\n3. _count\n4. _sum\n5. _mean\n6. _std\n7. _var\n8. _min\n9. _max\n10. _median\n11. _mode\n12. _unique\n13. _index\n14. _values\n15. _dtype\n16. _shape\n17. _ndim\n18. _T\n19. _real\n20. _imag"}
{"mask": "last", "input": "dragonmapper.transcriptions.pinyin_to_zhuy<mask>(", "reference": "in", "full_reference": "dragonmapper.transcriptions.pinyin_to_zhuyin", "raw_gpt3.5": "1. eng\n2. ong\n3. iao\n4. uo\n5. un\n6. uan\n7. ian\n8. in\n9. ang\n10. an\n11. uang\n12. ie\n13. ei\n14. en\n15. uai\n16. ua\n17. iu\n18. iang\n19. iong\n20. iu"}
{"mask": "last", "input": "fermipy.gt<mask>.GTAnalysis(", "reference": "analysis", "full_reference": "fermipy.gtanalysis.GTAnalysis", "raw_gpt3.5": "1. config\n2. data\n3. diffuse\n4. extended\n5. filters\n6. gtbin\n7. gtcube\n8. gtlike\n9. gtsrcmaps\n10. gtsrcprob\n11. gtsrcs\n12. gtsrcselect\n13. gtsrcstat\n14. gtsrcsprob\n15. gtsrcutils\n16. gtsymtest\n17. gttable\n18. gtutils\n19. make3FGLxml\n20. roiutils"}
{"mask": "all", "input": "<mask>.plugins.csv.discover_dialect(", "reference": "rows", "full_reference": "rows.plugins.csv.discover_dialect", "raw_gpt3.5": "1. pandas\n2. numpy\n3. dask\n4. modin\n5. datatable\n6. vaex\n7. pyspark\n8. petl\n9. blaze\n10. datashape\n11. intake\n12. pyarrow\n13. fastparquet\n14. feather\n15. h5py\n16. xarray\n17. netCDF4\n18. openpyxl\n19. xlrd\n20. xlwt"}
{"mask": "all", "input": "IPython.<mask>.pickleutil.canSequence(", "reference": "utils", "full_reference": "IPython.utils.pickleutil.canSequence", "raw_gpt3.5": "1. is\n2. Iterable\n3. collections\n4. _collections\n5. _abc\n6. _pyio\n7. _pydevd_bundle\n8. _pydev_bundle\n9. _pydev_imps\n10. _pydev_runfiles\n11. _pydevd_frame_eval\n12. _pydevd_bundle_ext\n13. _pydevd_bundle_python\n14. _pydevd_bundle_pydevd_comm\n15. _pydevd_bundle_pydevd_extension_api\n16. _pydevd_bundle_pydevd_extension_utils\n17. _pydevd_bundle_pydevd_plugins_extensions\n18. _pydevd_bundle_pydevd_plugins_type_checking\n19. _pydevd_bundle_pydevd_plugins_variables\n20. _pydevd_bundle_pydevd_utils"}
{"mask": "last", "input": "topydo.ui.columns.TodoListWidget.TodoList<mask>(", "reference": "Widget", "full_reference": "topydo.ui.columns.TodoListWidget.TodoListWidget", "raw_gpt3.5": "1. Model\n2. View\n3. Controller\n4. Delegate\n5. Item\n6. Editor\n7. Filter\n8. Sorter\n9. Proxy\n10. Manager\n11. Handler\n12. Presenter\n13. Adapter\n14. Formatter\n15. Renderer\n16. Selector\n17. Navigator\n18. Explorer\n19. Organizer\n20. Analyzer"}
{"mask": "last", "input": "splunk<mask>.binding.connect(", "reference": "lib", "full_reference": "splunklib.binding.connect", "raw_gpt3.5": "1. Handler\n2. .handlers\n3. .client\n4. .exceptions\n5. .util\n6. .config\n7. .auth\n8. .models\n9. .service\n10. .search\n11. .entity\n12. .data\n13. .output\n14. .appserver\n15. .appframework\n16. .appserver.mrsparkle\n17. .appserver.mrsparkle.controllers\n18. .appserver.mrsparkle.lib\n19. .appserver.mrsparkle.lib.util\n20. .appserver.mrsparkle.lib.i18n"}
{"mask": "last", "input": "wal_<mask>.worker.WalUploader(", "reference": "e", "full_reference": "wal_e.worker.WalUploader", "raw_gpt3.5": "1. s3\n2. file\n3. http\n4. ftp\n5. azure\n6. gcp\n7. gs\n8. swift\n9. hdfs\n10. nfs\n11. smb\n12. ssh\n13. rsync\n14. scp\n15. ftps\n16. sftp\n17. webdav\n18. gsutil\n19. minio\n20. cos"}
{"mask": "last", "input": "pycbc.workflow.job<mask>.select_tmpltbank_class(", "reference": "setup", "full_reference": "pycbc.workflow.jobsetup.select_tmpltbank_class", "raw_gpt3.5": "1. _manager\n2. _utils\n3. _utils_\n4. _utils__\n5. _utils___\n6. _utils____\n7. _utils_____\n8. _utils______\n9. _utils_______\n10. _utils________\n11. _utils_________\n12. _utils__________\n13. _utils___________\n14. _utils____________\n15. _utils_____________\n16. _utils______________\n17. _utils_______________\n18. _utils________________\n19. _utils_________________\n20. _utils__________________"}
{"mask": "all", "input": "porespy.<mask>.extend_slice(", "reference": "tools", "full_reference": "porespy.tools.extend_slice", "raw_gpt3.5": "1. 'im'\n2. 'filters'\n3. 'metrics'\n4. 'network_extraction'\n5. 'generators'\n6. 'tools'\n7. 'visualization'\n8. 'metrics_3D'\n9. 'geometry'\n10. 'topology'\n11. 'image_analysis'\n12. 'io'\n13. 'alg'\n14. 'morphology'\n15. 'simulations'\n16. 'metrics_2D'\n17. 'imagej_tools'\n18. 'image_size'\n19. 'image_io'\n20. 'image_filters'"}
{"mask": "first", "input": "elifetools.<mask>JATS.doi(", "reference": "parse", "full_reference": "elifetools.parseJATS.doi", "raw_gpt3.5": "1. get\n2. as_doi\n3. to_doi\n4. from_doi\n5. parse\n6. format\n7. validate\n8. generate\n9. extract\n10. resolve\n11. normalize\n12. encode\n13. decode\n14. match\n15. compare\n16. update\n17. fetch\n18. register\n19. unregister\n20. query"}
{"mask": "first", "input": "<mask>gaia.astrometry.vectorastrometry.normalTriad(", "reference": "py", "full_reference": "pygaia.astrometry.vectorastrometry.normalTriad", "raw_gpt3.5": "1. _compute\n2. _computePartialDerivatives\n3. _computeRotationMatrix\n4. _computeUnitVector\n5. _getRotationMatrix\n6. _getUnitVector\n7. _normalize\n8. _rotate\n9. _setRotationMatrix\n10. _setUnitVector\n11. compute\n12. computePartialDerivatives\n13. computeRotationMatrix\n14. computeUnitVector\n15. getRotationMatrix\n16. getUnitVector\n17. normalize\n18. rotate\n19. setRotationMatrix\n20. setUnitVector"}
{"mask": "first", "input": "nion.swift.model.ApplicationData.<mask>_session_metadata_model(", "reference": "get", "full_reference": "nion.swift.model.ApplicationData.get_session_metadata_model", "raw_gpt3.5": "1. current\n2. get\n3. set\n4. delete\n5. update\n6. create\n7. clear\n8. add\n9. remove\n10. retrieve\n11. list\n12. query\n13. initialize\n14. load\n15. save\n16. serialize\n17. deserialize\n18. validate\n19. generate\n20. refresh"}
{"mask": "first", "input": "neo.IO.MemoryStream.<mask>Manager.ReleaseStream(", "reference": "Stream", "full_reference": "neo.IO.MemoryStream.StreamManager.ReleaseStream", "raw_gpt3.5": "1. buffer\n2. stream\n3. memory\n4. data\n5. resource\n6. pool\n7. object\n8. block\n9. chunk\n10. segment\n11. cache\n12. file\n13. handle\n14. page\n15. node\n16. index\n17. pointer\n18. reference\n19. allocator\n20. manager"}
{"mask": "first", "input": "google.cloud.talent_v4beta1.proto.<mask>_service_pb2.GetJobRequest(", "reference": "job", "full_reference": "google.cloud.talent_v4beta1.proto.job_service_pb2.GetJobRequest", "raw_gpt3.5": "1. company\n2. job\n3. application\n4. job_application\n5. job_posting\n6. job_requisition\n7. job_search\n8. job_service\n9. job_title\n10. job_type\n11. location\n12. qualification\n13. recruiting\n14. requisition\n15. search\n16. talent\n17. vacancy\n18. work\n19. work_experience\n20. work_location"}
{"mask": "last", "input": "scipy.ndimage.maximum_<mask>(", "reference": "filter", "full_reference": "scipy.ndimage.maximum_filter", "raw_gpt3.5": "1. filter\n2. filter1d\n3. filternd\n4. filter2d\n5. filter3d\n6. filter4d\n7. filter5d\n8. filter6d\n9. filter7d\n10. filter8d\n11. filter9d\n12. filter10d\n13. filter11d\n14. filter12d\n15. filter13d\n16. filter14d\n17. filter15d\n18. filter16d\n19. filter17d\n20. filter18d"}
{"mask": "first", "input": "pants.help.help_printer.<mask>Printer(", "reference": "Help", "full_reference": "pants.help.help_printer.HelpPrinter", "raw_gpt3.5": "1. c\n2. d\n3. e\n4. f\n5. g\n6. h\n7. i\n8. j\n9. k\n10. l\n11. m\n12. n\n13. o\n14. p\n15. q\n16. r\n17. s\n18. t\n19. u\n20. v"}
{"mask": "last", "input": "clips._clips.lib.EnvGetDefrule<mask>(", "reference": "Name", "full_reference": "clips._clips.lib.EnvGetDefruleName", "raw_gpt3.5": "1. Name\n2. PPForm\n3. Salience\n4. AutoFocus\n5. InFocus\n6. Watch\n7. WatchInstances\n8. Deletable\n9. Disabled\n10. ModuleName\n11. BinaryIndex\n12. Index\n13. First\n14. Next\n15. Agenda\n16. LastFired\n17. LastModified\n18. LastExecutionDuration\n19. Complexity\n20. RulePropertyList"}
{"mask": "first", "input": "<mask>quake.calculators.reportwriter.ReportWriter(", "reference": "open", "full_reference": "openquake.calculators.reportwriter.ReportWriter", "raw_gpt3.5": "1. earth\n2. seismo\n3. seismic\n4. quake\n5. tremor\n6. geologic\n7. geophysical\n8. geohazard\n9. geospatial\n10. geodetic\n11. geophysical\n12. geotechnical\n13. geomechanical\n14. geophysical\n15. geohazardous\n16. geoscientific\n17. geodetical\n18. geophysical\n19. geohazardous\n20. geospatially"}
{"mask": "all", "input": "tmc.models.<mask>.create(", "reference": "Course", "full_reference": "tmc.models.Course.create", "raw_gpt3.5": "1. user\n2. group\n3. permission\n4. role\n5. organization\n6. team\n7. project\n8. task\n9. submission\n10. feedback\n11. report\n12. assessment\n13. rubric\n14. grade\n15. comment\n16. survey\n17. quiz\n18. exam\n19. assignment\n20. enrollment"}
{"mask": "first", "input": "cv2.<mask>Template(", "reference": "match", "full_reference": "cv2.matchTemplate", "raw_gpt3.5": "1. match\n2. warp\n3. get\n4. set\n5. resize\n6. threshold\n7. find\n8. draw\n9. filter\n10. corner\n11. warpAffine\n12. warpPerspective\n13. matchShapes\n14. matchTemplate\n15. moments\n16. Sobel\n17. Scharr\n18. Laplacian\n19. Canny\n20. HoughCircles"}
{"mask": "all", "input": "pytplot.data_quants.<mask>(", "reference": "items", "full_reference": "pytplot.data_quants.items", "raw_gpt3.5": "1. values\n2. dimensions\n3. attrs\n4. metadata\n5. units\n6. labels\n7. coords\n8. indices\n9. shape\n10. size\n11. dtype\n12. ndim\n13. iscomplex\n14. isreal\n15. isimag\n16. ismasked\n17. mask\n18. fill_value\n19. min\n20. max"}
{"mask": "all", "input": "param.<mask>.param.warning(", "reference": "main", "full_reference": "param.main.param.warning", "raw_gpt3.5": "1. message\n2. level\n3. category\n4. code\n5. type\n6. name\n7. value\n8. description\n9. severity\n10. status\n11. detail\n12. reason\n13. error\n14. exception\n15. traceback\n16. log\n17. debug\n18. info\n19. warn\n20. error_message"}
{"mask": "all", "input": "luigi.<mask>.acquire_for(", "reference": "lock", "full_reference": "luigi.lock.acquire_for", "raw_gpt3.5": "1. lock\n2. task\n3. worker\n4. scheduler\n5. parameter\n6. configuration\n7. resource\n8. target\n9. event\n10. metrics\n11. external_task\n12. batch\n13. batch_file\n14. batch_request\n15. batch_task\n16. batch_worker\n17. batch_lock\n18. batch_scheduler\n19. batch_parameter\n20. batch_configuration"}
{"mask": "last", "input": "dev_tools.shell_<mask>.output_of(", "reference": "tools", "full_reference": "dev_tools.shell_tools.output_of", "raw_gpt3.5": "1. command\n2. process\n3. script\n4. function\n5. module\n6. program\n7. tool\n8. console\n9. terminal\n10. subprocess\n11. shell_command\n12. shell_script\n13. shell_function\n14. shell_module\n15. shell_program\n16. shell_tool\n17. shell_console\n18. shell_terminal\n19. shell_subprocess\n20. shell_output"}
{"mask": "first", "input": "jukeboxcore.gui.<mask>itemdata.TaskItemData(", "reference": "dj", "full_reference": "jukeboxcore.gui.djitemdata.TaskItemData", "raw_gpt3.5": "1. task\n2. list\n3. project\n4. job\n5. workflow\n6. process\n7. item\n8. data\n9. metadata\n10. status\n11. result\n12. log\n13. execution\n14. input\n15. output\n16. parameter\n17. configuration\n18. resource\n19. context\n20. event"}
{"mask": "last", "input": "numerapi.utils.parse_datetime_<mask>(", "reference": "string", "full_reference": "numerapi.utils.parse_datetime_string", "raw_gpt3.5": "1. isoformat\n2. fromisoformat\n3. strftime\n4. strptime\n5. timestamp\n6. date\n7. time\n8. year\n9. month\n10. day\n11. hour\n12. minute\n13. second\n14. microsecond\n15. tzinfo\n16. replace\n17. weekday\n18. isocalendar\n19. iso_weekday\n20. utcoffset"}
{"mask": "all", "input": "spyder.py3compat.configparser.ConfigParser.<mask>(", "reference": "set", "full_reference": "spyder.py3compat.configparser.ConfigParser.set", "raw_gpt3.5": "1. read\n2. write\n3. set\n4. get\n5. has_option\n6. has_section\n7. remove_option\n8. remove_section\n9. sections\n10. options\n11. items\n12. clear\n13. read_file\n14. read_string\n15. write_file\n16. write_string\n17. _interpolate\n18. _read\n19. _write\n20. _join_multiline_values"}
{"mask": "first", "input": "<mask>opy.compat.urlencode(", "reference": "ge", "full_reference": "geopy.compat.urlencode", "raw_gpt3.5": "1. urllib\n2. http\n3. requests\n4. urlparse\n5. urllib3\n6. urllib2\n7. urllib.parse\n8. urllib.request\n9. urllib.error\n10. urllib.robotparser\n11. urllib.response\n12. urllib.parse.urlencode\n13. urllib.parse.urlparse\n14. urllib.parse.unquote\n15. urllib.parse.quote\n16. urllib.parse.urljoin\n17. urllib.parse.urlsplit\n18. urllib.parse.urlunparse\n19. urllib.parse.urldefrag\n20. urllib.parse.quote_plus"}
{"mask": "last", "input": "grr_response_<mask>.flows.general.audit.LegacyAuditLogsForTimespan(", "reference": "server", "full_reference": "grr_response_server.flows.general.audit.LegacyAuditLogsForTimespan", "raw_gpt3.5": "1. query\n2. search\n3. fetch\n4. get\n5. retrieve\n6. find\n7. download\n8. process\n9. analyze\n10. parse\n11. collect\n12. aggregate\n13. summarize\n14. export\n15. generate\n16. create\n17. list\n18. view\n19. display\n20. print"}
{"mask": "last", "input": "benchbuild.utils.path.mkfile_uch<mask>(", "reference": "root", "full_reference": "benchbuild.utils.path.mkfile_uchroot", "raw_gpt3.5": "1.  \"ar\"\n2.  \"arj\"\n3.  \"ive\"\n4.  \"tar\"\n5.  \"zip\"\n6.  \"7z\"\n7.  \"bz2\"\n8.  \"gz\"\n9.  \"lz\"\n10. \"lzma\"\n11. \"lzo\"\n12. \"rar\"\n13. \"xz\"\n14. \"Z\"\n15. \"tar.bz2\"\n16. \"tar.gz\"\n17. \"tar.lzma\"\n18. \"tar.xz\"\n19. \"tar.Z\"\n20. \"tar.lzo\""}
{"mask": "all", "input": "saharaclient.<mask>.base.get_json(", "reference": "api", "full_reference": "saharaclient.api.base.get_json", "raw_gpt3.5": "1. client\n2. plugins\n3. exceptions\n4. utils\n5. resources\n6. common\n7. auth\n8. api\n9. tests\n10. openstack\n11. version\n12. exceptions.NotFound\n13. exceptions.BadRequest\n14. exceptions.Forbidden\n15. exceptions.Conflict\n16. exceptions.InternalServerError\n17. exceptions.Unauthorized\n18. exceptions.ServiceUnavailable\n19. exceptions.InvalidEndpoint\n20. exceptions.EndpointNotFound"}
{"mask": "last", "input": "Gt<mask>.GtApp(", "reference": "App", "full_reference": "GtApp.GtApp", "raw_gpt3.5": "1. Core\n2. GUI\n3. Utils\n4. Data\n5. Config\n6. IO\n7. Widgets\n8. Plugins\n9. Debug\n10. Test\n11. Network\n12. Security\n13. Analytics\n14. Logging\n15. Database\n16. Visualization\n17. Audio\n18. Math\n19. Image\n20. MachineLearning"}
{"mask": "first", "input": "<mask>resutils.graph.voronoi_partition_pts(", "reference": "v", "full_reference": "vresutils.graph.voronoi_partition_pts", "raw_gpt3.5": "1. delaunay\n2. scipy\n3. numpy\n4. matplotlib\n5. shapely\n6. geopandas\n7. networkx\n8. sklearn\n9. pyproj\n10. gdal\n11. rasterio\n12. fiona\n13. osgeo\n14. cv2\n15. skimage\n16. PIL\n17. seaborn\n18. statsmodels\n19. sympy\n20. pandas"}
{"mask": "last", "input": "smt<mask>.generalUtils.cvtToBlocks(", "reference": "Layer", "full_reference": "smtLayer.generalUtils.cvtToBlocks", "raw_gpt3.5": "1. int\n2. str\n3. float\n4. bool\n5. list\n6. dict\n7. tuple\n8. bytes\n9. bytearray\n10. complex\n11. set\n12. frozenset\n13. deque\n14. Counter\n15. OrderedDict\n16. ChainMap\n17. defaultdict\n18. NamedTuple\n19. Any\n20. Union"}
{"mask": "last", "input": "google.oauth2.service_<mask>.Credentials.from_service_account_info(", "reference": "account", "full_reference": "google.oauth2.service_account.Credentials.from_service_account_info", "raw_gpt3.5": "1. json\n2. dict\n3. file\n4. bytes\n5. uri\n6. data\n7. stream\n8. blob\n9. object\n10. string\n11. content\n12. buffer\n13. info\n14. path\n15. url\n16. source\n17. metadata\n18. config\n19. options\n20. settings"}
{"mask": "all", "input": "pages.<mask>.get_now(", "reference": "utils", "full_reference": "pages.utils.get_now", "raw_gpt3.5": "1. _loop\n2. _selector\n3. _transport\n4. _ssl\n5. _socket\n6. _server\n7. _client\n8. _read\n9. _write\n10. _recv\n11. _send\n12. _accept\n13. _connect\n14. _close\n15. _create\n16. _listen\n17. _acceptance\n18. _connection\n19. _timeout\n20. _exception"}
{"mask": "last", "input": "bson.objectid.ObjectId.is_<mask>(", "reference": "valid", "full_reference": "bson.objectid.ObjectId.is_valid", "raw_gpt3.5": "1. is_valid\n2. is_valid_hex\n3. is_valid_hex_string\n4. is_valid_mongo_id\n5. is_valid_object_id\n6. is_valid_oid\n7. is_valid_string\n8. is_valid_unicode\n9. is_valid_utf8\n10. is_valid_utf8_string\n11. is_valid_utf8_string_or_none\n12. is_valid_utf8_or_none\n13. is_valid_utf8_or_unicode\n14. is_valid_utf8_unicode\n15. is_valid_utf8_unicode_or_none\n16. is_valid_utf8_unicode_string\n17. is_valid_utf8_unicode_string_or_none\n18. is_valid_utf8_unicode_or_none_string\n19. is_valid_utf8_unicode_or_none_string_or_none\n20. is_valid_utf8_unicode_or_none_string_or_unicode"}
{"mask": "first", "input": "grr_response_core.lib.rdfvalues.<mask>_fs.ExtAttr(", "reference": "client", "full_reference": "grr_response_core.lib.rdfvalues.client_fs.ExtAttr", "raw_gpt3.5": "1. file\n2. directory\n3. path\n4. inode\n5. block\n6. superblock\n7. symlink\n8. mount\n9. stat\n10. fstat\n11. lstat\n12. open\n13. read\n14. write\n15. close\n16. seek\n17. tell\n18. flush\n19. truncate\n20. chmod"}
{"mask": "last", "input": "crian<mask>.parser.parse(", "reference": "za", "full_reference": "crianza.parser.parse", "raw_gpt3.5": "1. criana.parser.parse()\n2. criand.parser.parse()\n3. criane.parser.parse()\n4. criang.parser.parse()\n5. criani.parser.parse()\n6. criank.parser.parse()\n7. criant.parser.parse()\n8. crianaa.parser.parse()\n9. crianae.parser.parse()\n10. crianag.parser.parse()\n11. crianai.parser.parse()\n12. crianak.parser.parse()\n13. crianat.parser.parse()\n14. criandc.parser.parse()\n15. criandd.parser.parse()\n16. criande.parser.parse()\n17. criandg.parser.parse()\n18. criandi.parser.parse()\n19. criandk.parser.parse()\n20. criandt.parser.parse()"}
{"mask": "first", "input": "<mask>apy.config.conf.route.routes.remove(", "reference": "sc", "full_reference": "scapy.config.conf.route.routes.remove", "raw_gpt3.5": "1. flask\n2. django\n3. tornado\n4. pyramid\n5. bottle\n6. aiohttp\n7. falcon\n8. webapp2\n9. sanic\n10. hug\n11. fastapi\n12. cherrypy\n13. klein\n14. responder\n15. quart\n16. starlette\n17. web.py\n18. molten\n19. bocadillo\n20. vibora"}
{"mask": "last", "input": "alignak.objects.poller<mask>.PollerLinks(", "reference": "link", "full_reference": "alignak.objects.pollerlink.PollerLinks", "raw_gpt3.5": "1. poller\n2. poller_id\n3. poller_links\n4. poller_link\n5. poller_link_id\n6. poller_link_status\n7. poller_link_type\n8. poller_link_name\n9. poller_link_address\n10. poller_link_port\n11. poller_link_username\n12. poller_link_password\n13. poller_link_timeout\n14. poller_link_retry_interval\n15. poller_link_max_check_attempts\n16. poller_link_check_interval\n17. poller_link_check_command\n18. poller_link_check_command_args\n19. poller_link_check_command_timeout\n20. poller_link_check_command_retry_interval"}
{"mask": "last", "input": "raster<mask>.transform.from_bounds(", "reference": "io", "full_reference": "rasterio.transform.from_bounds", "raw_gpt3.5": "1. rasterio\n2. gdal\n3. osgeo\n4. geopandas\n5. shapely\n6. pyproj\n7. fiona\n8. rasterstats\n9. rasterio.features\n10. rasterio.warp\n11. rasterio.mask\n12. rasterio.plot\n13. rasterio.merge\n14. rasterio.transform\n15. rasterio.crs\n16. rasterio.enums\n17. rasterio.Env\n18. rasterio.vrt\n19. rasterio.windows\n20. rasterio.rio.merge"}
{"mask": "last", "input": "umb<mask>.components.factory.script_editor.workers.CacheData(", "reference": "ra", "full_reference": "umbra.components.factory.script_editor.workers.CacheData", "raw_gpt3.5": "1. manager\n2. loader\n3. builder\n4. writer\n5. updater\n6. retriever\n7. creator\n8. handler\n9. generator\n10. parser\n11. collector\n12. processor\n13. initializer\n14. executor\n15. sanitizer\n16. validator\n17. synthesizer\n18. analyzer\n19. transformer\n20. indexer"}
{"mask": "first", "input": "astroid.nodes.<mask>Attr(", "reference": "Del", "full_reference": "astroid.nodes.DelAttr", "raw_gpt3.5": "1. Name\n2. Tuple\n3. List\n4. Dict\n5. Set\n6. Call\n7. Unary\n8. Binary\n9. Compare\n10. Subscript\n11. Attribute\n12. If\n13. While\n14. For\n15. FunctionDef\n16. ClassDef\n17. Import\n18. ImportFrom\n19. Global\n20. Nonlocal"}
{"mask": "last", "input": "pyspider.libs.base_handler.BaseHandler.task_join_crawl_<mask>(", "reference": "config", "full_reference": "pyspider.libs.base_handler.BaseHandler.task_join_crawl_config", "raw_gpt3.5": "1. callback\n2. result\n3. queue\n4. status\n5. error\n6. retry\n7. timeout\n8. headers\n9. cookies\n10. proxies\n11. method\n12. data\n13. json\n14. params\n15. url\n16. priority\n17. age\n18. depth\n19. fetch\n20. proxy"}
{"mask": "first", "input": "azure.eventhub.common.<mask>HubError(", "reference": "Event", "full_reference": "azure.eventhub.common.EventHubError", "raw_gpt3.5": "1. Authentication\n2. Connection\n3. Messaging\n4. Event\n5. Partition\n6. Receiver\n7. Sender\n8. Retry\n9. Timeout\n10. Service\n11. Namespace\n12. Authorization\n13. Security\n14. Transport\n15. Protocol\n16. Communication\n17. Resource\n18. Management\n19. Policy\n20. Configuration"}
{"mask": "all", "input": "cms.<mask>.get_site_id(", "reference": "utils", "full_reference": "cms.utils.get_site_id", "raw_gpt3.5": "1. get\n2. site\n3. id\n4. list\n5. all\n6. names\n7. by\n8. url\n9. from\n10. alias\n11. by_name\n12. by_url\n13. by_alias\n14. by_hostname\n15. by_id\n16. by_site_name\n17. by_site_url\n18. by_site_alias\n19. by_site_hostname\n20. by_site_id"}
{"mask": "all", "input": "pyemma.coordinates.data.<mask>.reader_utils.create_file_reader(", "reference": "util", "full_reference": "pyemma.coordinates.data.util.reader_utils.create_file_reader", "raw_gpt3.5": "1. dcd\n2. trr\n3. xtc\n4. pdb\n5. gro\n6. lammpstrj\n7. mdcrd\n8. netcdf\n9. trj\n10. tng\n11. binpos\n12. mdtraj\n13. xyz\n14. g96\n15. dtr\n16. crd\n17. arc\n18. cms\n19. mol2\n20. cif"}
{"mask": "first", "input": "userena.signals.<mask>_complete.send(", "reference": "activation", "full_reference": "userena.signals.activation_complete.send", "raw_gpt3.5": "1. confirmation\n2. activation\n3. registration\n4. password_reset\n5. email_change\n6. profile_edit\n7. user_signout\n8. user_signin\n9. user_signup\n10. user_deletion\n11. user_update\n12. user_verification\n13. user_authentication\n14. user_login\n15. user_logout\n16. user_profile_update\n17. user_profile_edit\n18. user_profile_delete\n19. user_profile_create\n20. user_profile_change"}
{"mask": "first", "input": "django.utils.cache.<mask>i18n_cache_key_suffix(", "reference": "_", "full_reference": "django.utils.cache._i18n_cache_key_suffix", "raw_gpt3.5": "1. get\n2. set\n3. delete\n4. add\n5. clear\n6. has\n7. make\n8. update\n9. generate\n10. create\n11. build\n12. compute\n13. determine\n14. extract\n15. format\n16. parse\n17. replace\n18. serialize\n19. validate\n20. write"}
{"mask": "all", "input": "datadog_checks.tokumx.vendor.pymongo.<mask>._randint(", "reference": "message", "full_reference": "datadog_checks.tokumx.vendor.pymongo.message._randint", "raw_gpt3.5": "1. seed\n2. _randint\n3. _randbelow\n4. _randstr\n5. _randint32\n6. _randint64\n7. _randint16\n8. _randint8\n9. _randrange\n10. _randbytes\n11. _randint128\n12. _randint256\n13. _randint512\n14. _randint1024\n15. _randint2048\n16. _randint4096\n17. _randint8192\n18. _randint16384\n19. _randint32768\n20. _randint65536"}
{"mask": "last", "input": "featureflow.InMemory<mask>(", "reference": "Database", "full_reference": "featureflow.InMemoryDatabase", "raw_gpt3.5": "1. Buffer\n2. Store\n3. Cache\n4. Database\n5. Table\n6. Index\n7. Queue\n8. Map\n9. Set\n10. List\n11. Array\n12. Dictionary\n13. File\n14. Stream\n15. Sink\n16. Source\n17. Writer\n18. Reader\n19. Serializer\n20. Deserializer"}
{"mask": "first", "input": "th_evernote.evernote_mgr.EvernoteMgr.<mask>_evernote_spec(", "reference": "set", "full_reference": "th_evernote.evernote_mgr.EvernoteMgr.set_evernote_spec", "raw_gpt3.5": "1. get\n2. update\n3. create\n4. delete\n5. list\n6. search\n7. share\n8. download\n9. upload\n10. sync\n11. authenticate\n12. revoke\n13. refresh\n14. get_note\n15. get_notebook\n16. get_tag\n17. get_resource\n18. get_linked_notebook\n19. get_user_store\n20. get_note_store"}
{"mask": "first", "input": "astrobase.<mask>plot.pkl_postproc.update_checkplot_objectinfo(", "reference": "check", "full_reference": "astrobase.checkplot.pkl_postproc.update_checkplot_objectinfo", "raw_gpt3.5": "1. lc\n2. periodbase\n3. varclass\n4. periodogram\n5. phased\n6. periodfinding\n7. variability\n8. periodbase_lcfit\n9. periodbase_pdm\n10. periodbase_spdm\n11. periodbase_sbls\n12. periodbase_bls\n13. periodbase_multitermfit\n14. periodbase_multifit\n15. periodbase_fitting\n16. periodbase_p2p\n17. periodbase_trend\n18. periodbase_psearch\n19. periodbase_pdmf\n20. periodbase_snrthresh"}
{"mask": "last", "input": "goatools.go_enrich<mask>.GOEnrichmentStudy(", "reference": "ment", "full_reference": "goatools.go_enrichment.GOEnrichmentStudy", "raw_gpt3.5": "1. _methods\n2. _results\n3. _run\n4. _set_pop\n5. _set_study\n6. _set_terms\n7. _setobj\n8. _setpop\n9. _setstudy\n10. _setterms\n11. _update_results\n12. _update_study\n13. _update_terms\n14. _updateobj\n15. _updatepop\n16. _updatestudy\n17. _updateterms\n18. _valid_goterm\n19. _write_results\n20. _write_study"}
{"mask": "all", "input": "coapthon.defines.Types.<mask>(", "reference": "values", "full_reference": "coapthon.defines.Types.values", "raw_gpt3.5": "1. ACK\n2. CON\n3. NON\n4. RST\n5. EMPTY\n6. GET\n7. POST\n8. PUT\n9. DELETE\n10. FETCH\n11. PATCH\n12. iPATCH\n13. CREATED\n14. DELETED\n15. VALID\n16. CHANGED\n17. CONTENT\n18. BAD_REQUEST\n19. UNAUTHORIZED\n20. NOT_FOUND"}
{"mask": "all", "input": "grr_response_server.databases.<mask>.ParentHuntIsNotRunningError(", "reference": "db", "full_reference": "grr_response_server.databases.db.ParentHuntIsNotRunningError", "raw_gpt3.5": "1. MongoDB\n2. Redis\n3. SQLite\n4. MySQL\n5. PostgreSQL\n6. Oracle\n7. Couchbase\n8. Cassandra\n9. InfluxDB\n10. MariaDB\n11. HBase\n12. DynamoDB\n13. ArangoDB\n14. Riak\n15. Neo4j\n16. OrientDB\n17. MarkLogic\n18. CouchDB\n19. RethinkDB\n20. Memcached"}
{"mask": "first", "input": "sregistry.utils.<mask>_tmpdir(", "reference": "get", "full_reference": "sregistry.utils.get_tmpdir", "raw_gpt3.5": "1. get\n2. create\n3. delete\n4. set\n5. list\n6. clean\n7. make\n8. remove\n9. generate\n10. find\n11. check\n12. ensure\n13. open\n14. close\n15. clear\n16. read\n17. write\n18. copy\n19. move\n20. rename"}
{"mask": "first", "input": "pandas.<mask>libs.algos.groupsort_indexer(", "reference": "_", "full_reference": "pandas._libs.algos.groupsort_indexer", "raw_gpt3.5": "1. _n\n2. _int64\n3. _uint64\n4. _double\n5. _float32\n6. _single\n7. _bool\n8. _datetime64\n9. _timedelta64\n10. _object\n11. _unicode\n12. _bytes\n13. _category\n14. _categorical\n15. _factorize\n16. _get_group_index\n17. _groupby\n18. _hashtable\n19. _lexsort_indexer\n20. _nanargmax"}
{"mask": "last", "input": "integrated_channels.x<mask>.serializers.LearnerInfoSerializer(", "reference": "api", "full_reference": "integrated_channels.xapi.serializers.LearnerInfoSerializer", "raw_gpt3.5": "1. ml\n2. models\n3. utils\n4. data\n5. preprocessing\n6. layers\n7. activations\n8. metrics\n9. losses\n10. initializers\n11. regularizers\n12. optimizers\n13. callbacks\n14. constraints\n15. backend\n16. datasets\n17. transforms\n18. nn\n19. core\n20. random"}
{"mask": "last", "input": "odl.sol<mask>.nonsmooth.proximal_operators.combine_proximals(", "reference": "vers", "full_reference": "odl.solvers.nonsmooth.proximal_operators.combine_proximals", "raw_gpt3.5": "1. imum\n2. imal\n3. imize\n4. imizer\n5. imumize\n6. imalize\n7. imization\n8. imizer_factory\n9. imumization\n10. imalization\n11. imize_all\n12. imize_with_linesearch\n13. imize_with_backtracking\n14. imize_with_wolfe\n15. imize_with_armijo\n16. imize_with_goldstein\n17. imize_with_strong_wolfe\n18. imize_with_brent\n19. imize_with_powell\n20. imize_with_fletcher_reeves"}
{"mask": "last", "input": "de<mask>.algorithms.varAnd(", "reference": "ap", "full_reference": "deap.algorithms.varAnd", "raw_gpt3.5": "1. c\n2. i\n3. s\n4. t\n5. V\n6. a\n7. r\n8. I\n9. n\n10. g\n11. N\n12. o\n13. t\n14. X\n15. Y\n16. Z\n17. b\n18. d\n19. e\n20. f"}
{"mask": "last", "input": "ib<mask>.expr.schema.Schema.from_dict(", "reference": "is", "full_reference": "ibis.expr.schema.Schema.from_dict", "raw_gpt3.5": "1. ibis\n2. ib_insync\n3. ib_insync.util\n4. ib_insync.ib\n5. ib_insync.ib.IB\n6. ib_insync.ib.Connection\n7. ib_insync.ib.IB.qualifyContracts\n8. ib_insync.ib.IB.reqContractDetails\n9. ib_insync.ib.IB.qualifyContractsAsync\n10. ib_insync.ib.IB.reqContractDetailsAsync\n11. ib_insync.ib.IB.qualifyContractsSync\n12. ib_insync.ib.IB.reqContractDetailsSync\n13. ib_insync.ib.IB.qualifyContractsAsync\n14. ib_insync.ib.IB.reqContractDetailsAsync\n15. ib_insync.ib.IB.qualifyContractsSync\n16. ib_insync.ib.IB.reqContractDetailsSync\n17. ib_insync.ib.IB.qualifyContractsAsync\n18. ib_insync.ib.IB.reqContractDetailsAsync\n19. ib_insync.ib.IB.qualifyContractsSync\n20. ib_insync.ib.IB.reqContractDetailsSync"}
{"mask": "last", "input": "azurerm.deploy_template_<mask>(", "reference": "uri", "full_reference": "azurerm.deploy_template_uri", "raw_gpt3.5": "1. parameters\n2. uri\n3. from_uri\n4. from_file\n5. from_json\n6. from_dict\n7. from_string\n8. from_subscription\n9. from_resource_group\n10. from_deployment_name\n11. from_template_object\n12. from_template_uri\n13. from_template_file\n14. from_template_string\n15. from_template_json\n16. from_template_dict\n17. from_template_subscription\n18. from_template_resource_group\n19. from_template_deployment_name\n20. from_template_parameters"}
{"mask": "last", "input": "sfsimodels.models.FrameBuilding2<mask>(", "reference": "D", "full_reference": "sfsimodels.models.FrameBuilding2D", "raw_gpt3.5": "1. Element\n2. Element2D\n3. Element3D\n4. Element2DTruss\n5. Element2DQuad\n6. Element2DTri\n7. Element3DTruss\n8. Element3DHexa\n9. Element3DTetra\n10. Element3DBeam\n11. Element2DBeam\n12. Element2DQuad4\n13. Element2DQuad8\n14. Element2DTri3\n15. Element2DTri6\n16. Element3DHexa8\n17. Element3DHexa20\n18. Element3DTetra4\n19. Element3DTetra10\n20. Element3DBeamColumn"}
{"mask": "all", "input": "psyplot.compat.pycompat.<mask>(", "reference": "map", "full_reference": "psyplot.compat.pycompat.map", "raw_gpt3.5": "1. get_version()\n2. _PY2\n3. _PY3\n4. _PY38\n5. _PY39\n6. _PY310\n7. _PY_VER\n8. _IS_PY2\n9. _IS_PY3\n10. _IS_PY38\n11. _IS_PY39\n12. _IS_PY310\n13. _IS_PY_VER\n14. _PY_VERSION\n15. _PY_VERSION_TUPLE\n16. _PY_VERSION_HEX\n17. _PY_VERSION_SHORT\n18. _PY_VERSION_SHORT_TUPLE\n19. _PY_VERSION_SHORT_HEX\n20. _PY_VERSION_SHORT_STR"}
{"mask": "last", "input": "streprogen.utils.min_<mask>(", "reference": "between", "full_reference": "streprogen.utils.min_between", "raw_gpt3.5": "1. min_int\n2. min_float\n3. min_long\n4. min_complex\n5. min_decimal\n6. min_fraction\n7. min_pow\n8. min_pow2\n9. min_pow3\n10. min_pow4\n11. min_pow5\n12. min_pow6\n13. min_pow7\n14. min_pow8\n15. min_pow9\n16. min_pow10\n17. min_pow11\n18. min_pow12\n19. min_pow13\n20. min_pow14"}
{"mask": "first", "input": "utils.<mask>File(", "reference": "Lock", "full_reference": "utils.LockFile", "raw_gpt3.5": "1. read\n2. write\n3. open\n4. close\n5. delete\n6. copy\n7. move\n8. create\n9. append\n10. exists\n11. get\n12. set\n13. rename\n14. parse\n15. find\n16. replace\n17. load\n18. save\n19. is\n20. validate"}
{"mask": "all", "input": "dragnet.features.<mask>.CSSFeatures(", "reference": "css", "full_reference": "dragnet.features.css.CSSFeatures", "raw_gpt3.5": "1. text\n2. html\n3. tag\n4. element\n5. selector\n6. style\n7. attribute\n8. class\n9. id\n10. pseudo\n11. sheet\n12. rule\n13. property\n14. value\n15. media\n16. query\n17. layout\n18. box\n19. dimension\n20. font"}
{"mask": "all", "input": "pyhdb.protocol.<mask>.Parameters(", "reference": "parts", "full_reference": "pyhdb.protocol.parts.Parameters", "raw_gpt3.5": "1. message\n2. message_type\n3. message_header\n4. message_body\n5. message_length\n6. message_data\n7. message_encoding\n8. message_checksum\n9. message_version\n10. message_flags\n11. message_options\n12. message_properties\n13. message_priority\n14. message_timestamp\n15. message_expiration\n16. message_correlation_id\n17. message_reply_to\n18. message_delivery_mode\n19. message_redelivered\n20. message_id"}
{"mask": "first", "input": "<mask>k_requests.exceptions.VkAuthError(", "reference": "v", "full_reference": "vk_requests.exceptions.VkAuthError", "raw_gpt3.5": "1. oauth2\n2. vk\n3. social\n4. vkontakte\n5. auth\n6. vk_api\n7. vkontakte_api\n8. vkontakte_oauth2\n9. vkontakte_auth\n10. vkontakte_api_exceptions\n11. vk_api.exceptions\n12. vk_api.exceptions.VkAuthError\n13. vk_api.exceptions.VkAuthError(\n14. vk_api.exceptions.VkAuthError(\n15. vk_api.exceptions.VkAuthError(\n16. vk_api.exceptions.VkAuthError(\n17. vk_api.exceptions.VkAuthError(\n18. vk_api.exceptions.VkAuthError(\n19. vk_api.exceptions.VkAuthError(\n20. vk_api.exceptions.VkAuthError("}
{"mask": "first", "input": "odf.text.<mask>LevelStyleNumber(", "reference": "List", "full_reference": "odf.text.ListLevelStyleNumber", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. getFirst\n6. getLast\n7. getNext\n8. getPrevious\n9. getParent\n10. getChild\n11. getStyle\n12. setStyle\n13. getLevel\n14. setLevel\n15. getNumber\n16. setNumber\n17. getBulletChar\n18. setBulletChar\n19. getBulletRelativeSize\n20. setBulletRelativeSize"}
{"mask": "last", "input": "pygeoip.timezone.time_zone_by_country_and_<mask>(", "reference": "region", "full_reference": "pygeoip.timezone.time_zone_by_country_and_region", "raw_gpt3.5": "1. region\n2. city\n3. location\n4. latitude\n5. longitude\n6. postal_code\n7. metro_code\n8. area_code\n9. continent\n10. country\n11. subdivision\n12. accuracy\n13. isp\n14. domain\n15. organization\n16. asn\n17. netspeed\n18. id\n19. name\n20. description"}
{"mask": "first", "input": "<mask>out.server.utils.user_institutes(", "reference": "sc", "full_reference": "scout.server.utils.user_institutes", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. list\n6. update\n7. find\n8. delete\n9. create\n10. check\n11. retrieve\n12. fetch\n13. query\n14. select\n15. validate\n16. register\n17. unregister\n18. replace\n19. clear\n20. initialize"}
{"mask": "last", "input": "scapy.error.log_<mask>.debug(", "reference": "loading", "full_reference": "scapy.error.log_loading.debug", "raw_gpt3.5": "1. level\n2. message\n3. enabled\n4. handler\n5. format\n6. propagate\n7. logger\n8. name\n9. exc_info\n10. extra\n11. args\n12. exc_text\n13. findCaller\n14. makeRecord\n15. setLevel\n16. filter\n17. addFilter\n18. removeFilter\n19. hasHandlers\n20. getChild"}
{"mask": "all", "input": "urlparse.uses_netloc.<mask>(", "reference": "append", "full_reference": "urlparse.uses_netloc.append", "raw_gpt3.5": "1. split\n2. join\n3. append\n4. remove\n5. extend\n6. insert\n7. index\n8. pop\n9. count\n10. clear\n11. sort\n12. reverse\n13. replace\n14. find\n15. upper\n16. lower\n17. capitalize\n18. title\n19. swapcase\n20. isalnum"}
{"mask": "last", "input": "invenio_commun<mask>.forms.EditCommunityForm(", "reference": "ities", "full_reference": "invenio_communities.forms.EditCommunityForm", "raw_gpt3.5": "1. ity\n2. ication\n3. ityForm\n4. ityField\n5. ityView\n6. ityModel\n7. ityController\n8. itySerializer\n9. ityManager\n10. ityService\n11. ityHandler\n12. ityDecorator\n13. ityMiddleware\n14. ityUtils\n15. ityException\n16. ityValidator\n17. ityRegistry\n18. ityLoader\n19. ityProvider\n20. ityAction"}
{"mask": "first", "input": "nion.swift.model.<mask>ExportManager.ImportExportManager(", "reference": "Import", "full_reference": "nion.swift.model.ImportExportManager.ImportExportManager", "raw_gpt3.5": "1. OBJ\n2. FBX\n3. USD\n4. Alembic\n5. GLTF\n6. Collada\n7. STL\n8. PLY\n9. X3D\n10. VRML\n11. 3DS\n12. DXF\n13. DAE\n14. IGES\n15. STEP\n16. JT\n17. SAT\n18. IPT\n19. IAM\n20. CATPart"}
{"mask": "all", "input": "jcvi.formats.<mask>.LineFile(", "reference": "base", "full_reference": "jcvi.formats.base.LineFile", "raw_gpt3.5": "1. delimiter\n2. header\n3. comment\n4. encoding\n5. dialect\n6. field_size_limit\n7. ignore_blank_lines\n8. quoting\n9. doublequote\n10. escapechar\n11. lineterminator\n12. skipinitialspace\n13. strict\n14. tabsize\n15. quotechar\n16. skiprows\n17. nrows\n18. usecols\n19. delimiter_regex\n20. fieldnames"}
{"mask": "all", "input": "benchbuild.<mask>.cmd.cmake(", "reference": "utils", "full_reference": "benchbuild.utils.cmd.cmake", "raw_gpt3.5": "1. build\n2. configure\n3. generate\n4. install\n5. clean\n6. make\n7. test\n8. package\n9. setup\n10. run\n11. check\n12. deploy\n13. dist\n14. export\n15. init\n16. list\n17. migrate\n18. publish\n19. release\n20. update"}
{"mask": "first", "input": "<mask>ak.transports.tcp.stream.PbufBucketStream(", "reference": "ri", "full_reference": "riak.transports.tcp.stream.PbufBucketStream", "raw_gpt3.5": "1. i:  ak.transports.tcp.stream.PbufBucketStream(\n2. n:  ak.transports.tcp.stream.PbufBucketStream(\n3. o:  ak.transports.tcp.stream.PbufBucketStream(\n4. u:  ak.transports.tcp.stream.PbufBucketStream(\n5. a:  ak.transports.tcp.stream.PbufBucketStream(\n6. e:  ak.transports.tcp.stream.PbufBucketStream(\n7. r:  ak.transports.tcp.stream.PbufBucketStream(\n8. t:  ak.transports.tcp.stream.PbufBucketStream(\n9. s:  ak.transports.tcp.stream.PbufBucketStream(\n10. p: ak.transports.tcp.stream.PbufBucketStream(\n11. b: ak.transports.tcp.stream.PbufBucketStream(\n12. f: ak.transports.tcp.stream.PbufBucketStream(\n13. c: ak.transports.tcp.stream.PbufBucketStream(\n14. h: ak.transports.tcp.stream.PbufBucketStream(\n15. l: ak.transports.tcp.stream.PbufBucketStream(\n16. m: ak.transports.tcp.stream.PbufBucketStream(\n17. y: ak.transports.tcp.stream.PbufBucketStream(\n18. d: ak.transports.tcp.stream.PbufBucketStream(\n19. g: ak.transports.tcp.stream.PbufBucketStream(\n20. v: ak.transports.tcp.stream.PbufBucketStream("}
{"mask": "last", "input": "gmsh.model.addPhysical<mask>(", "reference": "Group", "full_reference": "gmsh.model.addPhysicalGroup", "raw_gpt3.5": "1. Group\n2. Name\n3. Entity\n4. Surface\n5. Volume\n6. Line\n7. Point\n8. Tag\n9. GroupList\n10. NameList\n11. EntityList\n12. SurfaceList\n13. VolumeList\n14. LineList\n15. PointList\n16. TagList\n17. GroupName\n18. EntityName\n19. SurfaceName\n20. VolumeName"}
{"mask": "all", "input": "IPython.html.<mask>.config.ConfigManager(", "reference": "services", "full_reference": "IPython.html.services.config.ConfigManager", "raw_gpt3.5": "1. profile\n2. nbapp\n3. nbextensions\n4. nbformat\n5. nbconvert\n6. nbserver\n7. nbwidgets\n8. nbformat_minor\n9. nbformat_v4\n10. nbformat_v3\n11. nbformat_v2\n12. nbformat_v1\n13. nbformat_v0\n14. nbformat_signatures\n15. nbformat_schema\n16. nbformat_validate\n17. nbformat_write\n18. nbformat_read\n19. nbformat_diff\n20. nbformat_merge"}
{"mask": "last", "input": "treeher<mask>.model.models.TextLogError.objects.filter(", "reference": "der", "full_reference": "treeherder.model.models.TextLogError.objects.filter", "raw_gpt3.5": "1. y\n2. e\n3. i\n4. n\n5. t\n6. s\n7. u\n8. r\n9. o\n10. m\n11. a\n12. g\n13. b\n14. d\n15. f\n16. h\n17. k\n18. l\n19. p\n20. v"}
{"mask": "last", "input": "synapse.lib.datfile.openDat<mask>(", "reference": "File", "full_reference": "synapse.lib.datfile.openDatFile", "raw_gpt3.5": "1. a\n2. ab\n3. abc\n4. abcd\n5. abcde\n6. abcdef\n7. abcdefg\n8. abcdefgh\n9. abcdefghi\n10. abcdefghij\n11. abcdefghijk\n12. abcdefghijkl\n13. abcdefghijklm\n14. abcdefghijklmn\n15. abcdefghijklmno\n16. abcdefghijklmnop\n17. abcdefghijklmnopq\n18. abcdefghijklmnopqr\n19. abcdefghijklmnopqrs\n20. abcdefghijklmnopqrst"}
{"mask": "last", "input": "pants.util.dirutil.is_readable_<mask>(", "reference": "dir", "full_reference": "pants.util.dirutil.is_readable_dir", "raw_gpt3.5": "1. file\n2. directory\n3. stream\n4. buffer\n5. path\n6. socket\n7. pipe\n8. handle\n9. device\n10. symlink\n11. fifo\n12. socketpair\n13. memory\n14. resource\n15. object\n16. link\n17. block\n18. character\n19. mount\n20. lock"}
{"mask": "all", "input": "django_geoip.models.City.objects.<mask>(", "reference": "all", "full_reference": "django_geoip.models.City.objects.all", "raw_gpt3.5": "1. all() \n2. count() \n3. create() \n4. delete() \n5. exclude() \n6. filter() \n7. get() \n8. get_or_create() \n9. in_bulk() \n10. iterator() \n11. latest() \n12. none() \n13. only() \n14. order_by() \n15. prefetch_related() \n16. select_for_update() \n17. update() \n18. values() \n19. values_list() \n20. with_deleted()"}
{"mask": "all", "input": "uw_canvas.sections.SECTIONS_API.<mask>(", "reference": "format", "full_reference": "uw_canvas.sections.SECTIONS_API.format", "raw_gpt3.5": "1. get_section_groups()\n2. create_section_group()\n3. update_section_group()\n4. delete_section_group()\n5. get_section_group_categories()\n6. create_section_group_category()\n7. update_section_group_category()\n8. delete_section_group_category()\n9. get_section_group_users()\n10. add_user_to_section_group()\n11. remove_user_from_section_group()\n12. get_section_group_assignments()\n13. create_section_group_assignment()\n14. update_section_group_assignment()\n15. delete_section_group_assignment()\n16. get_section_group_discussion_topics()\n17. create_section_group_discussion_topic()\n18. update_section_group_discussion_topic()\n19. delete_section_group_discussion_topic()\n20. get_section_group_announcements()"}
{"mask": "last", "input": "pip_services3_commons.random.RandomFloat.next_<mask>(", "reference": "float", "full_reference": "pip_services3_commons.random.RandomFloat.next_float", "raw_gpt3.5": "1. next_float\n2. next_double\n3. next_decimal\n4. next_positive_float\n5. next_negative_float\n6. next_non_negative_float\n7. next_non_positive_float\n8. next_float_array\n9. next_double_array\n10. next_decimal_array\n11. next_positive_float_array\n12. next_negative_float_array\n13. next_non_negative_float_array\n14. next_non_positive_float_array\n15. next_float_list\n16. next_double_list\n17. next_decimal_list\n18. next_positive_float_list\n19. next_negative_float_list\n20. next_non_negative_float_list"}
{"mask": "last", "input": "found<mask>.models.Member.objects.filter(", "reference": "ry", "full_reference": "foundry.models.Member.objects.filter", "raw_gpt3.5": "1. queryset\n2. all\n3. exclude\n4. values\n5. values_list\n6. annotate\n7. order_by\n8. distinct\n9. count\n10. exists\n11. get\n12. create\n13. bulk_create\n14. update\n15. delete\n16. select_related\n17. prefetch_related\n18. defer\n19. only\n20. using"}
{"mask": "all", "input": "dfvfs.resolver.context.<mask>(", "reference": "Context", "full_reference": "dfvfs.resolver.context.Context", "raw_gpt3.5": "1. mount_file_system\n2. mount_path_spec\n3. mount_resolver\n4. mount_point\n5. mounter\n6. mount\n7. mount_path\n8. mount_point_resolver\n9. mount_point_path_spec\n10. mount_point_type_indicator\n11. mount_point_type\n12. mount_point_type_indicators\n13. mount_point_type_resolver\n14. mount_point_type_indicators_resolver\n15. mount_point_type_indicator_resolver\n16. mount_point_type_indicators_path_spec\n17. mount_point_type_indicator_path_spec\n18. mount_point_type_indicators_resolver_context\n19. mount_point_type_indicator_resolver_context\n20. mount_point_type_indicators_path_spec_resolver"}
{"mask": "last", "input": "ga4<mask>.server.exceptions.BiosampleNotFoundException(", "reference": "gh", "full_reference": "ga4gh.server.exceptions.BiosampleNotFoundException", "raw_gpt3.5": "1. core\n2. p\n3. s\n4. t\n5. u\n6. v\n7. w\n8. x\n9. y\n10. z\n11. b\n12. c\n13. d\n14. e\n15. f\n16. g\n17. h\n18. i\n19. j\n20. k"}
{"mask": "last", "input": "modin.data_<mask>.factories.BaseFactory.read_parquet(", "reference": "management", "full_reference": "modin.data_management.factories.BaseFactory.read_parquet", "raw_gpt3.5": "1. partition\n2. frame\n3. source\n4. loader\n5. block\n6. manager\n7. generator\n8. handler\n9. builder\n10. writer\n11. converter\n12. serializer\n13. accessor\n14. selector\n15. transformer\n16. aggregator\n17. merger\n18. splitter\n19. validator\n20. compressor"}
{"mask": "last", "input": "wand<mask>.watch(", "reference": "b", "full_reference": "wandb.watch", "raw_gpt3.5": "1. files\n2. events\n3. descriptors\n4. inotify\n5. manager\n6. dog\n7. points\n8. socket\n9. mode\n10. stream\n11. directory\n12. process\n13. list\n14. queue\n15. timer\n16. filter\n17. fd\n18. path\n19. lock\n20. thread"}
{"mask": "first", "input": "<mask>_algorithms.spec_base.overridden(", "reference": "input", "full_reference": "input_algorithms.spec_base.overridden", "raw_gpt3.5": "1. _get_algorithms\n2. _get_overridden\n3. _set_overridden\n4. _update_overridden\n5. _check_overridden\n6. _remove_overridden\n7. _clear_overridden\n8. _has_overridden\n9. _add_overridden\n10. _merge_overridden\n11. _apply_overridden\n12. _compute_overridden\n13. _find_overridden\n14. _parse_overridden\n15. _serialize_overridden\n16. _validate_overridden\n17. _build_overridden\n18. _create_overridden\n19. _execute_overridden\n20. _load_overridden"}
{"mask": "first", "input": "utool.<mask>_cfgstr_from_args(", "reference": "get", "full_reference": "utool.get_cfgstr_from_args", "raw_gpt3.5": "1. _internal\n2. _core\n3. _main\n4. _tool\n5. _config\n6. _params\n7. _options\n8. _settings\n9. _arguments\n10. _args\n11. _params_dict\n12. _cfg\n13. _config_str\n14. _cfgstr\n15. _cfgstr_from_dict\n16. _cfgstr_from_params\n17. _cfgstr_from_options\n18. _cfgstr_from_settings\n19. _cfgstr_from_arguments\n20. _cfgstr_from_config"}
{"mask": "last", "input": "dragon<mask>.utils.starter.run_dragonpy(", "reference": "py", "full_reference": "dragonpy.utils.starter.run_dragonpy", "raw_gpt3.5": "1. _init\n2. _main\n3. _run\n4. _start\n5. _stop\n6. _exit\n7. _load\n8. _save\n9. _parse\n10. _config\n11. _setup\n12. _check\n13. _debug\n14. _log\n15. _test\n16. _exec\n17. _print\n18. _write\n19. _read\n20. _open"}
{"mask": "last", "input": "qiskit.extensions.standard.t.T<mask>(", "reference": "Gate", "full_reference": "qiskit.extensions.standard.t.TGate", "raw_gpt3.5": "1. Tdg\n2. Toffoli\n3. TGate\n4. TGateDefinition\n5. TGateMatrix\n6. TGateParameterization\n7. TGateSynthesis\n8. TGateSynthesisEuler\n9. TGateSynthesisPhase\n10. TGateSynthesisPhasePlus\n11. TGateSynthesisPhaseMinus\n12. TGateSynthesisRz\n13. TGateSynthesisSX\n14. TGateSynthesisSXdg\n15. TGateSynthesisT\n16. TGateSynthesisTdagger\n17. TGateSynthesisU1\n18. TGateSynthesisU2\n19. TGateSynthesisU3\n20. TGateSynthesisXZ"}
{"mask": "all", "input": "benchsuite.core.<mask>.exception.ControllerConfigurationException(", "reference": "model", "full_reference": "benchsuite.core.model.exception.ControllerConfigurationException", "raw_gpt3.5": "1. controller\n2. config\n3. exception\n4. core\n5. benchsuite\n6. ControllerConfigurationException\n7. ControllerConfigurationError\n8. ControllerConfiguration\n9. ControllerConfigurator\n10. ControllerConfig\n11. ControllerConfigException\n12. ControllerConfigParser\n13. ControllerConfigLoader\n14. ControllerConfigWriter\n15. ControllerConfigManager\n16. ControllerConfiguratorException\n17. ControllerConfiguratorError\n18. ControllerConfiguratorManager\n19. ControllerConfiguratorLoader\n20. ControllerConfiguratorWriter"}
{"mask": "first", "input": "<mask>lib.aspects.hasAspect(", "reference": "flat", "full_reference": "flatlib.aspects.hasAspect", "raw_gpt3.5": "1. spring\n2. guice\n3. aspectj\n4. pylon\n5. django\n6. flask\n7. pyramid\n8. turbogears\n9. bottle\n10. cherrypy\n11. web2py\n12. webapp2\n13. aiohttp\n14. sanic\n15. fastapi\n16. quart\n17. falcon\n18. hug\n19. responder\n20. starlette"}
{"mask": "first", "input": "ctypes.windll.<mask>32.GetStdHandle(", "reference": "kernel", "full_reference": "ctypes.windll.kernel32.GetStdHandle", "raw_gpt3.5": "1. STD_INPUT_HANDLE\n2. STD_OUTPUT_HANDLE\n3. STD_ERROR_HANDLE\n4. CONSOLE_TEXTMODE_BUFFER\n5. CONSOLE_GRAPHICS_BUFFER\n6. CONSOLE_FULLSCREEN_MODE\n7. CONSOLE_FULLSCREEN_HARDWARE\n8. CONSOLE_LIMITED_MODE\n9. CONSOLE_TERMINAL_SERVER_AWARE\n10. CONSOLE_NO_SELECTION\n11. CONSOLE_MOUSE_DOWN\n12. CONSOLE_MOUSE_UP\n13. CONSOLE_MOUSE_DOUBLE_CLICK\n14. CONSOLE_MOUSE_WHEELED\n15. CONSOLE_MOUSE_HWHEELED\n16. CONSOLE_CTRL_C_EVENT\n17. CONSOLE_CTRL_BREAK_EVENT\n18. CONSOLE_CLOSE_EVENT\n19. CONSOLE_LOGOFF_EVENT\n20. CONSOLE_SHUTDOWN_EVENT"}
{"mask": "last", "input": "pylab<mask>.core.Script.to_dict(", "reference": "control", "full_reference": "pylabcontrol.core.Script.to_dict", "raw_gpt3.5": "1. _figure\n2. _axes\n3. _lines\n4. _texts\n5. _artists\n6. _images\n7. _patches\n8. _collections\n9. _tables\n10. _legends\n11. _annotations\n12. _colorbars\n13. _grid\n14. _spines\n15. _title\n16. _xlabel\n17. _ylabel\n18. _xlim\n19. _ylim\n20. _zlim"}
{"mask": "last", "input": "six.moves.urllib_parse.parse_q<mask>(", "reference": "sl", "full_reference": "six.moves.urllib_parse.parse_qsl", "raw_gpt3.5": "1. l\n2. ist\n3. s\n4. et\n5. tr\n6. e\n7. r\n8. s_\n9. e_q\n10. s_l\n11. s_q\n12. s_r\n13. s_v\n14. s_t\n15. s_n\n16. s_i\n17. s_f\n18. s_c\n19. s_m\n20. s_p"}
{"mask": "last", "input": "pyemtmad.types.ParkingPoi<mask>(", "reference": "Type", "full_reference": "pyemtmad.types.ParkingPoiType", "raw_gpt3.5": "1. Id\n2. Name\n3. Address\n4. Latitude\n5. Longitude\n6. Distance\n7. Available\n8. Capacity\n9. Type\n10. Price\n11. Description\n12. Image\n13. OpeningHours\n14. Phone\n15. Email\n16. Website\n17. City\n18. Province\n19. Country\n20. PostalCode"}
{"mask": "all", "input": "PyQt4.Qt.QMessageBox.<mask>(", "reference": "warning", "full_reference": "PyQt4.Qt.QMessageBox.warning", "raw_gpt3.5": "1. about\n2. aboutQt\n3. addButton\n4. addButtons\n5. critical\n6. defaultButton\n7. detailedText\n8. escapeButton\n9. icon\n10. information\n11. question\n12. removeButton\n13. setDefaultButton\n14. setDetailedText\n15. setEscapeButton\n16. setIcon\n17. setInformativeText\n18. setStandardButtons\n19. setText\n20. warning"}
{"mask": "last", "input": "config.load_<mask>(", "reference": "config", "full_reference": "config.load_config", "raw_gpt3.5": "1. config.load_file\n2. config.load_dict\n3. config.load_json\n4. config.load_module\n5. config.load_string\n6. config.load_yaml\n7. config.load_ini\n8. config.load_properties\n9. config.load_pyfile\n10. config.load_object\n11. config.load_options\n12. config.load_from_envvar\n13. config.load_from_url\n14. config.load_from_filename\n15. config.load_from_map\n16. config.load_from_dict\n17. config.load_from_json\n18. config.load_from_module\n19. config.load_from_string\n20. config.load_from_yaml"}
{"mask": "all", "input": "chartjspy.<mask>.get(", "reference": "chart", "full_reference": "chartjspy.chart.get", "raw_gpt3.5": "1. data\n2. options\n3. plugins\n4. version\n5. defaults\n6. colors\n7. labels\n8. datasets\n9. type\n10. width\n11. height\n12. destroy\n13. update\n14. resize\n15. clear\n16. render\n17. to_base64_image\n18. to_blob\n19. get_dataset_meta\n20. get_dataset_at_index"}
{"mask": "last", "input": "gordon_gcp.plugins.jan<mask>.reconciler.GDNSReconcilerBuilder(", "reference": "itor", "full_reference": "gordon_gcp.plugins.janitor.reconciler.GDNSReconcilerBuilder", "raw_gpt3.5": "1. uary\n2. itor\n3. e\n4. s\n5. ch\n6. k\n7. o\n8. t\n9. i\n10. a\n11. u\n12. y\n13. er\n14. in\n15. m\n16. l\n17. g\n18. b\n19. v\n20. f"}
{"mask": "last", "input": "gensim.models.KeyedVectors.load_word2vec_<mask>(", "reference": "format", "full_reference": "gensim.models.KeyedVectors.load_word2vec_format", "raw_gpt3.5": "1. format\n2. binary\n3. fname\n4. model\n5. google\n6. api\n7. vectors\n8. embeddings\n9. txt\n10. gz\n11. bin\n12. vec\n13. kv\n14. kvvectors\n15. kvembeddings\n16. kvmodel\n17. kvtxt\n18. kvbin\n19. kvvec\n20. kvgoogle"}
{"mask": "last", "input": "tensorboard.compat.tensorflow_stub.compat.as_<mask>(", "reference": "bytes", "full_reference": "tensorboard.compat.tensorflow_stub.compat.as_bytes", "raw_gpt3.5": "1. as_bytes\n2. as_str\n3. as_text\n4. as_dtype\n5. as_graph_def\n6. as_graph_element\n7. as_list\n8. as_numpy_dtype\n9. as_numpy_ndarray\n10. as_record_bytes\n11. as_ref\n12. as_string\n13. as_tensor\n14. as_tensor_handle\n15. as_tf_output\n16. as_tf_tensor\n17. as_type\n18. as_view\n19. as_view_dtype\n20. as_view_ndarray"}
{"mask": "all", "input": "inginious.common.custom_yaml.<mask>(", "reference": "load", "full_reference": "inginious.common.custom_yaml.load", "raw_gpt3.5": "1. load\n2. dump\n3. add_constructor\n4. add_representer\n5. add_multi_constructor\n6. add_multi_representer\n7. add_implicit_resolver\n8. add_path_resolver\n9. add_constructor_mapping\n10. add_representer_mapping\n11. add_multi_constructor_mapping\n12. add_multi_representer_mapping\n13. add_implicit_resolver_mapping\n14. add_path_resolver_mapping\n15. add_constructor_handler\n16. add_representer_handler\n17. add_multi_constructor_handler\n18. add_multi_representer_handler\n19. add_implicit_resolver_handler\n20. add_path_resolver_handler"}
{"mask": "first", "input": "<mask>net.sym.expand_dims(", "reference": "mx", "full_reference": "mxnet.sym.expand_dims", "raw_gpt3.5": "1. mx\n2. gluon\n3. tensorflow\n4. torch\n5. onnx\n6. cntk\n7. theano\n8. chainer\n9. keras\n10. paddle\n11. caffe\n12. mxnet\n13. tensorflow.compat.v1\n14. tensorflow.compat.v2\n15. tensorflow.python.framework\n16. tensorflow.python.ops\n17. tensorflow.python.keras\n18. torch.nn\n19. torch.optim\n20. torch.utils.data"}
{"mask": "last", "input": "clc.v2.Account.Get<mask>(", "reference": "Alias", "full_reference": "clc.v2.Account.GetAlias", "raw_gpt3.5": "1. AccountDetails\n2. AccountInfo\n3. AccountBalance\n4. AccountTransactions\n5. AccountHistory\n6. AccountStatement\n7. AccountSummary\n8. AccountSettings\n9. AccountProfile\n10. AccountSecurity\n11. AccountVerification\n12. AccountAuthorization\n13. AccountAuthentication\n14. AccountOwnership\n15. AccountAccess\n16. AccountPermissions\n17. AccountLimits\n18. AccountFees\n19. AccountFeatures\n20. AccountUpgrade"}
{"mask": "last", "input": "plaso.engine.filter_<mask>.FilterFile(", "reference": "file", "full_reference": "plaso.engine.filter_file.FilterFile", "raw_gpt3.5": "1. Event\n2. Expression\n3. Parser\n4. Query\n5. Record\n6. Rule\n7. Set\n8. Specification\n9. Stream\n10. Template\n11. Type\n12. Value\n13. Variable\n14. Writer\n15. Action\n16. Config\n17. Container\n18. Criteria\n19. Descriptor\n20. Engine"}
{"mask": "first", "input": "nion.utils.ListModel.<mask>EqFilter(", "reference": "Not", "full_reference": "nion.utils.ListModel.NotEqFilter", "raw_gpt3.5": "1. _ : Underscore\n2. __ : Double underscore\n3. ___ : Triple underscore\n4. a : a\n5. b : b\n6. c : c\n7. d : d\n8. e : e\n9. f : f\n10. g : g\n11. h : h\n12. i : i\n13. j : j\n14. k : k\n15. l : l\n16. m : m\n17. n : n\n18. o : o\n19. p : p\n20. q : q"}
{"mask": "last", "input": "uproot.write.TFile.TFile<mask>(", "reference": "Create", "full_reference": "uproot.write.TFile.TFileCreate", "raw_gpt3.5": "1. __init__\n2. Open\n3. Close\n4. Write\n5. Flush\n6. Get\n7. GetDirectory\n8. GetListOfKeys\n9. GetStreamerInfoList\n10. GetStreamerInfo\n11. GetStreamerInfos\n12. GetStreamerInfoByName\n13. GetStreamerInfoByClassName\n14. GetStreamerInfoByType\n15. GetStreamerInfoByTypeName\n16. GetStreamerInfoByTypeAndName\n17. GetStreamerInfoByTypeAndClassName\n18. GetStreamerInfoByTypeNameAndName\n19. GetStreamerInfoByTypeNameAndClassName\n20. GetStreamerInfoByNameAndClassName"}
{"mask": "last", "input": "tvdb_<mask>.utils.utils.query_param_string_from_option_args(", "reference": "client", "full_reference": "tvdb_client.utils.utils.query_param_string_from_option_args", "raw_gpt3.5": "1. build\n2. encode\n3. parse\n4. format\n5. generate\n6. extract\n7. create\n8. validate\n9. update\n10. merge\n11. replace\n12. serialize\n13. normalize\n14. append\n15. remove\n16. sort\n17. filter\n18. map\n19. flatten\n20. group"}
{"mask": "first", "input": "<mask>luent_kafka.avro.serializer.SerializerError(", "reference": "conf", "full_reference": "confluent_kafka.avro.serializer.SerializerError", "raw_gpt3.5": "1. confluent\n2. fastavro\n3. avro\n4. kafka\n5. schema\n6. io\n7. serializer\n8. errors\n9. message\n10. registry\n11. record\n12. datum\n13. encoding\n14. deserializer\n15. data\n16. json\n17. utils\n18. client\n19. producer\n20. consumer"}
{"mask": "first", "input": "click.utils.<mask>_ansi(", "reference": "strip", "full_reference": "click.utils.strip_ansi", "raw_gpt3.5": "1. strip\n2. remove\n3. replace\n4. split\n5. find\n6. index\n7. count\n8. capitalize\n9. center\n10. decode\n11. encode\n12. endswith\n13. expandtabs\n14. format\n15. isalnum\n16. isalpha\n17. isdecimal\n18. isdigit\n19. isidentifier\n20. islower"}
{"mask": "first", "input": "<mask>agpy.pmagplotlib.add_borders(", "reference": "pm", "full_reference": "pmagpy.pmagplotlib.add_borders", "raw_gpt3.5": "1. im: \n2. mpl: \n3. numpy: \n4. astropy: \n5. scipy: \n6. matplotlib: \n7. pyregion: \n8. pyfits: \n9. pywcs: \n10. pyraf: \n11. pyds9: \n12. pyregion._region_filter: \n13. pyregion._region_filter.mask: \n14. pyregion._region_filter.mask.Mask: \n15. pyregion._region_filter.mask.Mask.mask: \n16. pyregion._region_filter.mask.Mask.mask.shape: \n17. pyregion._region_filter.mask.Mask.mask.sum: \n18. pyregion._region_filter.mask.Mask.masked: \n19. pyregion._region_filter.mask.Masked: \n20. pyregion._region_filter.mask.Masked.masked:"}
{"mask": "last", "input": "bas<mask>.acer.runner.Runner(", "reference": "elines", "full_reference": "baselines.acer.runner.Runner", "raw_gpt3.5": "1. e\n2. i\n3. t\n4. k\n5. h\n6. s\n7. c\n8. u\n9. o\n10. m\n11. a\n12. n\n13. d\n14. b\n15. f\n16. l\n17. p\n18. r\n19. v\n20. x"}
{"mask": "all", "input": "<mask>.weigh_evidence(", "reference": "utils", "full_reference": "utils.weigh_evidence", "raw_gpt3.5": "1. sklearn.tree.DecisionTreeClassifier.weigh_evidence()\n2. sklearn.tree.DecisionTreeRegressor.weigh_evidence()\n3. sklearn.ensemble.RandomForestClassifier.weigh_evidence()\n4. sklearn.ensemble.RandomForestRegressor.weigh_evidence()\n5. sklearn.naive_bayes.MultinomialNB.weigh_evidence()\n6. sklearn.naive_bayes.BernoulliNB.weigh_evidence()\n7. sklearn.linear_model.LogisticRegression.weigh_evidence()\n8. sklearn.linear_model.SGDClassifier.weigh_evidence()\n9. sklearn.linear_model.SGDRegressor.weigh_evidence()\n10. sklearn.svm.SVC.weigh_evidence()\n11. sklearn.svm.SVR.weigh_evidence()\n12. sklearn.neural_network.MLPClassifier.weigh_evidence()\n13. sklearn.neural_network.MLPRegressor.weigh_evidence()\n14. sklearn.neighbors.KNeighborsClassifier.weigh_evidence()\n15. sklearn.neighbors.KNeighborsRegressor.weigh_evidence()\n16. sklearn.cluster.KMeans.weigh_evidence()\n17. sklearn.cluster.DBSCAN.weigh_evidence()\n18. sklearn.decomposition.PCA.weigh_evidence()\n19. sklearn.decomposition.NMF.weigh_evidence()\n20. sklearn.manifold.TSNE.weigh_evidence()"}
{"mask": "first", "input": "libxml2mod.<mask>SchemaParse(", "reference": "xml", "full_reference": "libxml2mod.xmlSchemaParse", "raw_gpt3.5": "1. xml\n2. schema\n3. parse\n4. validate\n5. load\n6. parseString\n7. parseFile\n8. parseDoc\n9. parseDocFromFile\n10. parseDocFromMemory\n11. parseDocFromURL\n12. parseDocFromIO\n13. parseDocFromReader\n14. parseDocFromFD\n15. parseDocFromURI\n16. parseDocFromNode\n17. parseDocFromURLWithParser\n18. parseDocFromMemoryWithParser\n19. parseDocFromIOWithParser\n20. parseDocFromReaderWithParser"}
{"mask": "first", "input": "<mask>rogram.api.types.PasswordKdfAlgoUnknown(", "reference": "py", "full_reference": "pyrogram.api.types.PasswordKdfAlgoUnknown", "raw_gpt3.5": "1. crypto\n2. security\n3. encryption\n4. authentication\n5. key\n6. hash\n7. algorithm\n8. cipher\n9. secret\n10. secure\n11. digest\n12. hmac\n13. key_derivation\n14. pbkdf2\n15. scrypt\n16. bcrypt\n17. argon2\n18. sha\n19. md5\n20. random"}
{"mask": "first", "input": "<mask>rt.models.EncoderDecoder(", "reference": "ds", "full_reference": "dsrt.models.EncoderDecoder", "raw_gpt3.5": "1. to\n2. sta\n3. con\n4. imp\n5. exp\n6. abs\n7. dec\n8. reg\n9. int\n10. ext\n11. sup\n12. pre\n13. sub\n14. dis\n15. inc\n16. ind\n17. cov\n18. var\n19. gen\n20. par"}
{"mask": "all", "input": "pymol.<mask>.select(", "reference": "cmd", "full_reference": "pymol.cmd.select", "raw_gpt3.5": "1. atoms\n2. residue\n3. chain\n4. name\n5. index\n6. segi\n7. resn\n8. resi\n9. alt\n10. elem\n11. q\n12. b\n13. vdw\n14. partial_charge\n15. formal_charge\n16. color\n17. ss\n18. text_type\n19. text\n20. numeric_type"}
{"mask": "last", "input": "azure.eventhub.EventHub<mask>(", "reference": "Error", "full_reference": "azure.eventhub.EventHubError", "raw_gpt3.5": "1. PartitionReceiver\n2. Producer\n3. Consumer\n4. Sender\n5. Receiver\n6. Client\n7. Connection\n8. Processor\n9. CheckpointStore\n10. EventDataBatch\n11. EventHubConsumer\n12. EventHubProducer\n13. EventHubConsumerClient\n14. EventHubProducerClient\n15. EventHubProducerPartition\n16. EventHubProducerPartitionSender\n17. EventHubProducerPartitionSenderBatch\n18. EventHubProducerPartitionSenderBatchOptions\n19. EventHubProducerPartitionSenderOptions\n20. EventHubProducerSendEventOptions"}
{"mask": "first", "input": "sqlalchemy_utils.functions.<mask>_indexed_foreign_keys(", "reference": "non", "full_reference": "sqlalchemy_utils.functions.non_indexed_foreign_keys", "raw_gpt3.5": "1. get\n2. set\n3. add\n4. remove\n5. find\n6. filter\n7. has\n8. count\n9. clear\n10. create\n11. update\n12. delete\n13. list\n14. map\n15. group\n16. order\n17. join\n18. extract\n19. validate\n20. convert"}
{"mask": "first", "input": "qtpy.QtWidgets.QTabBar.<mask>Event(", "reference": "drop", "full_reference": "qtpy.QtWidgets.QTabBar.dropEvent", "raw_gpt3.5": "1. keyPressEvent\n2. mousePressEvent\n3. mouseMoveEvent\n4. mouseReleaseEvent\n5. paintEvent\n6. resizeEvent\n7. showEvent\n8. tabletEvent\n9. wheelEvent\n10. dragEnterEvent\n11. dragLeaveEvent\n12. dragMoveEvent\n13. dropEvent\n14. enterEvent\n15. focusInEvent\n16. focusOutEvent\n17. hideEvent\n18. leaveEvent\n19. moveEvent\n20. tabletEnterEvent"}
{"mask": "all", "input": "<mask>.cloud.oslogin_v1.proto.oslogin_pb2.UpdateSshPublicKeyRequest(", "reference": "google", "full_reference": "google.cloud.oslogin_v1.proto.oslogin_pb2.UpdateSshPublicKeyRequest", "raw_gpt3.5": "1. google\n2. aws\n3. azure\n4. ibm\n5. digitalocean\n6. linode\n7. vultr\n8. ovh\n9. rackspace\n10. scaleway\n11. hetzner\n12. gcp\n13. alibaba\n14. tencent\n15. oracle\n16. openstack\n17. cloudflare\n18. fastly\n19. netlify\n20. heroku"}
{"mask": "first", "input": "zbxsend.<mask>_to_zabbix(", "reference": "send", "full_reference": "zbxsend.send_to_zabbix", "raw_gpt3.5": "1. data\n2. host\n3. item\n4. value\n5. metric\n6. message\n7. payload\n8. packet\n9. json\n10. xml\n11. string\n12. dict\n13. array\n14. object\n15. file\n16. stream\n17. buffer\n18. bytes\n19. stringio\n20. io"}
{"mask": "all", "input": "decent.<mask>.Invalid(", "reference": "error", "full_reference": "decent.error.Invalid", "raw_gpt3.5": "1. argument\n2. input\n3. parameter\n4. value\n5. data\n6. format\n7. type\n8. syntax\n9. option\n10. configuration\n11. expression\n12. character\n13. field\n14. index\n15. key\n16. name\n17. path\n18. result\n19. state\n20. usage"}
{"mask": "first", "input": "pyp2rpm.utils.<mask>_to_str(", "reference": "console", "full_reference": "pyp2rpm.utils.console_to_str", "raw_gpt3.5": "1. version\n2. release\n3. epoch\n4. build\n5. source\n6. package\n7. arch\n8. requires\n9. provides\n10. conflicts\n11. obsoletes\n12. suggests\n13. enhances\n14. recommends\n15. supplements\n16. pre\n17. post\n18. preun\n19. postun\n20. verify"}
{"mask": "first", "input": "<mask>osuite.utils.transform_utils.pose_in_A_to_pose_in_B(", "reference": "rob", "full_reference": "robosuite.utils.transform_utils.pose_in_A_to_pose_in_B", "raw_gpt3.5": "1. from\n2. import\n3. numpy\n4. transforms\n5. geometry\n6. tf\n7. pyquaternion\n8. scipy\n9. math\n10. tf2\n11. tf2_ros\n12. tf2_geometry_msgs\n13. tf2_sensor_msgs\n14. tf2_py\n15. tf2_kdl\n16. tf2_eigen\n17. tf2_bullet\n18. tf2_geometry_msgs\n19. tf2_sensor_msgs\n20. tf2_py"}
{"mask": "first", "input": "utool.<mask>from(", "reference": "read", "full_reference": "utool.readfrom", "raw_gpt3.5": "1. get_func2_\n2. get_func2\n3. get_func2_as\n4. get_func2_asv\n5. get_func2_asv_\n6. get_func2_asv_dict\n7. get_func2_asv_dict_\n8. get_func2_asv_dict_list\n9. get_func2_asv_dict_list_\n10. get_func2_asv_dict_list_str\n11. get_func2_asv_dict_list_str_\n12. get_func2_asv_dict_list_str_str\n13. get_func2_asv_dict_list_str_str_\n14. get_func2_asv_dict_list_str_str_str\n15. get_func2_asv_dict_list_str_str_str_\n16. get_func2_asv_dict_list_str_str_str_str\n17. get_func2_asv_dict_list_str_str_str_str_\n18. get_func2_asv_dict_list_str_str_str_str_str\n19. get_func2_asv_dict_list_str_str_str_str_str_\n20. get_func2_asv_dict_list_str_str_str_str_str_str"}
{"mask": "all", "input": "graceful.<mask>.ValidationError(", "reference": "errors", "full_reference": "graceful.errors.ValidationError", "raw_gpt3.5": "1. message\n2. code\n3. data\n4. details\n5. reason\n6. exception\n7. error\n8. description\n9. info\n10. metadata\n11. context\n12. cause\n13. trace\n14. stack\n15. source\n16. origin\n17. target\n18. argument\n19. parameter\n20. option"}
{"mask": "first", "input": "bcbio.variation.population.<mask>_vcfanno(", "reference": "run", "full_reference": "bcbio.variation.population.run_vcfanno", "raw_gpt3.5": "1. get\n2. add\n3. set\n4. filter\n5. parse\n6. annotate\n7. merge\n8. apply\n9. remove\n10. update\n11. check\n12. create\n13. write\n14. load\n15. extract\n16. combine\n17. replace\n18. convert\n19. intersect\n20. normalize"}
{"mask": "first", "input": "googleapiclient.http.<mask>InMemoryUpload(", "reference": "Media", "full_reference": "googleapiclient.http.MediaInMemoryUpload", "raw_gpt3.5": "1. Media\n2. Bytes\n3. File\n4. Content\n5. Chunked\n6. Stream\n7. Data\n8. Buffer\n9. Payload\n10. Body\n11. Raw\n12. Binary\n13. Multipart\n14. Encoded\n15. Compressed\n16. Encrypted\n17. Secure\n18. Signed\n19. EncodedBytes\n20. EncodedFile"}
{"mask": "first", "input": "<mask>pydevd_bundle.pydevd_constants.clear_cached_thread_id(", "reference": "_", "full_reference": "_pydevd_bundle.pydevd_constants.clear_cached_thread_id", "raw_gpt3.5": "1. _ : Clears the cached thread ID.\n2. _constants : Clears the cached thread ID.\n3. _bundle : Clears the cached thread ID.\n4. _pydevd : Clears the cached thread ID.\n5. _pydevd_bundle : Clears the cached thread ID.\n6. _pydevd_bundle.pydevd_constants : Clears the cached thread ID.\n7. _pydevd_bundle.pydevd_constants.clear_cached_thread_id : Clears the cached thread ID.\n8. _pydevd_bundle.pydevd_constants.clear_cached_thread_id( : Clears the cached thread ID.\n9. _pydevd_bundle.pydevd_constants.clear_cached_thread_id() : Clears the cached thread ID.\n10. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(1 : Clears the cached thread ID.\n11. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(1) : Clears the cached thread ID.\n12. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(2 : Clears the cached thread ID.\n13. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(2) : Clears the cached thread ID.\n14. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(3 : Clears the cached thread ID.\n15. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(3) : Clears the cached thread ID.\n16. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(4 : Clears the cached thread ID.\n17. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(4) : Clears the cached thread ID.\n18. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(5 : Clears the cached thread ID.\n19. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(5) : Clears the cached thread ID.\n20. _pydevd_bundle.pydevd_constants.clear_cached_thread_id(6 : Clears the cached thread ID."}
{"mask": "all", "input": "shop.<mask>.MoneyMaker(", "reference": "money", "full_reference": "shop.money.MoneyMaker", "raw_gpt3.5": "1. buy\n2. sell\n3. invest\n4. trade\n5. earn\n6. acquire\n7. generate\n8. produce\n9. create\n10. make\n11. obtain\n12. receive\n13. gather\n14. collect\n15. accumulate\n16. amass\n17. harvest\n18. reap\n19. profit\n20. benefit"}
{"mask": "last", "input": "libnl.msg<mask>.nlmsg_len(", "reference": "_", "full_reference": "libnl.msg_.nlmsg_len", "raw_gpt3.5": "1. type\n2. flags\n3. seq\n4. pid\n5. data\n6. iov\n7. name\n8. control\n9. msg_flags\n10. msg_iov\n11. msg_iovlen\n12. msg_name\n13. msg_namelen\n14. msg_control\n15. msg_controllen\n16. msg_flags_set\n17. msg_flags_clear\n18. msg_iov_set\n19. msg_iovlen_set\n20. msg_control_set"}
{"mask": "first", "input": "rez.vendor.pydot.pydot.<mask>_from_dot_data(", "reference": "graph", "full_reference": "rez.vendor.pydot.pydot.graph_from_dot_data", "raw_gpt3.5": "1. parse\n2. graph\n3. graphviz\n4. dot\n5. dotfile\n6. dot_data\n7. dotfile_loader\n8. dot_parser\n9. dot_graph\n10. dotfile_path\n11. dotfile_name\n12. dotfile_format\n13. dotfile_data\n14. dotfile_content\n15. dotfile_string\n16. dotfile_object\n17. dotfile_handle\n18. dotfile_stream\n19. dotfile_reader\n20. dotfile_writer"}
{"mask": "last", "input": "mesh<mask>.SceneViewer(", "reference": "render", "full_reference": "meshrender.SceneViewer", "raw_gpt3.5": "1. .core\n2. .geometry\n3. .rendering\n4. .animation\n5. .materials\n6. .utils\n7. .physics\n8. .lighting\n9. .texturing\n10. .modifiers\n11. .constraints\n12. .operators\n13. .baking\n14. .exporting\n15. .importing\n16. .editing\n17. .sculpting\n18. .painting\n19. .compositing\n20. .tracking"}
{"mask": "last", "input": "heatclient.common.template_<mask>.get_template_contents(", "reference": "utils", "full_reference": "heatclient.common.template_utils.get_template_contents", "raw_gpt3.5": "1. loader\n2. utils\n3. functions\n4. parser\n5. validators\n6. environment\n7. filters\n8. tests\n9. exceptions\n10. context\n11. template\n12. renderers\n13. extensions\n14. macros\n15. nodes\n16. lexer\n17. codegen\n18. bytecode\n19. compiler\n20. debug"}
{"mask": "last", "input": "astroid.arguments.Call<mask>.from_call(", "reference": "Site", "full_reference": "astroid.arguments.CallSite.from_call", "raw_gpt3.5": "1. _infer\n2. _infer_call_result\n3. _infer_call_result_and_effects\n4. _infer_call_result_and_effects_for_call\n5. _infer_call_result_and_effects_for_method\n6. _infer_call_result_for_call\n7. _infer_call_result_for_method\n8. _infer_call_result_for_method_descriptor\n9. _infer_call_result_for_method_descriptor_with_arguments\n10. _infer_call_result_for_method_with_arguments\n11. _infer_call_result_for_unbound_method\n12. _infer_call_result_for_unbound_method_with_arguments\n13. _infer_call_result_with_arguments\n14. _infer_call_result_with_effects\n15. _infer_call_result_with_effects_for_call\n16. _infer_call_result_with_effects_for_method\n17. _infer_call_result_with_effects_for_method_descriptor\n18. _infer_call_result_with_effects_for_method_descriptor_with_arguments\n19. _infer_call_result_with_effects_for_method_with_arguments\n20. _infer_call_result_with_effects_for_unbound_method"}
{"mask": "first", "input": "<mask>mlib.common.ArgumentError(", "reference": "cc", "full_reference": "ccmlib.common.ArgumentError", "raw_gpt3.5": "1. numpy\n2. pandas\n3. scipy\n4. matplotlib\n5. sklearn\n6. tensorflow\n7. keras\n8. statsmodels\n9. seaborn\n10. bokeh\n11. pytorch\n12. sympy\n13. cv2\n14. PIL\n15. skimage\n16. mpl_toolkits\n17. theano\n18. mxnet\n19. plotly\n20. skimage.filters"}
{"mask": "all", "input": "grr_response_core.<mask>.config_lib.YamlParser(", "reference": "lib", "full_reference": "grr_response_core.lib.config_lib.YamlParser", "raw_gpt3.5": "1. logging\n2. utils\n3. exceptions\n4. constants\n5. data\n6. models\n7. plugins\n8. resources\n9. serializers\n10. settings\n11. templates\n12. tests\n13. tools\n14. ui\n15. validators\n16. version\n17. views\n18. widgets\n19. workers\n20. wrappers"}
{"mask": "last", "input": "bika.lims.api.security.get_<mask>(", "reference": "user", "full_reference": "bika.lims.api.security.get_user", "raw_gpt3.5": "1. user_roles\n2. user_groups\n3. user_permissions\n4. user_password\n5. user_lockout\n6. user_enabled\n7. user_email\n8. user_fullname\n9. user_username\n10. user_id\n11. user_last_login\n12. user_created\n13. user_modified\n14. user_deleted\n15. user_login_attempts\n16. user_login_time\n17. user_logout_time\n18. user_session_id\n19. user_session_data\n20. user_session_expiry"}
{"mask": "last", "input": "py3status.doc<mask>.update_readme_for_modules(", "reference": "strings", "full_reference": "py3status.docstrings.update_readme_for_modules", "raw_gpt3.5": "1. _readme\n2. _modules\n3. _update\n4. _for_modules\n5. _readme_and_modules\n6. _update_readme\n7. _readme_for\n8. _modules_update\n9. _for\n10. _readme_update\n11. _modules_for\n12. _update_for\n13. _readme_and_update\n14. _for_readme\n15. _modules_readme\n16. _update_modules\n17. _for_update\n18. _readme_modules\n19. _modules_and_update\n20. _update_readme_and_modules"}
{"mask": "first", "input": "<mask>vips.vips_lib.vips_region_new(", "reference": "py", "full_reference": "pyvips.vips_lib.vips_region_new", "raw_gpt3.5": "1. _vips\n2. _lib\n3. _region\n4. _new\n5. _vips_region\n6. _vips_lib\n7. _vips_lib_region\n8. _vips_new\n9. _lib_region\n10. _lib_vips\n11. _region_new\n12. _vips_lib_new\n13. _vips_region_new\n14. _lib_region_new\n15. _vips_lib_region_new\n16. _vips_new_region\n17. _new_vips\n18. _new_region\n19. _lib_new\n20. _region_vips"}
{"mask": "last", "input": "cada.csv.from_<mask>(", "reference": "row", "full_reference": "cada.csv.from_row", "raw_gpt3.5": "1. dataframe\n2. file\n3. url\n4. sql\n5. json\n6. excel\n7. dict\n8. list\n9. hdf\n10. stata\n11. sas\n12. spss\n13. feather\n14. parquet\n15. pickle\n16. sql_query\n17. sql_table\n18. sqlalchemy\n19. sql_expression\n20. sql_string"}
{"mask": "first", "input": "<mask>quake.baselib.node.floatformat(", "reference": "open", "full_reference": "openquake.baselib.node.floatformat", "raw_gpt3.5": "1. _to\n2. _from\n3. _format\n4. _with\n5. _precision\n6. _value\n7. _decimal\n8. _mode\n9. _options\n10. _locale\n11. _style\n12. _pattern\n13. _grouping\n14. _rounding\n15. _digits\n16. _exponent\n17. _normalize\n18. _scientific\n19. _nan\n20. _inf"}
{"mask": "first", "input": "iceqube.exceptions.<mask>CancelledError(", "reference": "User", "full_reference": "iceqube.exceptions.UserCancelledError", "raw_gpt3.5": "1. asyncio\n2. concurrent\n3. task\n4. future\n5. cancellation\n6. system\n7. process\n8. runtime\n9. thread\n10. event\n11. keyboard\n12. user\n13. signal\n14. timeout\n15. connection\n16. network\n17. transport\n18. protocol\n19. ssl\n20. handshake"}
{"mask": "all", "input": "<mask>.descriptors.VersionedReverseManyToOneDescriptor(", "reference": "versions", "full_reference": "versions.descriptors.VersionedReverseManyToOneDescriptor", "raw_gpt3.5": "1. django\n2. rest_framework\n3. tastypie\n4. graphene\n5. django_extensions\n6. django_filters\n7. django_comments\n8. django_haystack\n9. django_fsm\n10. django_celery_results\n11. django_fsm_admin\n12. django_comments_xtd\n13. django_fsm_log\n14. django_fsm_admin_helpers\n15. django_fsm_admin_mixins\n16. django_fsm_admin.decorators\n17. django_fsm_admin.utils\n18. django_fsm_admin.views\n19. django_fsm_admin.filters\n20. django_fsm_admin.forms"}
{"mask": "all", "input": "autolens.data.array.<mask>.mapping_util.sparse_to_unmasked_sparse_from_mask_and_pixel_centres(", "reference": "util", "full_reference": "autolens.data.array.util.mapping_util.sparse_to_unmasked_sparse_from_mask_and_pixel_centres", "raw_gpt3.5": "1. shape\n2. mask\n3. pixel\n4. indices\n5. sparse\n6. unmasked\n7. util\n8. mapping\n9. centres\n10. coordinates\n11. grid\n12. values\n13. data\n14. array\n15. image\n16. kernel\n17. convolution\n18. interpolation\n19. smoothing\n20. regularization"}
{"mask": "first", "input": "libnl.linux_private.netlink.<mask>MSG_ALIGN(", "reference": "NL", "full_reference": "libnl.linux_private.netlink.NLMSG_ALIGN", "raw_gpt3.5": "1. NLMSG_ALIGN\n2. GENLMSG_ALIGN\n3. NETLINK_ALIGN\n4. NETLINK_GENERIC\n5. NETLINK_SOCK_DIAG\n6. NETLINK_NETFILTER\n7. NETLINK_NFLOG\n8. NETLINK_XFRM\n9. NETLINK_SELINUX\n10. NETLINK_AUDIT\n11. NETLINK_KOBJECT_UEVENT\n12. NETLINK_CONNECTOR\n13. NETLINK_DNRTMSG\n14. NETLINK_CRYPTO\n15. NETLINK_RDMA\n16. NETLINK_GENERIC_NAME\n17. NETLINK_INET_DIAG\n18. NETLINK_SCSITRANSPORT\n19. NETLINK_FIB_LOOKUP\n20. NETLINK_NF_TABLES"}
{"mask": "all", "input": "hypothesis.strategies.<mask>(", "reference": "shared", "full_reference": "hypothesis.strategies.shared", "raw_gpt3.5": "1. booleans\n2. integers\n3. floats\n4. complex_numbers\n5. fractions\n6. decimals\n7. dates\n8. times\n9. timedeltas\n10. datetimes\n11. durations\n12. timezones\n13. lists\n14. sets\n15. frozensets\n16. tuples\n17. dictionaries\n18. binary\n19. text\n20. characters"}
{"mask": "all", "input": "physt.plotting.<mask>.get_err_data(", "reference": "common", "full_reference": "physt.plotting.common.get_err_data", "raw_gpt3.5": "1. x\n2. y\n3. data\n4. error\n5. values\n6. array\n7. indices\n8. mask\n9. err\n10. errorbar\n11. error_data\n12. error_values\n13. error_indices\n14. error_mask\n15. error_arr\n16. errorbars\n17. error_points\n18. error_xy\n19. errorbars_data\n20. errorbars_values"}
{"mask": "first", "input": "pympler.muppy.<mask>_objects(", "reference": "get", "full_reference": "pympler.muppy.get_objects", "raw_gpt3.5": "1. all\n2. live\n3. dead\n4. traced\n5. summary\n6. diff\n7. get\n8. filter\n9. iter\n10. count\n11. compute\n12. compute_diff\n13. compute_summary\n14. compute_referrers\n15. compute_referents\n16. compute_types\n17. compute_histogram\n18. compute_size_histogram\n19. compute_object_graph\n20. compute_typestats"}
{"mask": "last", "input": "d<mask>.config.Config.init(", "reference": "vc", "full_reference": "dvc.config.Config.init", "raw_gpt3.5": "1. db\n2. django\n3. docx\n4. docker\n5. dask\n6. dlib\n7. dill\n8. dbus\n9. dvc\n10. dft\n11. d3\n12. d2l\n13. dplyr\n14. dnf\n15. dask_ml\n16. dask_cudf\n17. dask_glm\n18. dask_xgboost\n19. dask_searchcv\n20. dask_lightgbm"}
{"mask": "last", "input": "gdcm.Anonym<mask>(", "reference": "izer", "full_reference": "gdcm.Anonymizer", "raw_gpt3.5": "1. Anonymizer\n2. AnonymizerIdentity\n3. AnonymizerRules\n4. AnonymizerBase\n5. AnonymizerProfile\n6. AnonymizerZLib\n7. AnonymizerGzip\n8. AnonymizerJPEG\n9. AnonymizerRLE\n10. AnonymizerFragments\n11. AnonymizerCryptographicMessageSyntax\n12. AnonymizerCryptographicMessageSyntaxOptions\n13. AnonymizerCryptographicMessageSyntaxPrivateKey\n14. AnonymizerCryptographicMessageSyntaxCertificate\n15. AnonymizerCryptographicMessageSyntaxRecipientInfo\n16. AnonymizerCryptographicMessageSyntaxRecipientInfoList\n17. AnonymizerCryptographicMessageSyntaxSignerInfo\n18. AnonymizerCryptographicMessageSyntaxSignerInfoList\n19. AnonymizerCryptographicMessageSyntaxDigestAlgorithm\n20. AnonymizerCryptographicMessageSyntaxEncryptionAlgorithm"}
{"mask": "last", "input": "ind<mask>.ledger.submit_request(", "reference": "y", "full_reference": "indy.ledger.submit_request", "raw_gpt3.5": "1. txn\n2. req\n3. trans\n4. transa\n5. transac\n6. transact\n7. transacti\n8. transactio\n9. transaction\n10. request\n11. sub\n12. subm\n13. submi\n14. submit\n15. submit_\n16. submit_r\n17. submit_re\n18. submit_req\n19. submit_requ\n20. submit_reque"}
{"mask": "all", "input": "future.backports.email.<mask>.encode_rfc2231(", "reference": "utils", "full_reference": "future.backports.email.utils.encode_rfc2231", "raw_gpt3.5": "1. charset\n2. header\n3. message\n4. errors\n5. utils\n6. quoprimime\n7. mime\n8. generator\n9. message_utils\n10. message_from_string\n11. message_from_binary_file\n12. message_from_file\n13. message_from_bytes\n14. message_from_binary_string\n15. message_from_binary_file\n16. message_from_binary_bytes\n17. message_from_binary_file\n18. message_from_binary_string\n19. message_from_binary_file\n20. message_from_binary_bytes"}
{"mask": "last", "input": "rauth.OAuth1<mask>(", "reference": "Session", "full_reference": "rauth.OAuth1Session", "raw_gpt3.5": "1. Session\n2. Service\n3. Signature\n4. Client\n5. Request\n6. Token\n7. Auth\n8. Handler\n9. Consumer\n10. Credentials\n11. Provider\n12. Error\n13. Utils\n14. Backend\n15. Callback\n16. Flow\n17. Config\n18. Accessor\n19. Base\n20. Validator"}
{"mask": "all", "input": "django.contrib.sites.models.<mask>.objects.all(", "reference": "Site", "full_reference": "django.contrib.sites.models.Site.objects.all", "raw_gpt3.5": "1. domain\n2. name\n3. id\n4. site\n5. get\n6. filter\n7. exclude\n8. values\n9. values_list\n10. count\n11. create\n12. update\n13. delete\n14. bulk_create\n15. get_or_create\n16. filter_by_natural_key\n17. select_related\n18. prefetch_related\n19. annotate\n20. order_by"}
{"mask": "last", "input": "bika.lims.interfaces.IAnalysis<mask>.providedBy(", "reference": "Service", "full_reference": "bika.lims.interfaces.IAnalysisService.providedBy", "raw_gpt3.5": "1. IAnalysisService\n2. IAnalysisResult\n3. IAnalysisData\n4. IAnalysisManager\n5. IAnalysisRequest\n6. IAnalysisConfiguration\n7. IAnalysisWorkflow\n8. IAnalysisExecution\n9. IAnalysisEngine\n10. IAnalysisTask\n11. IAnalysisInput\n12. IAnalysisOutput\n13. IAnalysisEnvironment\n14. IAnalysisControl\n15. IAnalysisMonitor\n16. IAnalysisValidation\n17. IAnalysisError\n18. IAnalysisException\n19. IAnalysisHandler\n20. IAnalysisObserver"}
{"mask": "all", "input": "warnings.onceregistry.<mask>(", "reference": "get", "full_reference": "warnings.onceregistry.get", "raw_gpt3.5": "1. _clear\n2. _getaction\n3. _getcategory\n4. _getcategoryname\n5. _getactionname\n6. _getactionkeys\n7. _getcategorykeys\n8. _check\n9. _showwarning\n10. _showwarnmsg\n11. _showwarnmsg_impl\n12. _showwarnmsg_impl_unchecked\n13. _showwarnmsg_impl_checked\n14. _showwarnmsg_impl_deprecated\n15. _showwarnmsg_impl_futurewarning\n16. _showwarnmsg_impl_resourcewarning\n17. _showwarnmsg_impl_userwarning\n18. _showwarnmsg_impl_warning\n19. _showwarnmsg_impl_warningregistry\n20. _showwarnmsg_impl_warningregistry_unchecked"}
{"mask": "first", "input": "livechat.models.LiveChat.chat_finder.<mask>_last_live_chat(", "reference": "get", "full_reference": "livechat.models.LiveChat.chat_finder.get_last_live_chat", "raw_gpt3.5": "1. get\n2. set\n3. find\n4. update\n5. delete\n6. create\n7. fetch\n8. filter\n9. retrieve\n10. search\n11. count\n12. list\n13. reset\n14. archive\n15. restore\n16. load\n17. save\n18. edit\n19. replace\n20. initialize"}
{"mask": "all", "input": "alarmdecoder.devices.USBDevice.<mask>(", "reference": "find", "full_reference": "alarmdecoder.devices.USBDevice.find", "raw_gpt3.5": "1. read\n2. write\n3. open\n4. close\n5. flush\n6. reset\n7. set_baudrate\n8. set_buffer_size\n9. set_dtr\n10. set_rts\n11. set_xonxoff\n12. set_break\n13. set_timeout\n14. set_write_timeout\n15. set_read_timeout\n16. fileno\n17. is_open\n18. in_waiting\n19. out_waiting\n20. nonblocking"}
{"mask": "all", "input": "gandi.cli.modules.metric.Metric.<mask>(", "reference": "query", "full_reference": "gandi.cli.modules.metric.Metric.query", "raw_gpt3.5": "1. get\n2. create\n3. update\n4. delete\n5. list\n6. add\n7. remove\n8. set\n9. fetch\n10. query\n11. aggregate\n12. calculate\n13. generate\n14. analyze\n15. display\n16. plot\n17. export\n18. import\n19. execute\n20. validate"}
{"mask": "all", "input": "salt._compat.ElementTree.<mask>(", "reference": "Element", "full_reference": "salt._compat.ElementTree.Element", "raw_gpt3.5": "1. Element\n2. ElementTree\n3. ElementPath\n4. ElementInclude\n5. ElementMaker\n6. ElementC14N\n7. ElementClassLookup\n8. ElementIncludeMatcher\n9. ElementIncludeTransform\n10. ElementIncludeError\n11. ElementIncludeDirective\n12. ElementIncludeFallback\n13. ElementIncludeHandler\n14. ElementIncludeParser\n15. ElementIncludeTransformer\n16. ElementIncludeXInclude\n17. ElementIncludeXPointer\n18. ElementIncludeXSLT\n19. ElementIncludeXSLTError\n20. ElementIncludeXSLTExtension"}
{"mask": "last", "input": "btctx<mask>.serialize.signature(", "reference": "store", "full_reference": "btctxstore.serialize.signature", "raw_gpt3.5": "1. hash\n2. sign\n3. verify\n4. encode\n5. decode\n6. encrypt\n7. decrypt\n8. digest\n9. generate\n10. import\n11. export\n12. marshal\n13. unmarshal\n14. pack\n15. unpack\n16. serialize\n17. deserialize\n18. compute\n19. derive\n20. recover"}